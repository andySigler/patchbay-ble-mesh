{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25,\n  // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor(params, parent, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this.parentCircleX = 0;\n    this.parentCircleY = 0;\n    this._touched = false;\n    this._hovered = false;\n    this.arcRadius = undefined;\n    this._arcLineWidth = undefined;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n    this.portRadius = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = this._parent.color();\n    this.highlightedFillStyle = utils.colors.white();\n    this.shouldDraw = false;\n    this.textOffset = undefined; // the visible flag is used by Cords to determine if they should be shown\n\n    this._visible = false;\n  } // GETTERS\n\n\n  get visible() {\n    return this._visible;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get hovered() {\n    return this._hovered;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get size() {\n    return this.portRadius;\n  } // SETTERS\n\n\n  set touched(state) {\n    this._touched = state;\n  }\n\n  set hovered(state) {\n    this._hovered = state;\n  }\n\n  set name(name) {\n    this._name = name;\n  }\n\n  update(sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    sizeScaler = !this._visible ? 0 : utils.clipValue(sizeScaler, portDefaults.minSizeScaler, 1); // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n\n    this._x = this.arcRadius * Math.cos(radLocation) + this.parentCircleX;\n    this._y = this.arcRadius * Math.sin(radLocation) + this.parentCircleY; // drawArc() radius and stroke width\n\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = this._arcLineWidth / 2 * sizeScaler; // wobble the port's radius, if `touchedPort` is from the other circle\n\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n\n    if (this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n      this.portRadius += Math.sin(this.wobbleCounter) * this.wobbleAmount;\n    } // text settings\n\n\n    this.textOffset = this.arcRadius - this._arcLineWidth / 2 - this.lineWidth;\n    this.fontSize = sizeScaler * this._arcLineWidth * portDefaults.fontSizeScaler;\n  }\n\n  onScreenUpdate(arcRadius, lineWidth, relX, relY) {\n    this.arcRadius = arcRadius;\n    this._arcLineWidth = lineWidth;\n    this.parentCircleX = relX;\n    this.parentCircleY = relY;\n  }\n\n  draw() {\n    ;\n\n    if (this._visible) {\n      this.context.save();\n      utils.drawArc(this.context, 0, this.arcRadius, this.portRadius, 0, utils.PI2, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.context.restore();\n    }\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n\n    if (this._x < this.parentCircleX) {\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    } else {\n      this.context.textAlign = 'right';\n    } // this.context.font = utils.font(this.fontSize);\n\n\n    this.context.font = 'Helvetica';\n\n    if (this._touched || this._hovered) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    } else {\n      this.context.fillStyle = this.fillStyle;\n    }\n\n    this.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouching(x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleAmount","lineWidthScaler","minSizeScaler","fillTextFontSizeScaler","fontSizeScaler","touchingScaler","Port","constructor","params","parent","type","index","context","_parent","_type","_index","_name","connections","_x","_y","parentCircleX","parentCircleY","_touched","_hovered","arcRadius","undefined","_arcLineWidth","wobbleCounter","Math","random","PI2","portRadius","lineWidth","strokeStyle","colors","background","fillStyle","color","highlightedFillStyle","white","shouldDraw","textOffset","_visible","visible","x","y","touched","hovered","name","size","state","update","sizeScaler","radLocation","isVisible","clipValue","cos","sin","floor","touchedPort","fontSize","onScreenUpdate","relX","relY","draw","save","drawArc","restore","drawName","translate","textAlign","rotate","PI","font","fillText","isTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25, // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor (params, parent, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n    this.parentCircleX = 0;\n    this.parentCircleY = 0;\n\n    this._touched = false;\n    this._hovered = false;\n\n    this.arcRadius = undefined;\n    this._arcLineWidth = undefined;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n\n    this.portRadius = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = this._parent.color();\n    this.highlightedFillStyle = utils.colors.white();\n    this.shouldDraw = false;\n\n    this.textOffset = undefined;\n\n    // the visible flag is used by Cords to determine if they should be shown\n    this._visible = false;\n  }\n\n  // GETTERS\n\n  get visible () { return this._visible }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get touched () { return this._touched; }\n\n  get hovered () { return this._hovered; }\n\n  get name () { return this._name; }\n\n  get index () { return this._index; }\n\n  get type () { return this._type; }\n\n  get parent () { return this._parent; }\n\n  get size () { return this.portRadius; }\n\n  // SETTERS\n\n  set touched (state) { this._touched = state; }\n\n  set hovered (state) { this._hovered = state; }\n\n  set name (name) { this._name = name; }\n\n  update (sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    sizeScaler = !this._visible ? 0 : utils.clipValue(\n      sizeScaler, portDefaults.minSizeScaler, 1);\n    // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n    this._x = this.arcRadius * Math.cos(radLocation) + this.parentCircleX;\n    this._y = this.arcRadius * Math.sin(radLocation) + this.parentCircleY;\n    // drawArc() radius and stroke width\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = (this._arcLineWidth / 2) * sizeScaler;\n    // wobble the port's radius, if `touchedPort` is from the other circle\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n    if(this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n      this.portRadius += (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n    }\n    // text settings\n    this.textOffset = (this.arcRadius - (this._arcLineWidth / 2)) - this.lineWidth;\n    this.fontSize = sizeScaler * this._arcLineWidth * portDefaults.fontSizeScaler;\n  }\n\n  onScreenUpdate (arcRadius, lineWidth, relX, relY) {\n    this.arcRadius = arcRadius;\n    this._arcLineWidth = lineWidth;\n    this.parentCircleX = relX;\n    this.parentCircleY = relY;\n  }\n\n  draw () {;\n    if(this._visible){\n      this.context.save();\n      utils.drawArc(\n        this.context,\n        0, this.arcRadius,\n        this.portRadius, 0, utils.PI2,\n        this.lineWidth, this.strokeStyle, this.fillStyle\n      )\n      this.context.restore();\n    }\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n    if(this._x < this.parentCircleX){\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    }\n    else{\n      this.context.textAlign = 'right';\n    }\n    // this.context.font = utils.font(this.fontSize);\n    this.context.font = 'Helvetica';\n    if(this._touched || this._hovered) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    }\n    else {\n      this.context.fillStyle = this.fillStyle;\n    }\n    this.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouching (x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}