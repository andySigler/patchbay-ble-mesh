{"ast":null,"code":"class AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor(context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  update(newWidth) {\n    // all values are based off of the screen's width\n    if (newWidth && newWidth > 0) {\n      this._width = newWidth;\n      this._height = Math.floor(this._width * (925 / 1200)) * .97;\n      this._middleX = this._width / 2;\n      this._middleY = this._height / 2;\n      this._scaler = Math.min(this._width, this._height * 1.2) * .9;\n    }\n  }\n\n  addConnection(name, connection, type) {\n    this._connections[name] = connection;\n\n    if (type === this.inType) {\n      for (let i = 0; i < this.params.inCircle.arcs.length; i++) {}\n    } else {//\n    }\n  }\n\n  deleteConnection(index) {//\n  }\n\n  getPort(parentID, portID) {} //\n  // GETTERS\n\n\n  get testingGUI() {\n    return this._testingGUI;\n  }\n\n  get inCircle() {\n    return this._inCircle;\n  }\n\n  get outCircle() {\n    return this._outCircle;\n  }\n\n  get connections() {\n    return this._connections;\n  }\n\n  get inType() {\n    return this._inType;\n  }\n\n  get outType() {\n    return this._outType;\n  }\n\n  get deleteType() {\n    return this._deleteType;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get middleX() {\n    return this._middleX;\n  }\n\n  get middleY() {\n    return this._middleY;\n  }\n\n  get scaler() {\n    return this._scaler;\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  } // SETTERS\n\n\n  set scaler(newVal) {\n    this._scaler = newVal;\n  }\n\n  set touchedPort(newPort) {\n    this._touchedPort = newPort;\n  }\n\n  set hoveredPort(newPort) {\n    this._hoveredPort = newPort;\n  }\n\n  set inCircle(circle) {\n    this._inCircle = circle;\n  }\n\n  set outCircle(circle) {\n    this._outCircle = circle;\n  }\n\n  set width(newVal) {\n    this._width = newVal;\n  }\n\n  set height(newVal) {\n    this._height = newVal;\n  }\n\n}\n\nexport { AppParams };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/AppParams.js"],"names":["AppParams","constructor","context","_context","_width","_height","_middleX","_middleY","_scaler","_touchedPort","undefined","_hoveredPort","_inType","_outType","_deleteType","_connections","_inCircle","_outCircle","_testingGUI","update","newWidth","Math","floor","min","addConnection","name","connection","type","inType","i","params","inCircle","arcs","length","deleteConnection","index","getPort","parentID","portID","testingGUI","outCircle","connections","outType","deleteType","width","height","middleX","middleY","scaler","touchedPort","hoveredPort","newVal","newPort","circle"],"mappings":"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","sourcesContent":["class AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor (context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  update (newWidth) {\n    // all values are based off of the screen's width\n    if (newWidth && newWidth > 0) {\n      this._width = newWidth;\n      this._height = Math.floor(this._width * (925 / 1200)) * .97;\n      this._middleX = this._width / 2;\n      this._middleY = this._height / 2;\n      this._scaler = Math.min(this._width, this._height * 1.2) * .9;\n    }\n  }\n\n  addConnection (name, connection, type) {\n    this._connections[name] = connection;\n    if (type === this.inType) {\n      for (let i = 0; i < this.params.inCircle.arcs.length; i++) {\n      }\n    }\n    else {\n      //\n    }\n  }\n\n  deleteConnection (index) {\n    //\n  }\n\n  getPort (parentID, portID) {\n    //\n  }\n\n  // GETTERS\n\n  get testingGUI () { return this._testingGUI; }\n\n  get inCircle () { return this._inCircle; }\n\n  get outCircle () { return this._outCircle; }\n\n  get connections () { return this._connections; }\n\n  get inType () { return this._inType; }\n\n  get outType () { return this._outType; }\n\n  get deleteType () { return this._deleteType; }\n\n  get context () { return this._context; }\n\n  get width () { return this._width; }\n\n  get height () { return this._height; }\n\n  get middleX () { return this._middleX; }\n\n  get middleY () { return this._middleY; }\n\n  get scaler () { return this._scaler; }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  // SETTERS\n\n  set scaler (newVal) { this._scaler = newVal; }\n\n  set touchedPort (newPort) { this._touchedPort = newPort; }\n\n  set hoveredPort (newPort) { this._hoveredPort = newPort; }\n\n  set inCircle (circle) { this._inCircle = circle; }\n\n  set outCircle (circle) { this._outCircle = circle; }\n\n  set width (newVal) { this._width = newVal; }\n\n  set height (newVal) { this._height = newVal; }\n}\n\nexport { AppParams }\n"]},"metadata":{},"sourceType":"module"}