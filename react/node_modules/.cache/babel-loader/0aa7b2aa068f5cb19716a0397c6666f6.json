{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.clearCanvas();\n    this.finger.update();\n    this.params.outCircle.update(this.params.scaler);\n    this.params.inCircle.update(usedSize);\n\n    for (var i in allConnections) {\n      allConnections[i].update();\n    }\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.save();\n    outCircle.drawArcs();\n    inCircle.drawArcs();\n    outCircle.drawNames();\n    inCircle.drawNames();\n    outCircle.drawPorts();\n    inCircle.drawPorts();\n\n    for (var i in allConnections) {\n      allConnections[i].draw();\n    }\n\n    if (touchedPort) drawTouchedPort();\n    if (hoveredPort) drawHoveredPort();\n    context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  drawTouchedPort(fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(this.params.touchedPort.size * patchbayDefaults.touchedLineScaler, patchbayDefaults.touchedLineMinWidth);\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, fingerX, fingerY, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedWobbleScaler","touchedLineScaler","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","clearCanvas","update","scaler","usedSize","i","allConnections","clearRect","canvas","width","height","save","drawArcs","drawNames","drawPorts","draw","touchedPort","drawTouchedPort","hoveredPort","drawHoveredPort","restore","requestAnimationFrame","fingerX","fingerY","touchCircleThickness","size","touchedLineWidth","Math","sin","wobbleCounter","max","touchedLineTipCircleScaler","min","circleRadius","drawArc","x","y","PI2","colors","white","drawLine","green","hoveredCircleWidth","setSize","fillStyle","grey","fillRect","createConnection","outputID","inputID","inputIndex","outputIndex","tempName","generateName","connections","outPort","getPort","inPort","newConnection","addConnection","exists","eraseNodeFromConnections","id","n","conn","parent","deleteConnection"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.clearCanvas();\n    this.finger.update();\n    this.params.outCircle.update(this.params.scaler);\n    this.params.inCircle.update(usedSize);\n\n    for(var i in allConnections){\n      allConnections[i].update();\n    }\n\n    context.clearRect(0,0,canvas.width,canvas.height);\n    context.save();\n\n    outCircle.drawArcs();\n    inCircle.drawArcs();\n\n    outCircle.drawNames();\n    inCircle.drawNames();\n\n    outCircle.drawPorts();\n    inCircle.drawPorts();\n\n    for(var i in allConnections){\n      allConnections[i].draw();\n    }\n\n    if(touchedPort) drawTouchedPort();\n    if(hoveredPort) drawHoveredPort();\n\n    context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  drawTouchedPort (fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(\n      this.params.touchedPort.size * patchbayDefaults.touchedLineScaler,\n      patchbayDefaults.touchedLineMinWidth\n    );\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      fingerX, fingerY,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(\n      outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}