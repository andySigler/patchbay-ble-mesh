{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Connection } from './Connection';\n\nclass Finger {\n  constructor(params) {\n    this.params = params;\n    this.x = undefined;\n    this.y = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didDrag = false;\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n    this.topSide = false;\n    this.justErased = false; // TODO: these should be functions passed in during instantiation\n\n    this.onMakeConnection = (outID, outIndex, inID, inIndex) => {\n      const name = Connection.generateName(outID, outIndex, inID, inIndex);\n      console.log('call to delete connection: ' + name);\n    };\n\n    this.onDeleteConnection = (outID, outIndex, inID, inIndex) => {\n      const name = Connection.generateName(outID, outIndex, inID, inIndex);\n      console.log('call to delete connection: ' + name);\n    };\n  }\n\n  update() {\n    if (this.down || this.params.touchedPort) {\n      this.findHover();\n    }\n\n    if (this.down && this.params.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n\n      if (this.params.outCircle.touched) {\n        this.params.outCircle.radiansMoved = out_radianDiff;\n      } else if (this.params.inCircle.touched) {\n        this.params.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover(fingerX, fingerY) {\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort.hovered = false;\n      this.params.hoveredPort = undefined;\n    }\n\n    const outCircle = this.params.outCircle;\n    const inCircle = this.params.inCircle;\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n\n    if (outCircle.touched || inCircle.touched) {\n      return;\n    }\n\n    if (outCircle.arcs.length > 0) {\n      if (touchedPort && touchedPort.type === this.params.inType || !touchedPort) {\n        for (let i = 0; i < 2; i++) {\n          const index = (i + outCircle.arcOffset) % outCircle.arcs.length;\n          const len = outCircle.arcs[index].ports.length;\n\n          for (let n = 0; n < len; n++) {\n            const port = outCircle.arcs[index].ports[n];\n\n            if (port.isTouching(fingerX, fingerY)) {\n              this.params.outCircle.arcs[index].ports[n].hovered = true;\n              this.params.hoveredPort = this.params.outCircle.arcs[index].ports[n];\n              break;\n            } else {\n              this.params.outCircle.arcs[index].ports[n].hovered = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (this.params.hoveredPort || this.params.inCircle.arcs.length <= 0) {\n      return;\n    }\n\n    if (!this.params.touchedPoint || this.params.touchedPort.type === this.params.outType) {\n      //loop through inner seen ports\n      for (var i = 0; i < 2; i++) {\n        if (!hoveredPort && inCircle.highlighted[String(i)]) {\n          var index = (i + inCircle.arcOffset) % inCircle.arcs.length;\n          var len = inCircle.arcs[index].ports.length;\n\n          for (var n = 0; n < len; n++) {\n            const port = this.params.inCircle.arcs[index].ports[n];\n\n            if (port.isTouching(fingerX, fingerY)) {\n              this.params.inCircle.arcs[index].ports[n].hovered = true;\n              this.params.hoveredPort = this.params.inCircle.arcs[index].ports[n];\n              break;\n            } else {\n              this.params.inCircle.arcs[index].ports[n].hovered = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  touchEvent() {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n\n    if (this.handleDeleteConnection()) {\n      return;\n    }\n\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n\n    if (this.params.inCircle.isCloseTo(this.x, this.y)) {\n      this.params.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    } else if (this.params.outCircle.isCloseTo(this.x, this.y)) {\n      this.params.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n  }\n\n  handleDeleteConnection() {\n    for (let i in this.params.connections) {\n      const conn = this.params.connections[i];\n\n      if (conn.hovered) {\n        const tempDist = utils.getDistance(this.x, this.y, conn.deleteX, conn.deleteY);\n\n        if (tempDist < conn.deleteSize) {\n          const outputID = conn.outPort.parent.id;\n          const outputIndex = conn.outPort.index;\n          const inputID = conn.inPort.parent.id;\n          const inputIndex = conn.inPort.index; // outID, outIndex, inID, inIndex\n\n          this.onDeleteConnection(outputID, outputIndex, inputID, inputIndex);\n          this.justErased = true;\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  resetFromNewCoords(x, y) {\n    if (this.x && this.y) {\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease() {\n    this.down = false;\n    this.didDrag = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  releaseWithoutMoving(x, y) {\n    this.params.inCircle.tapEvent();\n    this.params.outCircle.tapEvent(); // reset some Finger variables\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    this.justErased = false; // find which Connection is being interacted with\n\n    const touchedPort = this.params.touchedPort;\n\n    if (touchedPort) {\n      // set all to hovered to false\n      for (let n in this.params.connections) {\n        this.params.connections[n].hovered = false;\n      } // then, find the interactive connection\n\n\n      for (let n in this.params.connections) {\n        if (this.params.connections[n].inPort === touchedPort) {\n          this.params.connections[n].hovered = true;\n        } else if (this.params.connections[n].outPort === touchedPort) {\n          this.params.connections[n].hovered = true;\n        }\n      }\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent(x, y) {\n    if (!this.didDrag) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n\n    if (touchedPort && hoveredPort && hoveredPort !== touchedPort) {\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    for (var n in this.params.connections) {\n      this.params.connections[n].hovered = false;\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered() {\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    this.params.touchedPort = undefined;\n\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort.hovered = false;\n    }\n\n    this.params.hoveredPort = undefined;\n  }\n\n  makeConnection(port1, port2) {\n    let inPort;\n    let outPort;\n\n    if (port1.type === this.params.inType) {\n      inPort = port1;\n      outPort = port2;\n    } else {\n      inPort = port2;\n      outPort = port1;\n    }\n\n    const tempName = Connection.generateName(outPort.parent.id, outPort.index, inPort.parent.id, inPort.index);\n\n    if (!this.params.connections[tempName]) {\n      const outputID = outPort.parent.id;\n      const inputID = inPort.parent.id; // outID, outIndex, inID, inIndex\n\n      this.onMakeConnection(outputID, outPort.index, inputID, inPort.index);\n    }\n  }\n\n  dragEvent(x, y, justTouched) {\n    this.resetFromNewCoords(x, y);\n    this.didDrag = true; // determine what side of the screen we're on\n\n    if (this.y > this.params.middleY) this.topSide = true;else this.topSide = false;\n\n    if (!justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, this.params.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, this.params.outType);\n\n    if (justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian(type) {\n    return type === this.params.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter(x, y, type) {\n    let middleX = this.params.outCircle.centerX;\n    let middleY = this.params.outCircle.centerY;\n\n    if (type === this.params.inType) {\n      middleX = this.params.inCircle.centerX;\n      middleY = this.params.inCircle.centerY;\n    }\n\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n\n    if (x > middleX) {\n      if (y > middleY) {\n        // bottom right\n        return Math.atan(yDist / xDist);\n      } else if (y < middleY) {\n        // top right\n        return Math.atan(xDist / yDist) + Math.PI * 1.5;\n      } else {\n        // we're touching the y line\n        return 0;\n      }\n    } else if (x < middleX) {\n      if (y > middleY) {\n        // bottom left\n        return Math.atan(xDist / yDist) + Math.PI * 0.5;\n      } else if (y < middleY) {\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      } else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    } else {\n      //we're touching the x line\n      if (y > middleY) {\n        return Math.PI * 0.5;\n      } else if (y < middleY) {\n        return Math.PI * 1.5;\n      } else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n\n}\n\nexport { Finger };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Finger.js"],"names":["utils","Connection","Finger","constructor","params","x","undefined","y","xDiff","yDiff","down","didDrag","inRadianDiff","inRadianPrev","inRadianNew","outRadianDiff","outRadianPrev","outRadianNew","topSide","justErased","onMakeConnection","outID","outIndex","inID","inIndex","name","generateName","console","log","onDeleteConnection","update","touchedPort","findHover","outCircle","arcs","length","in_radianDiff","out_radianDiff","touched","radiansMoved","inCircle","fingerX","fingerY","hoveredPort","hovered","type","inType","i","index","arcOffset","len","ports","n","port","isTouching","touchedPoint","outType","highlighted","String","touchEvent","handleDeleteConnection","clearTouchedHovered","isCloseTo","mouseEvent","connections","conn","tempDist","getDistance","deleteX","deleteY","deleteSize","outputID","outPort","parent","id","outputIndex","inputID","inPort","inputIndex","resetFromNewCoords","resetOnRelease","radianDown","radianDiff","releaseWithoutMoving","tapEvent","clearCirclesTouchedHovered","releaseEvent","makeConnection","port1","port2","tempName","dragEvent","justTouched","middleY","radiansFromCenter","getRadian","middleX","centerX","centerY","yDist","Math","abs","xDist","atan","PI"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Connection } from './Connection'\n\n\nclass Finger {\n  constructor (params) {\n    this.params = params;\n\n    this.x = undefined;\n    this.y = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didDrag = false;\n\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n\n    this.topSide = false;\n    this.justErased = false;\n\n    // TODO: these should be functions passed in during instantiation\n    this.onMakeConnection = (outID, outIndex, inID, inIndex) => {\n      const name = Connection.generateName(outID, outIndex, inID, inIndex);\n      console.log('call to delete connection: ' + name)\n    }\n    this.onDeleteConnection = (outID, outIndex, inID, inIndex) => {\n      const name = Connection.generateName(outID, outIndex, inID, inIndex);\n      console.log('call to delete connection: ' + name)\n    }\n  }\n\n  update () {\n    if (this.down || this.params.touchedPort) {\n      this.findHover();\n    }\n    if (this.down && this.params.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n      if(this.params.outCircle.touched){\n        this.params.outCircle.radiansMoved = out_radianDiff;\n      }\n      else if(this.params.inCircle.touched){\n        this.params.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover (fingerX, fingerY) {\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort.hovered = false;\n      this.params.hoveredPort = undefined;\n    }\n    const outCircle = this.params.outCircle;\n    const inCircle = this.params.inCircle;\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n    if (outCircle.touched || inCircle.touched) {\n      return;\n    }\n    if (outCircle.arcs.length > 0) {\n      if ((touchedPort && touchedPort.type === this.params.inType) || !touchedPort) {\n        for (let i = 0; i < 2; i++) {\n          const index = (i + outCircle.arcOffset) % outCircle.arcs.length;\n          const len = outCircle.arcs[index].ports.length;\n          for (let n = 0; n < len; n++) {\n            const port = outCircle.arcs[index].ports[n];\n            if (port.isTouching(fingerX, fingerY)) {\n              this.params.outCircle.arcs[index].ports[n].hovered = true;\n              this.params.hoveredPort = this.params.outCircle.arcs[index].ports[n];\n              break;\n            }\n            else {\n              this.params.outCircle.arcs[index].ports[n].hovered = false;\n            }\n          }\n        }\n      }\n    }\n    if (this.params.hoveredPort || this.params.inCircle.arcs.length <= 0) {\n      return;\n    }\n    if (!this.params.touchedPoint || this.params.touchedPort.type === this.params.outType) {\n      //loop through inner seen ports\n      for (var i = 0; i < 2; i++) {\n        if (!hoveredPort && inCircle.highlighted[String(i)]) {\n          var index = (i + inCircle.arcOffset) % inCircle.arcs.length;\n          var len = inCircle.arcs[index].ports.length;\n          for (var n = 0; n < len; n++) {\n            const port = this.params.inCircle.arcs[index].ports[n];\n            if (port.isTouching(fingerX, fingerY)) {\n              this.params.inCircle.arcs[index].ports[n].hovered = true;\n              this.params.hoveredPort = this.params.inCircle.arcs[index].ports[n];\n              break;\n            }\n            else {\n              this.params.inCircle.arcs[index].ports[n].hovered = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  touchEvent () {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n    if (this.handleDeleteConnection()) {\n      return;\n    }\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    if(this.params.inCircle.isCloseTo(this.x, this.y)){\n      this.params.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    }\n    else if(this.params.outCircle.isCloseTo(this.x, this.y)){\n      this.params.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n  }\n\n  handleDeleteConnection () {\n    for(let i in this.params.connections){\n      const conn = this.params.connections[i];\n      if(conn.hovered){\n        const tempDist = utils.getDistance(\n          this.x, this.y, conn.deleteX, conn.deleteY);\n        if(tempDist < conn.deleteSize){\n          const outputID = conn.outPort.parent.id;\n          const outputIndex = conn.outPort.index;\n          const inputID = conn.inPort.parent.id;\n          const inputIndex = conn.inPort.index;\n          // outID, outIndex, inID, inIndex\n          this.onDeleteConnection(\n            outputID, outputIndex, inputID, inputIndex);\n          this.justErased = true;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  resetFromNewCoords (x, y) {\n    if(this.x && this.y){\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease () {\n    this.down = false;\n    this.didDrag = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  releaseWithoutMoving (x, y) {\n    this.params.inCircle.tapEvent();\n    this.params.outCircle.tapEvent();\n\n    // reset some Finger variables\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    this.justErased = false;\n    // find which Connection is being interacted with\n    const touchedPort = this.params.touchedPort;\n    if(touchedPort){\n      // set all to hovered to false\n      for(let n in this.params.connections){\n        this.params.connections[n].hovered = false;\n      }\n      // then, find the interactive connection\n      for (let n in this.params.connections){\n        if (this.params.connections[n].inPort === touchedPort){\n          this.params.connections[n].hovered = true;\n        }\n        else if (this.params.connections[n].outPort === touchedPort){\n          this.params.connections[n].hovered = true;\n        }\n      }\n    }\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent (x, y) {\n    if (!this.didDrag) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n    if (touchedPort && hoveredPort && hoveredPort !== touchedPort){\n      this.makeConnection(hoveredPort,touchedPort);\n    }\n\n    for (var n in this.params.connections){\n      this.params.connections[n].hovered = false;\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered () {\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    this.params.touchedPort = undefined;\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort.hovered = false;\n    }\n    this.params.hoveredPort = undefined;\n  }\n\n  makeConnection (port1, port2) {\n    let inPort;\n    let outPort;\n    if (port1.type === this.params.inType){\n      inPort = port1;\n      outPort = port2;\n    }\n    else{\n      inPort = port2;\n      outPort = port1;\n    }\n    const tempName = Connection.generateName(\n      outPort.parent.id, outPort.index, inPort.parent.id, inPort.index);\n    if (!this.params.connections[tempName]){\n      const outputID = outPort.parent.id;\n      const inputID = inPort.parent.id;\n      // outID, outIndex, inID, inIndex\n      this.onMakeConnection(outputID, outPort.index, inputID, inPort.index)\n    }\n  }\n\n  dragEvent (x, y, justTouched) {\n    this.resetFromNewCoords(x, y);\n    this.didDrag = true;\n    // determine what side of the screen we're on\n    if (this.y > this.params.middleY) this.topSide = true;\n    else this.topSide = false;\n    if (!justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, this.params.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, this.params.outType);\n    if (justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian (type) {\n    return type === this.params.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter (x, y, type) {\n    let middleX = this.params.outCircle.centerX;\n    let middleY = this.params.outCircle.centerY;\n    if (type === this.params.inType){\n      middleX = this.params.inCircle.centerX;\n      middleY = this.params.inCircle.centerY;\n    }\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n    if (x > middleX){\n      if (y > middleY){\n        // bottom right\n        return Math.atan(yDist / xDist);\n      }\n      else if (y < middleY){\n        // top right\n        return Math.atan(xDist / yDist) + (Math.PI * 1.5);\n      }\n      else {\n        // we're touching the y line\n        return 0;\n      }\n    }\n    else if (x < middleX){\n      if (y > middleY){\n        // bottom left\n        return Math.atan(xDist / yDist) + (Math.PI * 0.5);\n      }\n      else if (y < middleY){\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      }\n      else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    }\n    else {\n      //we're touching the x line\n      if (y > middleY){\n        return Math.PI * 0.5;\n      }\n      else if (y < middleY){\n        return Math.PI * 1.5;\n      }\n      else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n}\n\nexport { Finger }\n"]},"metadata":{},"sourceType":"module"}