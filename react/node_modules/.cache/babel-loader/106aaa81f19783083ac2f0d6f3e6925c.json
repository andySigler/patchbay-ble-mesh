{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Arc } from './Arc';\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  outPaddingScaler: 0.5,\n  isCloseToScaler: 0.4,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor(params, type, radiusPercentage, thickness) {\n    this.params = params;\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n    this._centerX = 0;\n    this._centerY = 0;\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n    this.targetArc = 0;\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n    this.animPercent = 0;\n    this._touched = false;\n    this._type = type;\n    this._arcs = [];\n    this.arcEndPoints = [];\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n    this.padding = circleDefaults.padding;\n\n    if (this._type === this.params.outType) {\n      this.padding *= circleDefaults.outPaddingScaler;\n    }\n  } // GETTERS\n\n\n  get type() {\n    return this._type;\n  }\n\n  get highlighted() {\n    return this._highlighted;\n  }\n\n  get lineWidth() {\n    return this._lineWidth;\n  }\n\n  get arcOffset() {\n    return this._arcOffset;\n  }\n\n  get radiusPercentage() {\n    return this._radiusPercentage;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get arcs() {\n    return this._arcs;\n  }\n\n  get radiansMoved() {\n    return this._radiansMoved;\n  }\n\n  get centerX() {\n    return this._centerX;\n  }\n\n  get centerY() {\n    return this._centerY;\n  } // SETTERS\n\n\n  set radiansMoved(newVal) {\n    this._radiansMoved = newVal;\n  }\n\n  set centerX(newVal) {\n    this._centerX = newVal;\n  }\n\n  set centerY(newVal) {\n    this._centerY = newVal;\n  }\n\n  isTouched() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  isHovered() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  update() {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    } else {\n      this.rotateDrag();\n    }\n\n    const totalArcs = this._arcs.length;\n\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * this.params.screenSize);\n\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = i === 0 ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n        const sizeScaler = this._arcOffset === arcIndex ? 1 - this.animPercent : this.animPercent;\n\n        this._arcs[arcIndex].update(points[0], points[1], this._radiusPercentage * this.params.screenSize, this._lineWidth, this.padding, this._highlighted[i], sizeScaler);\n      }\n    }\n  }\n\n  drawArcs() {\n    if (this._arcs.length > 0) {\n      this.params.context.save();\n      this.params.context.translate(this._centerX, this._centerY);\n      this.params.context.textAlign = 'center'; // draw the TYPE text in the center of the Circle\n\n      const typeFontSize = Math.floor(this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= this._type === this.params.inType ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.params.context.font = typeFontSize + 'px Helvetica';\n      this.params.context.fillStyle = utils.colors.black();\n      this.params.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler); // then draw the currently displayed arc's name\n\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc0FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.params.context.fillText(arc0.name, xOffset0, 0); // draw the next-in-line Arc's label (fading in/out)\n\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.params.context.font = arc1FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.params.context.fillText(arc1.name, xOffset1, 0); // now draw the actual child Arcs\n\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.params.context.restore();\n    }\n  }\n\n  drawNames() {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n\n    if (!this.isTouched()) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].isSelected) {\n          this._arcs[i].drawName();\n        }\n      }\n    } else {\n      // the touched port is in this circle, so only draw it's name\n      const portStart = this.params.touchedPort.parent.start;\n      const portRotStep = this.params.touchedPort.parent.rotStep;\n      const portRelRadsToPort = portRotStep * this.params.touchedPort.index;\n      const rotateToTouchedPort = portStart + portRotStep / 2 + portRelRadsToPort;\n      this.params.context.save();\n      this.params.context.rotate(rotateToTouchedPort);\n      this.params.touchedPort.drawName();\n      this.params.context.restore();\n    }\n\n    this.params.context.restore();\n  }\n\n  drawPorts() {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n\n    this.params.context.restore();\n  }\n\n  startAutoMove(newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.animPercent;\n\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.animPercent;\n      } else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.animPercent) % this._arcs.length;\n      } else {\n        arcsToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n\n    this.autoStepCount = 0;\n  }\n\n  updateAutoMoving() {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 0;\n      } else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 1 + this.animPercent;\n      }\n    } else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose(i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n\n    if (target < 0) {\n      target = this._arcs.length + target;\n    } else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    } // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n\n\n    const realStart = this.arcEndPoints[i].start;\n    let startDiff = this.arcEndPoints[target].start - realStart;\n    const realEnd = this.arcEndPoints[i].end;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = startDiff * this.animPercent + realStart;\n    let currentEnd = endDiff * this.animPercent + realEnd;\n\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    } else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    } else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent(fingerX, fingerY, compRadian) {\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n\n      const port = this._arcs[arcIndex].getTouchedPort(fingerX, fingerY);\n\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n\n    this._touched = true; // see which arc was touched\n\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag() {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - this._radiansMoved % utils.PI;\n      this._radiansMoved *= -1;\n    }\n\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - relativeMovement % 1;\n    } else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + relativeMovement % 1;\n    }\n\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      } else {\n        this.direction = 1;\n      }\n\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) this._arcOffset -= this._arcs.length;\n        this.animPercent -= 1;\n      } else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset < 0) this._arcOffset += this._arcs.length;\n        this.animPercent += 1;\n      }\n    }\n  }\n\n  addArc(name, color, id) {\n    const tempArc = new Arc(this.params, this, this._type, color, name, id, this._arcs.length);\n\n    this._arcs.push(tempArc);\n\n    this.updateDimensionStuff();\n  }\n\n  getArcById(id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n\n    return undefined;\n  }\n\n  deleteArc(id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff() {\n    this.arcEndPoints = [];\n\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [{\n        'start': utils.PI / 2,\n        'end': utils.PI / 2\n      }];\n    } else if (this._arcs.length === 2) {\n      this.arcEndPoints = [{\n        'start': utils.PI,\n        'end': utils.PI2\n      }, {\n        'start': 0,\n        'end': utils.PI\n      }];\n    } else {\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo(x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = this._radiusPercentage * this.params.screenSize + w;\n    const innerRad = this._radiusPercentage * this.params.screenSize - w;\n\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n\n    return false;\n  }\n\n  tapEvent() {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered() {\n    this._touched = false;\n\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n\n}\n\nexport { Circle };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Circle.js"],"names":["utils","Arc","circleDefaults","autoStepSize","rotateFeedback","padding","PI","outPaddingScaler","isCloseToScaler","highlightCuttoff","textXOffsetScaler","arcTextScaler","typeFontSizeScaler","labelOffsetYScaler","Circle","constructor","params","type","radiusPercentage","thickness","_radiusPercentage","relativeLineWidth","_lineWidth","undefined","_centerX","_centerY","_arcOffset","targetOffset","isAutoMoving","autoStepTotal","autoStepCount","targetArc","_highlighted","animPercent","_touched","_type","_arcs","arcEndPoints","_radiansMoved","outType","highlighted","lineWidth","arcOffset","touched","arcs","radiansMoved","centerX","centerY","newVal","isTouched","port","touchedPort","Boolean","isHovered","hoveredPort","update","updateAutoMoving","rotateDrag","totalArcs","length","Math","floor","screenSize","i","nonHighlightedIndex","arcIndex","points","transpose","sizeScaler","drawArcs","context","save","translate","textAlign","typeFontSize","inType","typeYOffset","font","fillStyle","colors","black","fillText","toUpperCase","arc0","arc0FontSize","xOffset0","color","min","name","arc1","arc1FontSize","xOffset1","drawArc","restore","drawNames","isSelected","drawName","portStart","parent","start","portRotStep","rotStep","portRelRadsToPort","index","rotateToTouchedPort","rotate","drawPorts","arc","startAutoMove","newOffset","moveUp","moveDown","arcsToMove","abs","target","realStart","startDiff","realEnd","end","endDiff","PI2","currentStart","currentEnd","mouseEvent","fingerX","fingerY","compRadian","getTouchedPort","n","relativeMovement","direction","animStep","addArc","id","tempArc","push","updateDimensionStuff","getArcById","deleteArc","splice","smallerWidth","isCloseTo","x","y","distFromCenter","getDistance","w","outerRad","innerRad","tapEvent","clearTouchedHovered"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Arc } from './Arc'\n\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  outPaddingScaler: 0.5,\n  isCloseToScaler: 0.4,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor (params, type, radiusPercentage, thickness) {\n    this.params = params;\n\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n\n    this._centerX = 0;\n    this._centerY = 0;\n\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n    this.targetArc = 0;\n\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n\n    this.animPercent = 0;\n\n    this._touched = false;\n\n    this._type = type;\n\n    this._arcs = [];\n\n    this.arcEndPoints = [];\n\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n\n    this.padding = circleDefaults.padding;\n    if (this._type === this.params.outType) {\n      this.padding *= circleDefaults.outPaddingScaler;\n    }\n  }\n\n  // GETTERS\n\n  get type () { return this._type; }\n\n  get highlighted () { return this._highlighted; }\n\n  get lineWidth () { return this._lineWidth; }\n\n  get arcOffset () { return this._arcOffset; }\n\n  get radiusPercentage () { return this._radiusPercentage; }\n\n  get touched () { return this._touched; }\n\n  get arcs () { return this._arcs; }\n\n  get radiansMoved () { return this._radiansMoved; }\n\n  get centerX () { return this._centerX; }\n\n  get centerY () { return this._centerY; }\n\n  // SETTERS\n\n  set radiansMoved (newVal) { this._radiansMoved = newVal; }\n\n  set centerX (newVal) { this._centerX = newVal; }\n\n  set centerY (newVal) { this._centerY = newVal; }\n\n  isTouched () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  isHovered () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  update () {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    }\n    else {\n      this.rotateDrag();\n    }\n    const totalArcs = this._arcs.length;\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * this.params.screenSize);\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = (i === 0) ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n        const sizeScaler = (this._arcOffset === arcIndex) ? 1 - this.animPercent : this.animPercent;\n        this._arcs[arcIndex].update(\n          points[0],\n          points[1],\n          this._radiusPercentage * this.params.screenSize,\n          this._lineWidth,\n          this.padding,\n          this._highlighted[i],\n          sizeScaler\n        );\n      }\n    }\n  }\n\n  drawArcs () {\n    if (this._arcs.length > 0) {\n      this.params.context.save();\n      this.params.context.translate(this._centerX, this._centerY);\n      this.params.context.textAlign = 'center';\n\n      // draw the TYPE text in the center of the Circle\n      const typeFontSize = Math.floor(\n        this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= (this._type === this.params.inType) ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.params.context.font = typeFontSize + 'px Helvetica';\n      this.params.context.fillStyle = utils.colors.black();\n      this.params.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler);\n\n      // then draw the currently displayed arc's name\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc0FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.params.context.fillText(arc0.name, xOffset0, 0);\n\n      // draw the next-in-line Arc's label (fading in/out)\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.params.context.font = arc1FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.params.context.fillText(arc1.name, xOffset1, 0);\n\n      // now draw the actual child Arcs\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.params.context.restore();\n    }\n  }\n\n  drawNames () {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n    if (!this.isTouched()) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].isSelected) {\n          this._arcs[i].drawName();\n        }\n      }\n    }\n    else {\n      // the touched port is in this circle, so only draw it's name\n      const portStart = this.params.touchedPort.parent.start;\n      const portRotStep = this.params.touchedPort.parent.rotStep;\n      const portRelRadsToPort = portRotStep * this.params.touchedPort.index;\n      const rotateToTouchedPort = portStart + (portRotStep / 2) + portRelRadsToPort;\n      this.params.context.save();\n      this.params.context.rotate(rotateToTouchedPort);\n      this.params.touchedPort.drawName();\n      this.params.context.restore();\n    }\n    this.params.context.restore();\n  }\n\n  drawPorts () {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n    this.params.context.restore();\n  }\n\n  startAutoMove (newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.animPercent;\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.animPercent;\n      }\n      else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.animPercent) % this._arcs.length;\n      }\n      else {\n        arcsToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n    this.autoStepCount = 0;\n  }\n\n  updateAutoMoving () {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset<0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 0;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 1 + this.animPercent;\n      }\n    }\n    else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose (i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n    if (target < 0) {\n      target = this._arcs.length + target;\n    }\n    else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    }\n    // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n    const realStart = this.arcEndPoints[i].start;\n    let startDiff = this.arcEndPoints[target].start - realStart;\n    const realEnd = this.arcEndPoints[i].end;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = (startDiff * this.animPercent) + realStart;\n    let currentEnd = (endDiff * this.animPercent) + realEnd;\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    }\n    else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    }\n    else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent (fingerX, fingerY, compRadian) {\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n      const port = this._arcs[arcIndex].getTouchedPort(fingerX, fingerY);\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n    this._touched = true;\n    // see which arc was touched\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag () {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - (this._radiansMoved % utils.PI);\n      this._radiansMoved *= -1;\n    }\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - (relativeMovement % 1);\n    }\n    else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + (relativeMovement % 1);\n    }\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      }\n      else {\n        this.direction = 1;\n      }\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) this._arcOffset -= this._arcs.length;\n        this.animPercent -= 1;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset < 0) this._arcOffset += this._arcs.length;\n        this.animPercent += 1;\n      }\n    }\n  }\n\n  addArc (name, color, id) {\n    const tempArc = new Arc(\n      this.params,\n      this,\n      this._type,\n      color,\n      name,\n      id,\n      this._arcs.length\n    );\n    this._arcs.push(tempArc);\n    this.updateDimensionStuff();\n  }\n\n  getArcById (id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n    return undefined;\n  }\n\n  deleteArc (id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n        break;\n      }\n    }\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff () {\n    this.arcEndPoints = [];\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI / 2,\n          'end': utils.PI / 2\n        }\n      ];\n    }\n    else if (this._arcs.length === 2) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI,\n          'end': utils.PI2\n        },\n        {\n          'start': 0,\n          'end': utils.PI\n        },\n      ];\n    }\n    else{\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo (x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = (this._radiusPercentage * this.params.screenSize) + w;\n    const innerRad = (this._radiusPercentage * this.params.screenSize) - w;\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n    return false;\n  }\n\n  tapEvent () {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered () {\n    this._touched = false;\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n}\n\nexport { Circle }\n"]},"metadata":{},"sourceType":"module"}