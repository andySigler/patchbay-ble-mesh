{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/patchbay-react/patchbay-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from './DrawUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {\n    in: 0.375,\n    out: .875\n  }\n};\n\nclass Arc {\n  constructor(params, parent, type, name, id, color) {\n    this.params = params;\n    this.context = params.context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  } // GETTERS\n\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  createPort(id, name) {\n    return new Port(this.params, this, this._type, id, name, this._color);\n  }\n\n  addPort(port) {\n    this._ports.push(port); // update some draw settings that change when ports.length > 0\n\n\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n\n    if (this._type === 'in') {\n      console.log();\n      console.log(this._type === this.params.inType, this.shouldDrawGutter);\n    }\n  }\n\n  getIndexOfPort(port) {\n    for (let _ref of this._ports.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let i = _ref2[0];\n      let p = _ref2[1];\n\n      if (p === port) {\n        return i;\n      }\n    }\n\n    return undefined;\n  }\n\n  onScreenUpdate(radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update(start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    this.drawnLineWidth = utils.clipValue(this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + utils.PI2 * arcDefaults.gutterStartEndScaler;\n    this.gutterEnd = this.end - utils.PI2 * arcDefaults.gutterStartEndScaler;\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let _ref3 of this._ports.entries()) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let i = _ref4[0];\n      let port = _ref4[1];\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort(x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.drawnLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.shouldDrawGutter) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterThickness, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawAllPortNames() {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName(port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + this.rotStep / 2 + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    sizeScaler = utils.clipValue(sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","emptyLineWidthScaler","gutterThicknessScaler","gutterStartEndScaler","sizeScalerPreMultiplier","angleOffset","in","out","Arc","constructor","params","parent","type","name","id","color","context","_parent","_type","_color","_name","_id","_sizeScaler","_ports","_touched","_isSelected","start","undefined","end","PI2","radius","lineWidth","drawnLineWidth","drawnLineWidthScaler","shouldDrawGutter","gutterStart","gutterEnd","gutterThickness","ports","isSelected","touched","sizeScaler","newVal","holdsTouchedPort","port","touchedPort","Boolean","holdsHoveredPort","hoveredPort","createPort","addPort","push","inType","console","log","getIndexOfPort","entries","i","p","onScreenUpdate","circleX","circleY","update","modifySizeScaler","clipValue","updatePorts","updateGutter","Math","max","rotStep","length","radLocation","getTouchedPort","x","y","isUserTouching","drawArc","save","colors","background","restore","drawAllPortNames","drawPortName","indexOfPort","portRelRadsToPort","radiansToTouchedPort","rotate","drawName","drawPorts","PI","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Port } from './Port'\n\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {in: 0.375, out: .875}\n};\n\nclass Arc {\n  constructor (params, parent, type, name, id, color) {\n    this.params = params;\n    this.context = params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._touched = false;\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  }\n\n  // GETTERS\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get ports () { return this._ports; }\n\n  get isSelected () { return this._isSelected; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set touched (newVal) { this._touched = newVal; }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  createPort (id, name) {\n    return new Port(this.params, this, this._type, id, name, this._color);\n  }\n\n  addPort (port) {\n    this._ports.push(port);\n    // update some draw settings that change when ports.length > 0\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n    if (this._type === 'in') {\n      console.log();\n      console.log(this._type === this.params.inType, this.shouldDrawGutter);\n    }\n  }\n\n  getIndexOfPort (port) {\n    for (let [i, p] of this._ports.entries()) {\n      if (p === port) {\n        return i;\n      }\n    }\n    return undefined;\n  }\n\n  onScreenUpdate (radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update (start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    this.drawnLineWidth = utils.clipValue(\n      this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(\n      this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + (utils.PI2 * arcDefaults.gutterStartEndScaler);\n    this.gutterEnd = this.end - (utils.PI2 * arcDefaults.gutterStartEndScaler);\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let [i, port] of this._ports.entries()) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort (x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.drawnLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.shouldDrawGutter) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterThickness, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawAllPortNames () {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName (port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + (this.rotStep / 2) + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    sizeScaler = utils.clipValue(\n      sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}