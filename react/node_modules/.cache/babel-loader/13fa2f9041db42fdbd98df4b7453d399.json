{"ast":null,"code":"class AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor(context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle, this._outCircle;\n    this._testingGUI = false;\n  }\n\n  update(newWidth) {\n    // all values are based off of the screen's width\n    if (newWidth && newWidth > 0) {\n      this._width = newWidth;\n      this._height = Math.floor(this._width * (925 / 1200)) * .97;\n      self._middleX = self._width / 2;\n      self._middleY = self._height / 2;\n      self._scaler = Math.min(self._width, self._height * 1.2) * .9;\n    }\n  }\n\n  sendRoute(receiverID, senderID, inPortIndex, outPortIndex) {\n    if (outPortIndex == this.deleteType) {// delete it\n    } else {// create the wireless connection\n      }\n  } // GETTERS\n\n\n  get testingGUI() {\n    return this._testingGUI;\n  }\n\n  get inCircle() {\n    return this._inCircle;\n  }\n\n  get outCircle() {\n    return this._outCircle;\n  }\n\n  get connections() {\n    return this._connections;\n  }\n\n  get inType() {\n    return this._inType;\n  }\n\n  get outType() {\n    return this._outType;\n  }\n\n  get deleteType() {\n    return this._deleteType;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get middleX() {\n    return this._middleX;\n  }\n\n  get middleY() {\n    return this._middleY;\n  }\n\n  get middleY() {\n    return this._middleY;\n  }\n\n  get scaler() {\n    return this._scaler;\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  } // SETTERS\n\n\n  set touchedPort(newPort) {\n    return this._touchedPort = newPort;\n  }\n\n  set hoveredPort(newPort) {\n    return this._hoveredPort = newPort;\n  }\n\n}\n\nexport { AppParams };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/AppParams.js"],"names":["AppParams","constructor","context","_context","_width","_height","_middleX","_middleY","_scaler","_touchedPort","undefined","_hoveredPort","_inType","_outType","_deleteType","_connections","_inCircle","_outCircle","_testingGUI","update","newWidth","Math","floor","self","min","sendRoute","receiverID","senderID","inPortIndex","outPortIndex","deleteType","testingGUI","inCircle","outCircle","connections","inType","outType","width","height","middleX","middleY","scaler","touchedPort","hoveredPort","newPort"],"mappings":"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","sourcesContent":["class AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor (context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle, this._outCircle;\n    this._testingGUI = false;\n  }\n\n  update (newWidth) {\n    // all values are based off of the screen's width\n    if (newWidth && newWidth > 0) {\n      this._width = newWidth;\n      this._height = Math.floor(this._width * (925 / 1200)) * .97;\n      self._middleX = self._width / 2;\n      self._middleY = self._height / 2;\n      self._scaler = Math.min(self._width, self._height * 1.2) * .9;\n    }\n  }\n\n  sendRoute (receiverID, senderID, inPortIndex, outPortIndex) {\n    if (outPortIndex == this.deleteType) {\n      // delete it\n    }\n    else {\n      // create the wireless connection\n    }\n  }\n\n  // GETTERS\n\n  get testingGUI () { return this._testingGUI; }\n\n  get inCircle () { return this._inCircle; }\n\n  get outCircle () { return this._outCircle; }\n\n  get connections () { return this._connections; }\n\n  get inType () { return this._inType; }\n\n  get outType () { return this._outType; }\n\n  get deleteType () { return this._deleteType; }\n\n  get context () { return this._context; }\n\n  get width () { return this._width; }\n\n  get height () { return this._height; }\n\n  get middleX () { return this._middleX; }\n\n  get middleY () { return this._middleY; }\n\n  get middleY () { return this._middleY; }\n\n  get scaler () { return this._scaler; }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  // SETTERS\n\n  set touchedPort (newPort) { return this._touchedPort = newPort; }\n\n  set hoveredPort (newPort) { return this._hoveredPort = newPort; }\n}\n\nexport { AppParams }\n"]},"metadata":{},"sourceType":"module"}