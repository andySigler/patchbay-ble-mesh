{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.erase();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  erase() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      ;\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in self.params.connections) {\n      const conn = self.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        self.params.deleteConnection(n);\n      }\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","patchbayDefaults","tempThickness","screenPercentage","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","erase","requestAnimationFrame","setSize","width","height","fillStyle","colors","grey","fillRect","createConnection","outputID","inputID","inputIndex","outputIndex","tempName","generateName","connections","outPort","getPort","inPort","newConnection","addConnection","exists","eraseNodeFromConnections","id","n","self","conn","parent","deleteConnection"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EAAE,GADQ;AAEvBC,EAAAA,gBAAgB,EAAE;AAFK,CAAzB;;AAKA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,SAAKC,MAAL,GAAc,IAAIV,SAAJ,CAAcS,OAAd,CAAd;AACA,SAAKC,MAAL,CAAYC,QAAZ,GAAuB,IAAIR,MAAJ,CACrB,KAAKO,MAAL,CAAYE,MADS,EAErBR,gBAAgB,CAACE,gBAFI,EAGrBF,gBAAgB,CAACC,aAHI,CAAvB;AAKA,SAAKK,MAAL,CAAYG,SAAZ,GAAwB,IAAIV,MAAJ,CACtB,KAAKO,MAAL,CAAYI,OADU,EAEtBV,gBAAgB,CAACE,gBAFK,EAGtBF,gBAAgB,CAACC,aAHK,CAAxB;AAKA,SAAKU,MAAL,GAAc,IAAIb,MAAJ,CAAW,KAAKQ,MAAhB,CAAd;AACA,SAAKM,YAAL,GAAoBC,SAApB;AACD;;AAEDC,EAAAA,QAAQ,GAAI;AACV,QAAI,KAAKF,YAAT,EAAuB;AACrBG,MAAAA,oBAAoB,CAAC,KAAKH,YAAN,CAApB;AACA,WAAKA,YAAL,GAAoBC,SAApB;AACD;;AACD,SAAKG,KAAL;AACA,SAAKJ,YAAL,GAAoBK,qBAAqB,CAAC,MAAM,KAAKH,QAAZ,CAAzC;AACD;;AAEDI,EAAAA,OAAO,CAAEC,KAAF,EAASC,MAAT,EAAiB;AACtB,SAAKd,MAAL,CAAYa,KAAZ,GAAoBA,KAApB;AACA,SAAKb,MAAL,CAAYc,MAAZ,GAAqBA,MAArB;AACD;;AAEDJ,EAAAA,KAAK,GAAG;AACN,SAAKV,MAAL,CAAYD,OAAZ,CAAoBgB,SAApB,GAAgC1B,KAAK,CAAC2B,MAAN,CAAaC,IAAb,EAAhC;AACA,SAAKjB,MAAL,CAAYD,OAAZ,CAAoBmB,QAApB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAKlB,MAAL,CAAYa,KAA/C,EAAsD,KAAKb,MAAL,CAAYc,MAAlE;AACD;;AAEDK,EAAAA,gBAAgB,CAAEC,QAAF,EAAYC,OAAZ,EAAqBC,UAArB,EAAiCC,WAAjC,EAA8C;AAC5D,UAAMC,QAAQ,GAAGjC,UAAU,CAACkC,YAAX,CACfL,QADe,EACLG,WADK,EACQF,OADR,EACiBC,UADjB,CAAjB;;AAEA,QAAI,CAAC,KAAKtB,MAAL,CAAY0B,WAAZ,CAAwBF,QAAxB,CAAL,EAAwC;AACtC,UAAIG,OAAO,GAAG,KAAK3B,MAAL,CAAY4B,OAAZ,CAAoBR,QAApB,EAA8BG,WAA9B,EAA2C,KAAKvB,MAAL,CAAYI,OAAvD,CAAd;AACA,UAAIyB,MAAM,GAAG,KAAK7B,MAAL,CAAY4B,OAAZ,CAAoBP,OAApB,EAA6BC,UAA7B,EAAyC,KAAKtB,MAAL,CAAYE,MAArD,CAAb;AAA0E;;AAC1E,UAAIyB,OAAO,IAAIE,MAAf,EAAuB;AACrB,cAAMC,aAAa,GAAG,IAAIvC,UAAJ,CAAe,KAAKS,MAApB,EAA4B2B,OAA5B,EAAqCE,MAArC,EAA6CL,QAA7C,CAAtB;AACA,aAAKxB,MAAL,CAAY+B,aAAZ,CAA0BP,QAA1B,EAAoCM,aAApC;AACD;AACF,KAPD,MAQK;AACH;AACA,WAAK9B,MAAL,CAAY0B,WAAZ,CAAwBF,QAAxB,EAAkCQ,MAAlC,GAA2C,IAA3C;AACD;;AACD,WAAOR,QAAP;AACD;;AAEDS,EAAAA,wBAAwB,CAAEC,EAAF,EAAM;AAC5B,SAAK,IAAIC,CAAT,IAAcC,IAAI,CAACpC,MAAL,CAAY0B,WAA1B,EAAuC;AACrC,YAAMW,IAAI,GAAGD,IAAI,CAACpC,MAAL,CAAY0B,WAAZ,CAAwBS,CAAxB,CAAb;;AACA,UAAIE,IAAI,CAACV,OAAL,CAAaW,MAAb,CAAoBJ,EAApB,KAA2BA,EAA3B,IAAiCG,IAAI,CAACR,MAAL,CAAYS,MAAZ,CAAmBJ,EAAnB,KAA0BA,EAA/D,EAAmE;AACjEE,QAAAA,IAAI,CAACpC,MAAL,CAAYuC,gBAAZ,CAA6BJ,CAA7B;AACD;AACF;AACF;;AA7DY;;AAgEf,SAAStC,QAAT","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.erase();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  erase() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(\n      outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);;\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in self.params.connections) {\n      const conn = self.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        self.params.deleteConnection(n);\n      }\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}