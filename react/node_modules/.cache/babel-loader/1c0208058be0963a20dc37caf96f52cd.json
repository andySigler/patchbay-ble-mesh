{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params, (inPort, outPort) => this.createConnection(inPort, outPort), conn => this.deleteConnection(conn));\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].onScreenUpdate(this.params.screenSize);\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.params.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection(connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Circle","Connection","Finger","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","inPort","outPort","createConnection","conn","deleteConnection","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","update","i","connections","onScreenUpdate","screenSize","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","touchedPort","drawArc","x","y","PI2","colors","white","touchedLineWidth","Math","sin","wobbleCounter","drawLine","green","hoveredPort","setSize","width","height","fillStyle","background","fillRect","connection","saveConnection","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(\n      this.params,\n      (inPort, outPort) => this.createConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn)\n    );\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].onScreenUpdate(this.params.screenSize);\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection (connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}