{"ast":null,"code":"const inType = 'in';\nconst outType = 'out';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst PI = Math.PI;\nconst PI2 = Math.PI * 2;\n\nconst clipValue = (value, min = -Infinity, max = Infinity) => {\n  return Math.min(Math.max(value, min), max);\n};\n\nconst colors = {\n  black: (opacity = 1.0) => \"rgba(0, 0, 0, \".concat(clipValue(opacity, 0, 1), \")\"),\n  white: (opacity = 1.0) => \"rgba(255, 255, 255, \".concat(clipValue(opacity, 0, 1), \")\"),\n  delete: (opacity = 1.0) => \"rgba(226, 39, 39, \".concat(clipValue(opacity, 0, 1), \")\"),\n  highlight: (opacity = 1.0) => \"rgba(100, 255, 100, \".concat(clipValue(opacity, 0, 1), \")\"),\n  background: (opacity = 1.0) => \"rgba(79, 79, 79, \".concat(clipValue(opacity, 0, 1), \")\"),\n  // grey\n  palette: [(opacity = 1.0) => \"rgba(176, 79, 79, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(176, 79, 176, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(43, 211, 252, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(176, 176, 79, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(252, 120, 43, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(176, 176, 176, \".concat(clipValue(opacity, 0, 1), \")\"), (opacity = 1.0) => \"rgba(30, 147, 175, \".concat(clipValue(opacity, 0, 1), \")\")]\n};\n\nconst font = (size = 0) => {\n  return \"\".concat(Math.floor(size), \"px Helvetica\");\n};\n\nconst drawLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  context.beginPath();\n  continueLine(context, x1, y1, x2, y2, width, stroke);\n};\n\nconst continueLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  if (width) {\n    context.lineWidth = width;\n  }\n\n  if (stroke) {\n    context.strokeStyle = stroke;\n  }\n\n  context.moveTo(x1, y1);\n  context.lineTo(x2, y2);\n\n  if (stroke) {\n    context.stroke();\n  }\n};\n\nconst drawCircle = (context, x, y, radius, width, stroke = undefined, fill = undefined) => {\n  drawArc(context, x, y, radius, 0, PI2, width, stroke, fill);\n};\n\nconst drawArc = (context, x, y, radius, start, end, width, stroke = undefined, fill = undefined) => {\n  context.beginPath();\n  if (stroke) context.strokeStyle = stroke;\n  if (fill) context.fillStyle = fill;\n  context.lineWidth = width;\n  context.arc(x, y, radius, start, end, false);\n  if (stroke) context.stroke();\n  if (fill) context.fill();\n};\n\nconst getDistance = (x1, y1, x2, y2) => {\n  var xDiff = x1 - x2;\n  var yDiff = y1 - y2;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n};\n\nconst fakeContext = {\n  restore: () => {},\n  translate: () => {},\n  rotate: () => {},\n  beginPath: () => {},\n  closePath: () => {},\n  moveTo: () => {},\n  lineTo: () => {},\n  arc: () => {},\n  fillRect: () => {},\n  fillText: () => {},\n  save: () => {},\n  fill: () => {},\n  stroke: () => {}\n};\nconst testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const inCircle = patchbay.inCircle;\n  const outCircle = patchbay.outCircle;\n\n  for (let i = 0; i < testingNodes.length; i++) {\n    const node = testingNodes[i];\n    const color = colors.palette[i % colors.palette.length];\n    const nodeID = \"testNode\".concat(i);\n    const inArc = inCircle.createArc(node.name, color, nodeID);\n    const outArc = outCircle.createArc(node.name, color, nodeID);\n    inCircle.addArc(inArc);\n    outCircle.addArc(outArc);\n\n    for (let o = 0; o < node.outputs.length; o++) {\n      outArc.addPort(outArc.createPort(o, node.outputs[o]));\n    }\n\n    for (let o = 0; o < node.inputs.length; o++) {\n      inArc.addPort(inArc.createPort(o, node.inputs[o]));\n    }\n  } // create some random connections between all the ports\n\n\n  for (let inArc of inCircle.arcs) {\n    if (inArc.ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArcIndex = Math.floor(Math.random() * outCircle.arcs.length);\n        const outArc = outCircle.arcs[outArcIndex];\n\n        if (outArc.ports.length > 0) {\n          const inPortIndex = Math.floor(Math.random() * inArc.ports.length);\n          const outPortIndex = Math.floor(Math.random() * outArc.ports.length);\n          patchbay.createAndSaveConnection(inArc.ports[inPortIndex], outArc.ports[outPortIndex]);\n        }\n      }\n    }\n  }\n}\n\nexport { inType, outType, userEventTypes, PI, PI2, clipValue, colors, font, drawLine, continueLine, drawCircle, drawArc, getDistance, fakeContext, makeTestingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/PatchbayUtils.js"],"names":["inType","outType","userEventTypes","touch","move","release","PI","Math","PI2","clipValue","value","min","Infinity","max","colors","black","opacity","white","delete","highlight","background","palette","font","size","floor","drawLine","context","x1","y1","x2","y2","width","stroke","undefined","beginPath","continueLine","lineWidth","strokeStyle","moveTo","lineTo","drawCircle","x","y","radius","fill","drawArc","start","end","fillStyle","arc","getDistance","xDiff","yDiff","sqrt","fakeContext","restore","translate","rotate","closePath","fillRect","fillText","save","testingNodes","makeTestingNodes","patchbay","inCircle","outCircle","i","length","node","color","nodeID","inArc","createArc","name","outArc","addArc","o","outputs","addPort","createPort","inputs","arcs","ports","d","outArcIndex","random","inPortIndex","outPortIndex","createAndSaveConnection"],"mappings":"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","sourcesContent":["const inType = 'in';\nconst outType = 'out';\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\nconst PI = Math.PI;\nconst PI2 = Math.PI * 2;\n\nconst clipValue = (value, min = -Infinity, max = Infinity) => {\n  return Math.min(Math.max(value, min), max);\n}\n\nconst colors = {\n  black: (opacity = 1.0) => `rgba(0, 0, 0, ${clipValue(opacity, 0, 1)})`,\n  white: (opacity = 1.0) => `rgba(255, 255, 255, ${clipValue(opacity, 0, 1)})`,\n  delete: (opacity = 1.0) => `rgba(226, 39, 39, ${clipValue(opacity, 0, 1)})`,\n  highlight: (opacity = 1.0) => `rgba(100, 255, 100, ${clipValue(opacity, 0, 1)})`,\n  background: (opacity = 1.0) => `rgba(79, 79, 79, ${clipValue(opacity, 0, 1)})`, // grey\n  palette: [\n    (opacity = 1.0) => `rgba(176, 79, 79, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(176, 79, 176, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(43, 211, 252, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(176, 176, 79, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(252, 120, 43, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(176, 176, 176, ${clipValue(opacity, 0, 1)})`,\n    (opacity = 1.0) => `rgba(30, 147, 175, ${clipValue(opacity, 0, 1)})`\n  ]\n}\n\nconst font = (size = 0) => {\n  return `${Math.floor(size)}px Helvetica`;\n}\n\nconst drawLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  context.beginPath();\n  continueLine(context, x1, y1, x2, y2, width, stroke);\n}\n\nconst continueLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  if (width) {\n    context.lineWidth = width;\n  }\n  if (stroke) {\n    context.strokeStyle = stroke;\n  }\n  context.moveTo(x1, y1);\n  context.lineTo(x2, y2);\n  if (stroke) {\n    context.stroke();\n  }\n}\n\nconst drawCircle = (context, x, y, radius, width, stroke = undefined, fill = undefined) => {\n  drawArc(context, x, y, radius, 0, PI2, width, stroke, fill);\n}\n\nconst drawArc = (context, x, y, radius, start, end, width, stroke = undefined, fill = undefined) => {\n  context.beginPath();\n  if (stroke) context.strokeStyle = stroke;\n  if (fill) context.fillStyle = fill;\n  context.lineWidth = width;\n  context.arc(x, y, radius, start, end, false);\n  if (stroke) context.stroke();\n  if (fill) context.fill();\n}\n\nconst getDistance = (x1, y1, x2, y2) => {\n  var xDiff = x1 - x2;\n  var yDiff = y1 - y2;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n\nconst fakeContext = {\n  restore: () => {},\n  translate: () => {},\n  rotate: () => {},\n  beginPath: () => {},\n  closePath: () => {},\n  moveTo: () => {},\n  lineTo: () => {},\n  arc: () => {},\n  fillRect: () => {},\n  fillText: () => {},\n  save: () => {},\n  fill: () => {},\n  stroke: () => {}\n};\n\nconst testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const inCircle = patchbay.inCircle;\n  const outCircle = patchbay.outCircle;\n  for (let i = 0; i < testingNodes.length; i++) {\n    const node = testingNodes[i];\n    const color = colors.palette[i % colors.palette.length];\n    const nodeID = `testNode${i}`;\n    const inArc = inCircle.createArc(node.name, color, nodeID);\n    const outArc = outCircle.createArc(node.name, color, nodeID);\n    inCircle.addArc(inArc);\n    outCircle.addArc(outArc);\n    for (let o = 0; o < node.outputs.length; o++) {\n      outArc.addPort(outArc.createPort(o, node.outputs[o]));\n    }\n    for (let o = 0; o < node.inputs.length; o++) {\n      inArc.addPort(inArc.createPort(o, node.inputs[o]));\n    }\n  }\n  // create some random connections between all the ports\n  for (let inArc of inCircle.arcs) {\n    if(inArc.ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArcIndex = Math.floor(Math.random() * outCircle.arcs.length);\n        const outArc = outCircle.arcs[outArcIndex];\n        if(outArc.ports.length > 0) {\n          const inPortIndex = Math.floor(Math.random() * inArc.ports.length);\n          const outPortIndex = Math.floor(Math.random() * outArc.ports.length);\n          patchbay.createAndSaveConnection(\n            inArc.ports[inPortIndex], outArc.ports[outPortIndex]);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  inType,\n  outType,\n  userEventTypes,\n  PI,\n  PI2,\n  clipValue,\n  colors,\n  font,\n  drawLine,\n  continueLine,\n  drawCircle,\n  drawArc,\n  getDistance,\n  fakeContext,\n  makeTestingNodes\n}\n"]},"metadata":{},"sourceType":"module"}