{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(canvas) {\n    this.params = new AppParams(canvas.getContext('2d'));\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params, this.createConnection, this.deleteConnection);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, outputIndex, inputID, inputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  deleteConnection(outputID, outputIndex, inputID, inputIndex) {\n    const name = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","Patchbay","constructor","canvas","params","getContext","inCircle","inType","outCircle","outType","finger","createConnection","deleteConnection","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","update","i","connections","context","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","touchedPort","touchCircleThickness","size","touchedLineWidth","Math","sin","wobbleCounter","touchedLineTipCircleScaler","scaler","min","max","circleRadius","drawArc","x","y","PI2","colors","white","drawLine","green","hoveredPort","hoveredCircleWidth","setSize","width","height","fillStyle","background","fillRect","outputID","outputIndex","inputID","inputIndex","tempName","generateName","outPort","getPort","inPort","newConnection","addConnection","exists","name","eraseNodeFromConnections","id","n","conn","parent","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (canvas) {\n    this.params = new AppParams(canvas.getContext('2d'));\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(\n      this.params, this.createConnection, this.deleteConnection\n    );\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, outputIndex, inputID, inputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  deleteConnection (outputID, outputIndex, inputID, inputIndex) {\n    const name = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}