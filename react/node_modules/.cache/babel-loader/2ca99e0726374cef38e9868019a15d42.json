{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeScaler: 0.53,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.2,\n  minCircleSize: 1,\n  minStrokeWidth: 4,\n  fillTextFontSizeScaler: 0.2,\n  radOffsetScaler: 0.05,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor(params, parent, type, index) {\n    this.params = params;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this._touched = false;\n    this._hovered = false;\n    this.sizeScaler = 0;\n    this.circleRad = undefined;\n    this._size = undefined;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n    this.circleSize = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = undefined;\n    this.fillStyle = undefined;\n    this.shouldDraw = false;\n    this.radOffset = undefined; // the visible flag is used by Cords to determine if they should be shown\n\n    this._visible = false;\n  } // GETTERS\n\n\n  get visible() {\n    return this._visible;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get hovered() {\n    return this._hovered;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get size() {\n    return this._size;\n  } // SETTERS\n\n\n  set touched(state) {\n    this._touched = state;\n  }\n\n  set hovered(state) {\n    this._hovered = state;\n  }\n\n  set name(name) {\n    this._name = name;\n  }\n\n  update(rad, size, radLocation, isVisible) {\n    this.circleRad = rad;\n    this._size = size;\n    this._visible = isVisible;\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n    this._x = this.circleRad * Math.cos(radLocation) + this._parent.parent.centerX;\n    this._y = this.circleRad * Math.sin(radLocation) + this._parent.parent.centerY;\n  }\n\n  updateDrawSettings(sizeScaler) {\n    this.sizeScaler = sizeScaler;\n    const tempSize = this._size * this.sizeScaler * portDefaults.circleSizeScaler;\n    this.shouldDraw = false;\n\n    if (tempSize > portDefaults.circleSizeDrawThresh) {\n      this.shouldDraw = true; // the size of the Port's circle\n\n      this.circleSize = Number(tempSize);\n\n      if (this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n        this.circleSize += Math.sin(this.wobbleCounter) * this.wobbleAmount;\n      }\n\n      this.circleSize = Math.max(this.circleSize, portDefaults.minCircleSize); // colors\n\n      this.strokeStyle = undefined;\n\n      if (tempSize > portDefaults.minStrokeWidth) {\n        this.strokeStyle = utils.colors.background();\n      }\n\n      this.fillStyle = this._parent.color();\n      this.lineWidth = Math.floor(tempSize * portDefaults.lineWidthScaler);\n    } // settings for drawing the name\n\n\n    this.radOffset = this._parent.radius - this.params.screenSize * portDefaults.radOffsetScaler;\n    this.fontSize = Math.floor(this.sizeScaler * this._size * portDefaults.fontSizeScaler);\n  }\n\n  draw(sizeScaler) {\n    // TODO: updating drawing setting should me moved to the update function\n    this.updateDrawSettings(sizeScaler);\n\n    if (this.shouldDraw) {\n      this.params.context.save();\n      utils.drawArc(this.params.context, 0, this.circleRad, this.circleSize, 0, utils.PI2, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.params.context.restore();\n    }\n  }\n\n  drawName() {\n    this.params.context.save();\n    this.params.context.translate(this.radOffset, 0);\n\n    if (this._x < this._parent.parent.centerX) {\n      this.params.context.textAlign = 'left';\n      this.params.context.rotate(Math.PI);\n    } else {\n      this.params.context.textAlign = 'right';\n    }\n\n    this.params.context.font = this.fontSize + 'px Helvetica';\n\n    if (this._touched || this._hovered) {\n      this.params.context.fillStyle = utils.colors.white();\n    } else {\n      this.params.context.fillStyle = this._parent.color();\n    }\n\n    this.params.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.params.context.restore();\n  }\n\n  isTouching(x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    const thresh = this._size * this.sizeScaler * portDefaults.touchingScaler;\n\n    if (dist < thresh) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleAmount","circleSizeScaler","circleSizeDrawThresh","lineWidthScaler","minCircleSize","minStrokeWidth","fillTextFontSizeScaler","radOffsetScaler","fontSizeScaler","Port","constructor","params","parent","type","index","_parent","_type","_index","_name","connections","_x","_y","_touched","_hovered","sizeScaler","circleRad","undefined","_size","wobbleCounter","Math","random","PI2","circleSize","lineWidth","strokeStyle","fillStyle","shouldDraw","radOffset","_visible","visible","x","y","touched","hovered","name","size","state","update","rad","radLocation","isVisible","cos","centerX","sin","centerY","updateDrawSettings","tempSize","Number","touchedPort","max","colors","background","color","floor","radius","screenSize","fontSize","draw","context","save","drawArc","restore","drawName","translate","textAlign","rotate","PI","font","white","fillText","isTouching","dist","getDistance","thresh","touchingScaler"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeScaler: 0.53,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.2,\n  minCircleSize: 1,\n  minStrokeWidth: 4,\n  fillTextFontSizeScaler: 0.2,\n  radOffsetScaler: 0.05,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor (params, parent, type, index) {\n    this.params = params;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n\n    this._touched = false;\n    this._hovered = false;\n\n    this.sizeScaler = 0;\n    this.circleRad = undefined;\n    this._size = undefined;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n\n    this.circleSize = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = undefined;\n    this.fillStyle = undefined;\n    this.shouldDraw = false;\n\n    this.radOffset = undefined;\n\n    // the visible flag is used by Cords to determine if they should be shown\n    this._visible = false;\n  }\n\n  // GETTERS\n\n  get visible () { return this._visible }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get touched () { return this._touched; }\n\n  get hovered () { return this._hovered; }\n\n  get name () { return this._name; }\n\n  get index () { return this._index; }\n\n  get type () { return this._type; }\n\n  get parent () { return this._parent; }\n\n  get size () { return this._size; }\n\n  // SETTERS\n\n  set touched (state) { this._touched = state; }\n\n  set hovered (state) { this._hovered = state; }\n\n  set name (name) { this._name = name; }\n\n  update (rad, size, radLocation, isVisible) {\n    this.circleRad = rad;\n    this._size = size;\n\n    this._visible = isVisible;\n\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n\n    this._x = this.circleRad * Math.cos(radLocation) + this._parent.parent.centerX;\n    this._y = this.circleRad * Math.sin(radLocation) + this._parent.parent.centerY;\n  }\n\n  updateDrawSettings (sizeScaler) {\n    this.sizeScaler = sizeScaler;\n    const tempSize = this._size * this.sizeScaler * portDefaults.circleSizeScaler;\n    this.shouldDraw = false;\n    if(tempSize > portDefaults.circleSizeDrawThresh){\n      this.shouldDraw = true;\n      // the size of the Port's circle\n      this.circleSize = Number(tempSize);\n      if(this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n        this.circleSize += (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n      }\n      this.circleSize = Math.max(this.circleSize, portDefaults.minCircleSize);\n\n      // colors\n      this.strokeStyle = undefined;\n      if(tempSize > portDefaults.minStrokeWidth) {\n        this.strokeStyle = utils.colors.background();\n      }\n      this.fillStyle = this._parent.color();\n      this.lineWidth = Math.floor(tempSize * portDefaults.lineWidthScaler);\n    }\n\n    // settings for drawing the name\n    this.radOffset = this._parent.radius - (this.params.screenSize * portDefaults.radOffsetScaler);\n    this.fontSize = Math.floor(this.sizeScaler * this._size * portDefaults.fontSizeScaler);\n  }\n\n  draw (sizeScaler) {\n    // TODO: updating drawing setting should me moved to the update function\n    this.updateDrawSettings(sizeScaler);\n    if(this.shouldDraw){\n      this.params.context.save();\n      utils.drawArc(\n        this.params.context,\n        0, this.circleRad,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, this.strokeStyle, this.fillStyle\n      )\n      this.params.context.restore();\n    }\n  }\n\n  drawName () {\n    this.params.context.save();\n    this.params.context.translate(this.radOffset, 0);\n\n    if(this._x < this._parent.parent.centerX){\n      this.params.context.textAlign = 'left';\n      this.params.context.rotate(Math.PI);\n    }\n    else{\n      this.params.context.textAlign = 'right';\n    }\n    this.params.context.font = this.fontSize + 'px Helvetica';\n    if(this._touched || this._hovered) {\n      this.params.context.fillStyle = utils.colors.white();\n    }\n    else {\n      this.params.context.fillStyle = this._parent.color();\n    }\n\n    this.params.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.params.context.restore();\n  }\n\n  isTouching (x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    const thresh = this._size * this.sizeScaler * portDefaults.touchingScaler;\n    if (dist < thresh) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}