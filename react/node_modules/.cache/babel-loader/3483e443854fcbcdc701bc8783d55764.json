{"ast":null,"code":"import * as utils from './PatchbayUtils';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst patchbayDefaults = {\n  screenPercentage: 0.25,\n  arcThicknessPercentage: 0.08,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.context = context;\n    this.connections = {};\n    this.inCircle = this.createCircle(utils.inType);\n    this.outCircle = this.createCircle(utils.outType);\n    this.finger = this.createFinger();\n    this.width = undefined;\n    this.height = undefined;\n    this.screenSize = undefined;\n    this.reqAnimFrame = undefined;\n  }\n\n  createFinger() {\n    return new Finger(this.context, this.inCircle, this.outCircle, this.connections, (inPort, outPort) => this.createAndSaveConnection(inPort, outPort), conn => this.deleteConnection(conn));\n  }\n\n  createCircle(type) {\n    return new Circle(this.context, type, patchbayDefaults.screenPercentage, patchbayDefaults.arcThicknessPercentage, () => this.finger.touchedPort, () => this.finger.hoveredPort);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize() {\n    this.finger.adjustToScreenSize(this.screenSize);\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n\n    for (let i in this.connections) {\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables() {\n    this.screenSize = Math.min(this.width, this.height);\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = this.width / 2 - xOffset;\n    this.outCircle.x = this.width / 2 + xOffset;\n    this.inCircle.y = this.height / 2 - yOffset;\n    this.outCircle.y = this.height / 2 + yOffset;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      this.cancelDrawLoop();\n    }\n\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n\n    for (let i in this.connections) {\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n\n    for (let i in this.connections) {\n      this.connections[i].draw();\n    }\n\n    this.finger.draw();\n    this.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  cancelDrawLoop() {\n    cancelAnimationFrame(this.reqAnimFrame);\n    this.reqAnimFrame = undefined;\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection(inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection(connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection(conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName(name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === utils.userEventTypes.touch) {\n      this.finger.touchEvent(x, y);\n    } else if (type === utils.userEventTypes.move) {\n      this.finger.moveEvent(x, y);\n    } else if (type === utils.userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/github/patchbay-ble-mesh/react/src/modules/Patchbay.js"],"names":["utils","Circle","Connection","Finger","patchbayDefaults","screenPercentage","arcThicknessPercentage","circleCenterXOffsetScaler","circleCenterYOffsetScaler","Patchbay","constructor","context","connections","inCircle","createCircle","inType","outCircle","outType","finger","createFinger","width","undefined","height","screenSize","reqAnimFrame","inPort","outPort","createAndSaveConnection","conn","deleteConnection","type","touchedPort","hoveredPort","setSize","updateScreenVariables","adjustChildrenToScreenSize","adjustToScreenSize","i","Math","min","xOffset","yOffset","x","y","drawLoop","cancelDrawLoop","update","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","restore","requestAnimationFrame","cancelAnimationFrame","fillStyle","colors","background","fillRect","saveConnection","createConnection","connection","name","deleteConnectionByName","handleUserEvent","userEventTypes","touch","touchEvent","move","moveEvent","release","releaseEvent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,gBAAgB,EAAE,IADK;AAEvBC,EAAAA,sBAAsB,EAAE,IAFD;AAGvBC,EAAAA,yBAAyB,EAAE,GAHJ;AAIvBC,EAAAA,yBAAyB,EAAE;AAJJ,CAAzB;;AAOA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,SAAKA,OAAL,GAAeA,OAAf;AAEA,SAAKC,WAAL,GAAmB,EAAnB;AAEA,SAAKC,QAAL,GAAgB,KAAKC,YAAL,CAAkBd,KAAK,CAACe,MAAxB,CAAhB;AACA,SAAKC,SAAL,GAAiB,KAAKF,YAAL,CAAkBd,KAAK,CAACiB,OAAxB,CAAjB;AACA,SAAKC,MAAL,GAAc,KAAKC,YAAL,EAAd;AAEA,SAAKC,KAAL,GAAaC,SAAb;AACA,SAAKC,MAAL,GAAcD,SAAd;AACA,SAAKE,UAAL,GAAkBF,SAAlB;AAEA,SAAKG,YAAL,GAAoBH,SAApB;AACD;;AAEDF,EAAAA,YAAY,GAAI;AACd,WAAO,IAAIhB,MAAJ,CACL,KAAKQ,OADA,EAEL,KAAKE,QAFA,EAGL,KAAKG,SAHA,EAIL,KAAKJ,WAJA,EAKL,CAACa,MAAD,EAASC,OAAT,KAAqB,KAAKC,uBAAL,CAA6BF,MAA7B,EAAqCC,OAArC,CALhB,EAMJE,IAAD,IAAU,KAAKC,gBAAL,CAAsBD,IAAtB,CANL,CAAP;AAQD;;AAEDd,EAAAA,YAAY,CAAEgB,IAAF,EAAQ;AAClB,WAAO,IAAI7B,MAAJ,CACL,KAAKU,OADA,EAELmB,IAFK,EAGL1B,gBAAgB,CAACC,gBAHZ,EAILD,gBAAgB,CAACE,sBAJZ,EAKL,MAAM,KAAKY,MAAL,CAAYa,WALb,EAML,MAAM,KAAKb,MAAL,CAAYc,WANb,CAAP;AAQD;;AAEDC,EAAAA,OAAO,CAAEb,KAAF,EAASE,MAAT,EAAiB;AACtB,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKY,qBAAL;AACA,SAAKC,0BAAL;AACD;;AAEDA,EAAAA,0BAA0B,GAAI;AAC5B,SAAKjB,MAAL,CAAYkB,kBAAZ,CAA+B,KAAKb,UAApC;AACA,SAAKV,QAAL,CAAcuB,kBAAd,CAAiC,KAAKb,UAAtC;AACA,SAAKP,SAAL,CAAeoB,kBAAf,CAAkC,KAAKb,UAAvC;;AACA,SAAI,IAAIc,CAAR,IAAa,KAAKzB,WAAlB,EAA8B;AAC5B,WAAKA,WAAL,CAAiByB,CAAjB,EAAoBD,kBAApB,CAAuC,KAAKb,UAA5C;AACD;AACF;;AAEDW,EAAAA,qBAAqB,GAAI;AACvB,SAAKX,UAAL,GAAkBe,IAAI,CAACC,GAAL,CAAS,KAAKnB,KAAd,EAAqB,KAAKE,MAA1B,CAAlB;AACA,UAAMkB,OAAO,GAAG,KAAKpB,KAAL,GAAahB,gBAAgB,CAACG,yBAA9C;AACA,UAAMkC,OAAO,GAAG,KAAKnB,MAAL,GAAclB,gBAAgB,CAACI,yBAA/C;AACA,SAAKK,QAAL,CAAc6B,CAAd,GAAmB,KAAKtB,KAAL,GAAa,CAAd,GAAmBoB,OAArC;AACA,SAAKxB,SAAL,CAAe0B,CAAf,GAAoB,KAAKtB,KAAL,GAAa,CAAd,GAAmBoB,OAAtC;AACA,SAAK3B,QAAL,CAAc8B,CAAd,GAAmB,KAAKrB,MAAL,GAAc,CAAf,GAAoBmB,OAAtC;AACA,SAAKzB,SAAL,CAAe2B,CAAf,GAAoB,KAAKrB,MAAL,GAAc,CAAf,GAAoBmB,OAAvC;AACD;;AAEDG,EAAAA,QAAQ,GAAI;AACV,QAAI,KAAKpB,YAAT,EAAuB;AACrB,WAAKqB,cAAL;AACD;;AAED,SAAK3B,MAAL,CAAY4B,MAAZ;AACA,SAAKjC,QAAL,CAAciC,MAAd;AACA,SAAK9B,SAAL,CAAe8B,MAAf;;AACA,SAAI,IAAIT,CAAR,IAAa,KAAKzB,WAAlB,EAA8B;AAC5B,WAAKA,WAAL,CAAiByB,CAAjB,EAAoBS,MAApB;AACD;;AAED,SAAKnC,OAAL,CAAaoC,IAAb;AACA,SAAKC,WAAL;AACA,SAAKnC,QAAL,CAAcoC,QAAd;AACA,SAAKjC,SAAL,CAAeiC,QAAf;AACA,SAAKpC,QAAL,CAAcqC,SAAd;AACA,SAAKlC,SAAL,CAAekC,SAAf;AACA,SAAKrC,QAAL,CAAcsC,SAAd;AACA,SAAKnC,SAAL,CAAemC,SAAf;;AACA,SAAI,IAAId,CAAR,IAAa,KAAKzB,WAAlB,EAA8B;AAC5B,WAAKA,WAAL,CAAiByB,CAAjB,EAAoBe,IAApB;AACD;;AACD,SAAKlC,MAAL,CAAYkC,IAAZ;AACA,SAAKzC,OAAL,CAAa0C,OAAb;AAEA,SAAK7B,YAAL,GAAoB8B,qBAAqB,CAAC,MAAM,KAAKV,QAAL,EAAP,CAAzC;AACD;;AAEDC,EAAAA,cAAc,GAAI;AAChBU,IAAAA,oBAAoB,CAAC,KAAK/B,YAAN,CAApB;AACA,SAAKA,YAAL,GAAoBH,SAApB;AACD;;AAED2B,EAAAA,WAAW,GAAG;AACZ,SAAKrC,OAAL,CAAa6C,SAAb,GAAyBxD,KAAK,CAACyD,MAAN,CAAaC,UAAb,EAAzB;AACA,SAAK/C,OAAL,CAAagD,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,KAAKvC,KAAjC,EAAwC,KAAKE,MAA7C;AACD;;AAEDK,EAAAA,uBAAuB,CAAEF,MAAF,EAAUC,OAAV,EAAmB;AACxC,SAAKkC,cAAL,CAAoB,KAAKC,gBAAL,CAAsBpC,MAAtB,EAA8BC,OAA9B,CAApB;AACD;;AAEDmC,EAAAA,gBAAgB,CAAEpC,MAAF,EAAUC,OAAV,EAAmB;AACjC,UAAMoC,UAAU,GAAG,IAAI5D,UAAJ,CAAe,KAAKS,OAApB,EAA6Bc,MAA7B,EAAqCC,OAArC,CAAnB;AACAoC,IAAAA,UAAU,CAAC1B,kBAAX,CAA8B,KAAKb,UAAnC;AACA,WAAOuC,UAAP;AACD;;AAEDF,EAAAA,cAAc,CAAEE,UAAF,EAAc;AAC1B,SAAKjC,gBAAL,CAAsBiC,UAAtB;AACA,SAAKlD,WAAL,CAAiBkD,UAAU,CAACC,IAA5B,IAAoCD,UAApC;AACD;;AAEDjC,EAAAA,gBAAgB,CAAED,IAAF,EAAQ;AACtB,SAAKoC,sBAAL,CAA4BpC,IAAI,CAACmC,IAAjC;AACD;;AAEDC,EAAAA,sBAAsB,CAAED,IAAF,EAAQ;AAC5B,QAAI,KAAKnD,WAAL,CAAiBmD,IAAjB,CAAJ,EAA4B;AAC1B,aAAO,KAAKnD,WAAL,CAAiBmD,IAAjB,CAAP;AACD;AACF;;AAEDE,EAAAA,eAAe,CAAEnC,IAAF,EAAQY,CAAR,EAAWC,CAAX,EAAc;AAC3B,QAAIb,IAAI,KAAK9B,KAAK,CAACkE,cAAN,CAAqBC,KAAlC,EAAyC;AACvC,WAAKjD,MAAL,CAAYkD,UAAZ,CAAuB1B,CAAvB,EAA0BC,CAA1B;AACD,KAFD,MAGK,IAAIb,IAAI,KAAK9B,KAAK,CAACkE,cAAN,CAAqBG,IAAlC,EAAwC;AAC3C,WAAKnD,MAAL,CAAYoD,SAAZ,CAAsB5B,CAAtB,EAAyBC,CAAzB;AACD,KAFI,MAGA,IAAIb,IAAI,KAAK9B,KAAK,CAACkE,cAAN,CAAqBK,OAAlC,EAA2C;AAC9C,WAAKrD,MAAL,CAAYsD,YAAZ,CAAyB9B,CAAzB,EAA4BC,CAA5B;AACD;AACF;;AA3IY;;AA8If,SAASlC,QAAT","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst patchbayDefaults = {\n  screenPercentage: 0.25,\n  arcThicknessPercentage: 0.08,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.context = context;\n\n    this.connections = {};\n\n    this.inCircle = this.createCircle(utils.inType);\n    this.outCircle = this.createCircle(utils.outType);\n    this.finger = this.createFinger();\n\n    this.width = undefined;\n    this.height = undefined;\n    this.screenSize = undefined;\n\n    this.reqAnimFrame = undefined;\n  }\n\n  createFinger () {\n    return new Finger(\n      this.context,\n      this.inCircle,\n      this.outCircle,\n      this.connections,\n      (inPort, outPort) => this.createAndSaveConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn)\n    );\n  }\n\n  createCircle (type) {\n    return new Circle(\n      this.context,\n      type,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.arcThicknessPercentage,\n      () => this.finger.touchedPort,\n      () => this.finger.hoveredPort\n    );\n  }\n\n  setSize (width, height) {\n    this.width = width;\n    this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize () {\n    this.finger.adjustToScreenSize(this.screenSize);\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n    for(let i in this.connections){\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables () {\n    this.screenSize = Math.min(this.width, this.height);\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = (this.width / 2) - xOffset;\n    this.outCircle.x = (this.width / 2) + xOffset;\n    this.inCircle.y = (this.height / 2) - yOffset;\n    this.outCircle.y = (this.height / 2) + yOffset;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      this.cancelDrawLoop();\n    }\n\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n    for(let i in this.connections){\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n    for(let i in this.connections){\n      this.connections[i].draw();\n    }\n    this.finger.draw();\n    this.context.restore();\n\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  cancelDrawLoop () {\n    cancelAnimationFrame(this.reqAnimFrame);\n    this.reqAnimFrame = undefined;\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection (inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection (connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection (conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName (name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === utils.userEventTypes.touch) {\n      this.finger.touchEvent(x, y);\n    }\n    else if (type === utils.userEventTypes.move) {\n      this.finger.moveEvent(x, y);\n    }\n    else if (type === utils.userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}