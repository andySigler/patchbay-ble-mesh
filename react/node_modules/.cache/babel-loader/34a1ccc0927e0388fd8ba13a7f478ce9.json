{"ast":null,"code":"var _jsxFileName = \"/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Patchbay } from './modules/Patchbay';\nimport { makeTestingNodes } from './modules/TestParams'; // TODO: get screen values from React-Native methods when on mobile\n\nconst screenTestScaler = 0.8;\nconst canvasWidth = Math.floor(736 * screenTestScaler);\nconst canvasHeight = Math.floor(414 * screenTestScaler);\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Animation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.patchbay = undefined;\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    this.patchbay = new Patchbay(canvas.getContext('2d'));\n    this.patchbay.setSize(canvas.width, canvas.height);\n    makeTestingNodes(this.patchbay);\n    console.log(this.patchbay.params.outCircle.arcs);\n    this.patchbay.drawLoop();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js"],"names":["React","Patchbay","makeTestingNodes","screenTestScaler","canvasWidth","Math","floor","canvasHeight","App","Component","render","Animation","constructor","props","canvasRef","createRef","patchbay","undefined","componentDidMount","canvas","current","width","height","getContext","setSize","console","log","params","outCircle","arcs","drawLoop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,gBAAT,QAAgC,sBAAhC,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,GAAzB;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,MAAMH,gBAAjB,CAApB;AACA,MAAMI,YAAY,GAAGF,IAAI,CAACC,KAAL,CAAW,MAAMH,gBAAjB,CAArB;;AAEA,MAAMK,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAkC;AAChCC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,CAAP;AAGD;;AAL+B;;AAQlC,MAAMC,SAAN,SAAwBX,KAAK,CAACS,SAA9B,CAAwC;AACtCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBd,KAAK,CAACe,SAAN,EAAjB;AACA,SAAKC,QAAL,GAAgBC,SAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAG,KAAKL,SAAL,CAAeM,OAA9B;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAejB,WAAf;AACAe,IAAAA,MAAM,CAACG,MAAP,GAAgBf,YAAhB;AACA,SAAKS,QAAL,GAAgB,IAAIf,QAAJ,CAAakB,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAb,CAAhB;AACA,SAAKP,QAAL,CAAcQ,OAAd,CAAsBL,MAAM,CAACE,KAA7B,EAAoCF,MAAM,CAACG,MAA3C;AACApB,IAAAA,gBAAgB,CAAC,KAAKc,QAAN,CAAhB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,QAAL,CAAcW,MAAd,CAAqBC,SAArB,CAA+BC,IAA3C;AACA,SAAKb,QAAL,CAAcc,QAAd;AACD;;AAEDpB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,GAAG,EAAE,KAAKI,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAxBqC;;AA4BxC,eAAeN,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { Patchbay } from './modules/Patchbay'\nimport { makeTestingNodes} from './modules/TestParams'\n\n// TODO: get screen values from React-Native methods when on mobile\nconst screenTestScaler = 0.8;\nconst canvasWidth = Math.floor(736 * screenTestScaler);\nconst canvasHeight = Math.floor(414 * screenTestScaler);\n\nclass App extends React.Component {\n  render() {\n    return <div>\n      <Animation></Animation>\n    </div>;\n  }\n}\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.patchbay = undefined;\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    this.patchbay = new Patchbay(canvas.getContext('2d'));\n    this.patchbay.setSize(canvas.width, canvas.height);\n    makeTestingNodes(this.patchbay);\n    console.log(this.patchbay.params.outCircle.arcs)\n    this.patchbay.drawLoop();\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas ref={this.canvasRef} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}