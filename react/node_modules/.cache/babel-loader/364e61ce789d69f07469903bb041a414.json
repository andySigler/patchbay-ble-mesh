{"ast":null,"code":"import * as utils from './PatchbayUtils';\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\nclass Finger {\n  constructor(context, inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n    this.context = context;\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this.circleRadius = undefined;\n    this.circleThickness = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.touchX = undefined;\n    this.touchY = undefined;\n    this.isTouchingScreen = false;\n    this.radianNew = {};\n    this.radianNew[utils.inType] = 0;\n    this.radianNew[utils.outType] = 0;\n    this.radianPrev = Object.assign({}, this.radianNew);\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  }\n\n  adjustToScreenSize(screenSize) {\n    this.circleRadius = screenSize * fingerDefaults.touchCircleRadiusScaler;\n    this.circleThickness = screenSize * fingerDefaults.touchCircleThicknessScaler;\n  }\n\n  update() {\n    if (!this._touchedPort) {\n      if (this.inCircle.touched) {\n        this.inCircle.radiansMoved = this.radianNew[utils.inType] - this.radianPrev[utils.inType];\n      } else if (this.outCircle.touched) {\n        this.outCircle.radiansMoved = this.radianNew[utils.outType] - this.radianPrev[utils.outType];\n      }\n    } else if (this.isTouchingScreen) {\n      this.findHover();\n    }\n\n    this.radianPrev = Object.assign({}, this.radianNew);\n  }\n\n  draw() {\n    if (this.touchedPort) {\n      this.drawTouchLine();\n      this.drawTouchedPort();\n\n      if (this.hoveredPort) {\n        this.drawHoveredPort();\n      }\n    }\n  }\n\n  drawTouchedPort() {\n    this.context.save();\n    utils.drawCircle(this.context, this.touchedPort.x, this.touchedPort.y, this.circleRadius, this.circleThickness, utils.colors.highlight(), undefined);\n    this.context.restore();\n  }\n\n  drawTouchLine() {\n    this.context.save();\n    utils.drawLine(this.context, this.touchedPort.x, this.touchedPort.y, this.x, this.y, fingerDefaults.touchedLineWidth, utils.colors.highlight());\n    this.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.context.save();\n    utils.drawCircle(this.context, this.touchedPort.x, this.touchedPort.y, fingerDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    utils.drawCircle(this.context, this.x, this.y, fingerDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    this.context.restore();\n  }\n\n  drawHoveredPort() {\n    this.context.save();\n    utils.drawCircle(this.context, this.hoveredPort.x, this.hoveredPort.y, this.circleRadius, this.circleThickness, utils.colors.highlight(), undefined);\n    this.context.restore();\n  }\n\n  findHover() {\n    if (!this._touchedPort) {\n      return;\n    }\n\n    if (this._hoveredPort) {\n      this._hoveredPort = undefined;\n    }\n\n    this._hoveredPort = this.findHoveredPort(this.outCircle);\n\n    if (this._hoveredPort) {\n      return;\n    }\n\n    this._hoveredPort = this.findHoveredPort(this.inCircle);\n\n    if (this._hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort(circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n\n    if (this._touchedPort.type === circle.type) {\n      return;\n    }\n\n    for (let arc of circle.getExpandedArcs()) {\n      for (let port of arc.ports) {\n        if (port.isUserTouching(this.x, this.y)) {\n          return port;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  handleDeleteConnection() {\n    const conn = this.getTouchedConnection();\n\n    if (conn) {\n      this.onDeleteConnection(conn);\n      return true;\n    }\n\n    return false;\n  }\n\n  getTouchedConnection() {\n    for (let i in this.connections) {\n      const conn = this.connections[i];\n\n      if (conn.isUserTouching(this.x, this.y)) {\n        return conn;\n      }\n    }\n\n    return undefined;\n  }\n\n  unselectAllConnections() {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving() {\n    // only de-select all the connections if there was a tap somewhere else\n    const didDeleteAConnection = this.handleDeleteConnection();\n\n    if (!didDeleteAConnection) {\n      this.unselectAllConnections();\n    } // find which Connection is being interacted with\n\n\n    if (this._touchedPort) {\n      // then, find the interactive connection\n      this.unselectAllConnections();\n\n      for (let name in this.connections) {\n        const conn = this.connections[name];\n\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()) {\n          conn.selected = true;\n        }\n      }\n    } else {\n      this.inCircle.tapEvent();\n      this.outCircle.tapEvent();\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent(x, y) {\n    this.x = x;\n    this.y = y;\n    this.isTouchingScreen = false;\n    const distMoved = utils.getDistance(this.touchX, this.touchY, x, y);\n\n    if (distMoved < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n    } else {\n      if (this._touchedPort && this._hoveredPort) {\n        this.makeConnection(this._hoveredPort, this._touchedPort);\n      }\n\n      this.unselectAllConnections();\n      this.clearCirclesTouchedHovered();\n    }\n  }\n\n  clearCirclesTouchedHovered() {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n  }\n\n  makeConnection(port1, port2) {\n    if (port1.type === utils.inType) {\n      this.onMakeConnection(port1, port2);\n    } else {\n      this.onMakeConnection(port2, port1);\n    }\n  }\n\n  touchEvent(x, y) {\n    this.touchX = x;\n    this.touchY = y;\n    this.isTouchingScreen = true;\n    this.moveEvent(x, y);\n\n    if (!this.getTouchedConnection()) {\n      this.unselectAllConnections();\n    }\n\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n\n    if (this.inCircle.isCloseTo(this.x, this.y)) {\n      port = this.inCircle.mouseEvent(this.x, this.y, this.radianNew[utils.inType]);\n    } else if (this.outCircle.isCloseTo(this.x, this.y)) {\n      port = this.outCircle.mouseEvent(this.x, this.y, this.radianNew[utils.outType]);\n    }\n\n    if (port) {\n      this._touchedPort = port;\n    }\n  }\n\n  moveEvent(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radianNew[utils.inType] = this.radiansFromCenter(this.x, this.y, this.inCircle);\n    this.radianNew[utils.outType] = this.radiansFromCenter(this.x, this.y, this.outCircle);\n  }\n\n  radiansFromCenter(x, y, circle) {\n    const xDist = Math.abs(circle.x - x);\n    const yDist = Math.abs(circle.y - y);\n\n    if (x > circle.x) {\n      if (y > circle.y) {\n        // bottom right\n        return Math.atan(yDist / xDist);\n      } else if (y < circle.y) {\n        // top right\n        return Math.atan(xDist / yDist) + Math.PI * 1.5;\n      } else {\n        // we're touching the y line\n        return 0;\n      }\n    } else if (x < circle.x) {\n      if (y > circle.y) {\n        // bottom left\n        return Math.atan(xDist / yDist) + Math.PI * 0.5;\n      } else if (y < circle.y) {\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      } else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    } else {\n      //we're touching the x line\n      if (y > circle.y) {\n        return Math.PI * 0.5;\n      } else if (y < circle.y) {\n        return Math.PI * 1.5;\n      } else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n\n}\n\nexport { Finger };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Finger.js"],"names":["utils","fingerDefaults","tapPixelsMovedThresh","touchCircleRadiusScaler","touchCircleThicknessScaler","touchedLineWidth","Finger","constructor","context","inCircle","outCircle","connections","onMakeConnection","onDeleteConnection","_touchedPort","undefined","_hoveredPort","circleRadius","circleThickness","x","y","touchX","touchY","isTouchingScreen","radianNew","inType","outType","radianPrev","Object","assign","touchedPort","hoveredPort","adjustToScreenSize","screenSize","update","touched","radiansMoved","findHover","draw","drawTouchLine","drawTouchedPort","drawHoveredPort","save","drawCircle","colors","highlight","restore","drawLine","findHoveredPort","circle","arcs","length","type","arc","getExpandedArcs","port","ports","isUserTouching","handleDeleteConnection","conn","getTouchedConnection","i","unselectAllConnections","name","selected","releaseWithoutMoving","didDeleteAConnection","inPort","isTouched","outPort","tapEvent","clearCirclesTouchedHovered","releaseEvent","distMoved","getDistance","makeConnection","clearTouchedHovered","port1","port2","touchEvent","moveEvent","isCloseTo","mouseEvent","radiansFromCenter","xDist","Math","abs","yDist","atan","PI"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\n\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\nclass Finger {\n  constructor (context, inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n    this.context = context;\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n\n    this.circleRadius = undefined;\n    this.circleThickness = undefined;\n\n    this.x = undefined;\n    this.y = undefined;\n    this.touchX = undefined;\n    this.touchY = undefined;\n\n    this.isTouchingScreen = false;\n\n    this.radianNew = {};\n    this.radianNew[utils.inType] = 0;\n    this.radianNew[utils.outType] = 0;\n    this.radianPrev = Object.assign({}, this.radianNew);\n  }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  adjustToScreenSize (screenSize) {\n    this.circleRadius = screenSize * fingerDefaults.touchCircleRadiusScaler;\n    this.circleThickness = screenSize * fingerDefaults.touchCircleThicknessScaler;\n  }\n\n  update () {\n    if (!this._touchedPort) {\n      if(this.inCircle.touched){\n        this.inCircle.radiansMoved = this.radianNew[utils.inType] - this.radianPrev[utils.inType];\n      }\n      else if(this.outCircle.touched){\n        this.outCircle.radiansMoved = this.radianNew[utils.outType] - this.radianPrev[utils.outType];\n      }\n    }\n    else if (this.isTouchingScreen) {\n      this.findHover();\n    }\n    this.radianPrev = Object.assign({}, this.radianNew);\n  }\n\n  draw () {\n    if (this.touchedPort) {\n      this.drawTouchLine();\n      this.drawTouchedPort();\n      if (this.hoveredPort) {\n        this.drawHoveredPort();\n      }\n    }\n  }\n\n  drawTouchedPort () {\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      this.circleRadius, this.circleThickness,\n      utils.colors.highlight(), undefined\n    );\n    this.context.restore();\n  }\n\n  drawTouchLine () {\n    this.context.save();\n    utils.drawLine(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      this.x, this.y,\n      fingerDefaults.touchedLineWidth, utils.colors.highlight()\n    );\n    this.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      fingerDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    utils.drawCircle(\n      this.context,\n      this.x, this.y,\n      fingerDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    this.context.restore();\n  }\n\n  drawHoveredPort () {\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.hoveredPort.x, this.hoveredPort.y,\n      this.circleRadius, this.circleThickness,\n      utils.colors.highlight(), undefined\n    );\n    this.context.restore();\n  }\n\n  findHover () {\n    if (!this._touchedPort) {\n      return;\n    }\n    if (this._hoveredPort) {\n      this._hoveredPort = undefined;\n    }\n    this._hoveredPort = this.findHoveredPort(this.outCircle);\n    if (this._hoveredPort) {\n      return;\n    }\n    this._hoveredPort = this.findHoveredPort(this.inCircle);\n    if (this._hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort (circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n    if (this._touchedPort.type === circle.type) {\n      return;\n    }\n    for (let arc of circle.getExpandedArcs()) {\n      for (let port of arc.ports) {\n        if (port.isUserTouching(this.x, this.y)) {\n          return port;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  handleDeleteConnection () {\n    const conn = this.getTouchedConnection();\n    if (conn) {\n      this.onDeleteConnection(conn);\n      return true;\n    }\n    return false;\n  }\n\n  getTouchedConnection () {\n    for(let i in this.connections){\n      const conn = this.connections[i];\n      if (conn.isUserTouching(this.x, this.y)) {\n        return conn;\n      }\n    }\n    return undefined;\n  }\n\n  unselectAllConnections () {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving () {\n    // only de-select all the connections if there was a tap somewhere else\n    const didDeleteAConnection = this.handleDeleteConnection()\n    if (!didDeleteAConnection) {\n      this.unselectAllConnections();\n    }\n    // find which Connection is being interacted with\n    if(this._touchedPort){\n      // then, find the interactive connection\n      this.unselectAllConnections();\n      for (let name in this.connections){\n        const conn = this.connections[name];\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()){\n          conn.selected = true;\n        }\n      }\n    }\n    else {\n      this.inCircle.tapEvent();\n      this.outCircle.tapEvent();\n    }\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent (x, y) {\n    this.x = x;\n    this.y = y;\n    this.isTouchingScreen = false;\n    const distMoved = utils.getDistance(this.touchX, this.touchY, x, y);\n    if (distMoved < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n    }\n    else {\n      if (this._touchedPort && this._hoveredPort){\n        this.makeConnection(this._hoveredPort, this._touchedPort);\n      }\n      this.unselectAllConnections();\n      this.clearCirclesTouchedHovered();\n    }\n  }\n\n  clearCirclesTouchedHovered () {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n  }\n\n  makeConnection (port1, port2) {\n    if (port1.type === utils.inType){\n      this.onMakeConnection(port1, port2);\n    }\n    else{\n      this.onMakeConnection(port2, port1);\n    }\n  }\n\n  touchEvent (x, y) {\n    this.touchX = x;\n    this.touchY = y;\n    this.isTouchingScreen = true;\n    this.moveEvent(x, y);\n    if (!this.getTouchedConnection()) {\n      this.unselectAllConnections();\n    }\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n    if(this.inCircle.isCloseTo(this.x, this.y)){\n      port = this.inCircle.mouseEvent(this.x, this.y, this.radianNew[utils.inType]);\n    }\n    else if(this.outCircle.isCloseTo(this.x, this.y)){\n      port = this.outCircle.mouseEvent(this.x, this.y, this.radianNew[utils.outType]);\n    }\n    if (port) {\n      this._touchedPort = port;\n    }\n  }\n\n  moveEvent (x, y) {\n    this.x = x;\n    this.y = y;\n    this.radianNew[utils.inType] = this.radiansFromCenter(\n      this.x, this.y, this.inCircle);\n    this.radianNew[utils.outType] = this.radiansFromCenter(\n      this.x, this.y, this.outCircle);\n  }\n\n  radiansFromCenter (x, y, circle) {\n    const xDist = Math.abs(circle.x - x);\n    const yDist = Math.abs(circle.y - y);\n    if (x > circle.x){\n      if (y > circle.y){\n        // bottom right\n        return Math.atan(yDist / xDist);\n      }\n      else if (y < circle.y){\n        // top right\n        return Math.atan(xDist / yDist) + (Math.PI * 1.5);\n      }\n      else {\n        // we're touching the y line\n        return 0;\n      }\n    }\n    else if (x < circle.x){\n      if (y > circle.y){\n        // bottom left\n        return Math.atan(xDist / yDist) + (Math.PI * 0.5);\n      }\n      else if (y < circle.y){\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      }\n      else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    }\n    else {\n      //we're touching the x line\n      if (y > circle.y){\n        return Math.PI * 0.5;\n      }\n      else if (y < circle.y){\n        return Math.PI * 1.5;\n      }\n      else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n}\n\nexport { Finger }\n"]},"metadata":{},"sourceType":"module"}