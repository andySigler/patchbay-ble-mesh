{"ast":null,"code":"import * as utils from './PatchbayUtils';\nimport { AppParams } from './AppParams';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(context, utils.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness, () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.params.outCircle = new Circle(context, utils.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness, () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.adjustToScreenSize(this.params.screenSize);\n    this.finger = new Finger(this.params, (inPort, outPort) => this.createConnection(inPort, outPort), conn => this.deleteConnection(conn), () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.reqAnimFrame = undefined;\n  }\n\n  adjustToScreenSize(screenSize) {\n    this.params.inCircle.adjustToScreenSize(screenSize);\n    this.params.outCircle.adjustToScreenSize(screenSize);\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].adjustToScreenSize(screenSize);\n    }\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.inCircle.update();\n    this.params.outCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawPorts();\n    this.params.outCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.params.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    connection.adjustToScreenSize(this.params.screenSize);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection(connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Circle","Connection","Finger","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","Patchbay","constructor","context","params","inCircle","inType","touchedPort","hoveredPort","outCircle","outType","adjustToScreenSize","screenSize","finger","inPort","outPort","createConnection","conn","deleteConnection","reqAnimFrame","undefined","i","connections","drawLoop","cancelAnimationFrame","update","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","drawArc","x","y","PI2","colors","white","touchedLineWidth","Math","sin","wobbleCounter","drawLine","green","setSize","width","height","fillStyle","background","fillRect","connection","saveConnection","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { AppParams } from './AppParams'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      context,\n      utils.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness,\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.params.outCircle = new Circle(\n      context,\n      utils.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness,\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.adjustToScreenSize(this.params.screenSize);\n    this.finger = new Finger(\n      this.params,\n      (inPort, outPort) => this.createConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn),\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.reqAnimFrame = undefined;\n  }\n\n  adjustToScreenSize (screenSize) {\n    this.params.inCircle.adjustToScreenSize(screenSize);\n    this.params.outCircle.adjustToScreenSize(screenSize);\n    for(let i in this.params.connections){\n      this.params.connections[i].adjustToScreenSize(screenSize);\n    }\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.inCircle.update();\n    this.params.outCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawArcs();\n\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawNames();\n\n    this.params.inCircle.drawPorts();\n    this.params.outCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    connection.adjustToScreenSize(this.params.screenSize);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection (connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}