{"ast":null,"code":"import * as utils from './PatchbayUtils';\nimport { AppParams } from './AppParams';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.context = context;\n    this.width = 1;\n    this.height = 1;\n    this.middleX = 1;\n    this.middleY = 1;\n    this.screenSize = 1;\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n    this.connections = {};\n    this.inCircle = undefined;\n    this.outCircle = undefined;\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(context, utils.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness, () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.params.outCircle = new Circle(context, utils.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness, () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.finger = new Finger(this.params, (inPort, outPort) => this.createConnection(inPort, outPort), conn => this.deleteConnection(conn), () => this.params.touchedPort, () => this.params.hoveredPort);\n    this.reqAnimFrame = undefined;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  adjustToScreenSize(screenSize) {\n    this.params.inCircle.adjustToScreenSize(screenSize);\n    this.params.outCircle.adjustToScreenSize(screenSize);\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].adjustToScreenSize(screenSize);\n    }\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.inCircle.update();\n    this.params.outCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawPorts();\n    this.params.outCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.params.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    connection.adjustToScreenSize(this.params.screenSize);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection(connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Circle","Connection","Finger","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","globalScalerHeightMultiplier","globalScalerMultiplier","circleCenterXOffsetScaler","circleCenterYOffsetScaler","Patchbay","constructor","context","width","height","middleX","middleY","screenSize","touchedPort","undefined","hoveredPort","connections","inCircle","outCircle","params","inType","outType","finger","inPort","outPort","createConnection","conn","deleteConnection","reqAnimFrame","adjustToScreenSize","i","drawLoop","cancelAnimationFrame","update","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","drawArc","x","y","PI2","colors","white","touchedLineWidth","Math","sin","wobbleCounter","drawLine","green","setSize","fillStyle","background","fillRect","connection","saveConnection","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { AppParams } from './AppParams'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.context = context;\n    this.width = 1;\n    this.height = 1;\n    this.middleX = 1;\n    this.middleY = 1;\n    this.screenSize = 1;\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n    this.connections = {};\n    this.inCircle = undefined;\n    this.outCircle = undefined;\n\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      context,\n      utils.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness,\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.params.outCircle = new Circle(\n      context,\n      utils.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness,\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.finger = new Finger(\n      this.params,\n      (inPort, outPort) => this.createConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn),\n      () => this.params.touchedPort,\n      () => this.params.hoveredPort\n    );\n    this.reqAnimFrame = undefined;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  adjustToScreenSize (screenSize) {\n    this.params.inCircle.adjustToScreenSize(screenSize);\n    this.params.outCircle.adjustToScreenSize(screenSize);\n    for(let i in this.params.connections){\n      this.params.connections[i].adjustToScreenSize(screenSize);\n    }\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.inCircle.update();\n    this.params.outCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawArcs();\n\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawNames();\n\n    this.params.inCircle.drawPorts();\n    this.params.outCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n    this.adjustToScreenSize(this.params.screenSize);\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.params.context, inPort, outPort);\n    connection.adjustToScreenSize(this.params.screenSize);\n    this.params.saveConnection(connection);\n  }\n\n  deleteConnection (connection) {\n    this.params.deleteConnection(connection);\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}