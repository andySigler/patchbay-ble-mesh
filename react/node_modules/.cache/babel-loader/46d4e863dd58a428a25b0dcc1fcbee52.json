{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor(params, parent, type, color, name, id, index) {\n    this.params = params;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._focused = false;\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n    this.test = true;\n  } // GETTERS\n\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set focused(newVal) {\n    this._focused = newVal;\n  }\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  addPort(index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._color(), this._type, index);\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta(data) {\n    // all of an Arc's ports are created all at once\n    if (this._ports.length === 0) {\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n\n      for (let i = 0; i < totalNewPorts; i++) {\n        this.addPort(i);\n      }\n    } // if ports already exist, then we are updated the names of the ports\n    else if (this.test) {\n        // loop through all ports of this type (in or out)\n        for (let i in data.ports[this._type]) {\n          const dataPort = data.ports[this._type][i]; // TODO: not sure when this would ever be false...\n\n          if (dataPort) {\n            // loop through all this Arc's previously saved ports\n            for (let p = 0; p < this._ports.length; p++) {\n              if (this._ports[p].index === dataPort.index) {\n                // update the name\n                this._ports[p].name = dataPort.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n  }\n\n  update(start, end, radius, lineWidth, padding, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this.start = start + padding;\n    this.end = end - padding;\n\n    if (this._parent.type === this.params.outType) {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * 1.75) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * .25) % utils.PI2;\n        this.end = (this.end + utils.PI * .25) % utils.PI2;\n      }\n    } else {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * .75) % utils.PI2;\n        this.end = (this.end + utils.PI * .75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * 1.25) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.25) % utils.PI2;\n      }\n    }\n\n    if (this.params.height < this.params.width) {\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this._isSelected = isSelected;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + utils.PI * arcDefaults.gutterScaler;\n    this.gutterEnd = this.end - utils.PI * arcDefaults.gutterScaler;\n    this.gutterLineWidth = undefined;\n\n    if (this._parent.type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    const onlyDrawOne = this.params.touchedPort && this.params.touchedPort.type === this._type;\n\n    for (let i = 0; i < this._ports.length; i++) {\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n      let isVisible = !onlyDrawOne || this.params.touchedPort === this._ports[i];\n      isVisible = this._isSelected && isVisible;\n\n      this._ports[i].onScreenUpdate(this.radius, this.lineWidth, this.parent.centerX, this.parent.centerY);\n\n      this._ports[i].update(this._sizeScaler, radLocation, isVisible);\n    }\n  }\n\n  isTouchingPort(x, y) {\n    // test to see if we are touching one of this Arc's ports\n    // if yes, set that Port as the global `touchedPort`\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        if (this._ports[i].isUserTouching(x, y)) {\n          this.params.touchedPort = this._ports[i];\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.params.context.save();\n    utils.drawArc(this.params.context, 0, 0, this.radius, this.start, this.end, this.arcLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.gutterLineWidth) {\n      utils.drawArc(this.params.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterLineWidth, utils.colors.background(), undefined);\n    }\n\n    this.params.context.restore();\n  }\n\n  drawName() {\n    this.params.context.save();\n    this.params.context.rotate(this.start + this.rotStep / 2);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n\n    this.params.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.params.context.save();\n    this.params.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n\n      this.params.context.rotate(this.rotStep);\n    }\n\n    this.params.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    if (sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n\n    if (sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n\n    sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh;\n    sizeScaler = Math.pow(sizeScaler, 2);\n    return sizeScaler;\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","touchingScaler","arcWidthScaler","gutterLineWidthScaler","gutterScaler","emptyArcScaler","sizeScalerMultiplier","sizeScalerThresh","Arc","constructor","params","parent","type","color","name","id","index","_parent","_type","_color","_name","_id","_index","_sizeScaler","_ports","_focused","_touched","_isSelected","start","undefined","end","radius","lineWidth","arcLineWidth","gutterStart","gutterEnd","gutterLineWidth","test","isSelected","ports","focused","touched","sizeScaler","newVal","addPort","tempPort","handleMeta","data","length","totalNewPorts","Number","totalPorts","i","dataPort","p","update","padding","modifySizeScaler","outType","width","height","PI","PI2","widthScaler","Math","max","updateGutter","updatePorts","inType","rotStep","onlyDrawOne","touchedPort","radLocation","isVisible","onScreenUpdate","centerX","centerY","isTouchingPort","x","y","isUserTouching","drawArc","context","save","colors","background","restore","drawName","rotate","drawPorts","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Port } from './Port'\n\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor (params, parent, type, color, name, id, index) {\n    this.params = params;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._focused = false;\n    this._touched = false;\n\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n\n    this.test = true;\n  }\n\n  // GETTERS\n\n  get isSelected () { return this._isSelected; }\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get index () { return this._index; }\n\n  get ports () { return this._ports; }\n\n  get focused () { return this._focused; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set focused (newVal) { this._focused = newVal; }\n\n  set touched (newVal) { this._touched = newVal; }\n\n  addPort (index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._color(), this._type, index);\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta (data) {\n    // all of an Arc's ports are created all at once\n    if (this._ports.length === 0) {\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n      for (let i = 0; i < totalNewPorts; i++) {\n        this.addPort(i);\n      }\n    }\n    // if ports already exist, then we are updated the names of the ports\n    else if (this.test) {\n      // loop through all ports of this type (in or out)\n      for (let i in data.ports[this._type]) {\n        const dataPort = data.ports[this._type][i];\n        // TODO: not sure when this would ever be false...\n        if (dataPort) {\n          // loop through all this Arc's previously saved ports\n          for (let p = 0;p < this._ports.length; p++) {\n            if (this._ports[p].index === dataPort.index) {\n              // update the name\n              this._ports[p].name = dataPort.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  update (start, end, radius, lineWidth, padding, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this.start = start + padding;\n    this.end = end - padding;\n    if (this._parent.type === this.params.outType) {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + (utils.PI * 1.75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.75)) % utils.PI2;\n      }\n      else {\n        this.start = (this.start + (utils.PI * .25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .25)) % utils.PI2;\n      }\n    }\n    else {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + (utils.PI * .75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .75)) % utils.PI2;\n      }\n      else {\n        this.start = (this.start + (utils.PI * 1.25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.25)) % utils.PI2;\n      }\n    }\n    if (this.params.height < this.params.width) {\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this._isSelected = isSelected;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + (utils.PI * arcDefaults.gutterScaler);\n    this.gutterEnd = this.end - (utils.PI * arcDefaults.gutterScaler);\n    this.gutterLineWidth = undefined;\n    if (this._parent.type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(\n        this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    const onlyDrawOne = this.params.touchedPort && this.params.touchedPort.type === this._type;\n    for (let i = 0;i < this._ports.length; i++) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      let isVisible = (!onlyDrawOne || this.params.touchedPort === this._ports[i]);\n      isVisible = this._isSelected && isVisible;\n      this._ports[i].onScreenUpdate(this.radius, this.lineWidth, this.parent.centerX, this.parent.centerY);\n      this._ports[i].update(this._sizeScaler, radLocation, isVisible);\n    }\n  }\n\n  isTouchingPort (x, y) {\n    // test to see if we are touching one of this Arc's ports\n    // if yes, set that Port as the global `touchedPort`\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        if (this._ports[i].isUserTouching(x, y)) {\n          this.params.touchedPort = this._ports[i];\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      0, 0, this.radius, this.start, this.end,\n      this.arcLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.gutterLineWidth) {\n      utils.drawArc(\n        this.params.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterLineWidth, utils.colors.background(), undefined\n      )\n    }\n    this.params.context.restore();\n  }\n\n  drawName () {\n    this.params.context.save();\n    this.params.context.rotate(this.start + (this.rotStep / 2));\n    for (let i = 0;i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n    this.params.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.params.context.save();\n    this.params.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n      this.params.context.rotate(this.rotStep);\n    }\n    this.params.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    if (sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n    if (sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n    sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh;\n    sizeScaler = Math.pow(sizeScaler, 2);\n    return sizeScaler;\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}