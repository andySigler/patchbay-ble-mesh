{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.erase();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  erase() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  testConnectionExistence(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Number(outputID) + '/' + Number(inputID) + '__' + Number(inputIndex) + '/' + Number(outputIndex);\n\n    if (!allConnections[tempName]) {\n      var outPort = undefined;\n      var inPort = undefined;\n\n      for (var h = 0; h < outCircle.arcs.length; h++) {\n        if (outCircle.arcs[h].id == outputID) {\n          outPort = outCircle.arcs[h].ports[outputIndex];\n        }\n\n        if (inCircle.arcs[h].id == inputID) {\n          inPort = inCircle.arcs[h].ports[inputIndex];\n        }\n\n        if (outPort && inPort) {\n          allConnections[tempName] = new Cord(context, outPort, inPort, tempName);\n          break;\n        }\n      }\n    } else {\n      allConnections[tempName].exists = true;\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","patchbayDefaults","tempThickness","screenPercentage","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","erase","requestAnimationFrame","setSize","width","height","fillStyle","colors","grey","fillRect","testConnectionExistence","outputID","inputID","inputIndex","outputIndex","tempName","Number","allConnections","outPort","inPort","h","arcs","length","id","ports","Cord","exists"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.erase();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  erase() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  testConnectionExistence (outputID,inputID,inputIndex,outputIndex) {\n    const tempName = Number(outputID)+'/'+Number(inputID)+'__'+Number(inputIndex)+'/'+Number(outputIndex);\n    if(!allConnections[tempName]){\n      var outPort = undefined;\n      var inPort = undefined;\n      for(var h=0;h<outCircle.arcs.length;h++){\n        if(outCircle.arcs[h].id==outputID){\n          outPort = outCircle.arcs[h].ports[outputIndex];\n        }\n        if(inCircle.arcs[h].id==inputID){\n          inPort = inCircle.arcs[h].ports[inputIndex];\n        }\n        if(outPort && inPort){\n          allConnections[tempName] = new Cord(context,outPort,inPort,tempName);\n          break;\n        }\n      }\n    }\n    else{\n      allConnections[tempName].exists = true;\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}