{"ast":null,"code":"import * as utils from './DrawUtils';\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3\n};\n\nclass Finger {\n  constructor(params, onMakeConnection, onDeleteConnection) {\n    this.params = params;\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n    this.topSide = false;\n    this.justErased = false;\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n  }\n\n  update() {\n    if (this.down || this.params.touchedPort) {\n      this.findHover();\n    }\n\n    if (this.down && this.params.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n\n      if (this.params.outCircle.touched) {\n        this.params.outCircle.radiansMoved = out_radianDiff;\n      } else if (this.params.inCircle.touched) {\n        this.params.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort = undefined;\n    }\n\n    this.findHoveredPort(this.params.outCircle);\n\n    if (this.params.hoveredPort) {\n      return;\n    }\n\n    this.findHoveredPort(this.params.inCircle);\n\n    if (this.params.hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort(circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n\n    if (this.params.touchedPort && this.params.touchedPort.type === circle.type) {\n      return;\n    }\n\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + circle.arcOffset) % circle.arcs.length;\n      const totPorts = circle.arcs[arcIndex].ports.length;\n\n      for (let n = 0; n < totPorts; n++) {\n        const port = circle.arcs[arcIndex].ports[n];\n\n        if (port.isUserTouching(this.x, this.y)) {\n          this.params.hoveredPort = port;\n          break;\n        }\n      }\n    }\n  }\n\n  touchEvent() {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n\n    if (this.handleDeleteConnection()) {\n      return;\n    } // set all connections.hovered to false\n\n\n    this.unselectAllConnections();\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n\n    if (this.params.inCircle.isCloseTo(this.x, this.y)) {\n      this.params.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    } else if (this.params.outCircle.isCloseTo(this.x, this.y)) {\n      this.params.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n  }\n\n  handleDeleteConnection() {\n    for (let i in this.params.connections) {\n      const conn = this.params.connections[i];\n\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  resetFromNewCoords(x, y) {\n    if (this.x && this.y) {\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease() {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections() {\n    for (let name in this.params.connections) {\n      this.params.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving(x, y) {\n    this.params.inCircle.tapEvent();\n    this.params.outCircle.tapEvent(); // reset some Finger variables\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease(); // set all connections.hovered to false\n\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    } else {\n      this.justErased = false;\n    } // find which Connection is being interacted with\n\n\n    if (this.params.touchedPort) {\n      // then, find the interactive connection\n      this.unselectAllConnections();\n\n      for (let name in this.params.connections) {\n        const conn = this.params.connections[name];\n\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()) {\n          conn.selected = true;\n        }\n      }\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent(x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n\n    if (touchedPort && hoveredPort && hoveredPort !== touchedPort) {\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    this.unselectAllConnections();\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered() {\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    this.params.touchedPort = undefined;\n    this.params.hoveredPort = undefined;\n  }\n\n  makeConnection(port1, port2) {\n    let inPort;\n    let outPort;\n\n    if (port1.type === this.params.inType) {\n      inPort = port1;\n      outPort = port2;\n    } else {\n      inPort = port2;\n      outPort = port1;\n    }\n\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent(x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched; // determine what side of the screen we're on\n\n    if (this.y > this.params.middleY) this.topSide = true;else this.topSide = false;\n\n    if (!justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, this.params.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, this.params.outType);\n\n    if (justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian(type) {\n    return type === this.params.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter(x, y, type) {\n    let middleX = this.params.outCircle.centerX;\n    let middleY = this.params.outCircle.centerY;\n\n    if (type === this.params.inType) {\n      middleX = this.params.inCircle.centerX;\n      middleY = this.params.inCircle.centerY;\n    }\n\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n\n    if (x > middleX) {\n      if (y > middleY) {\n        // bottom right\n        return Math.atan(yDist / xDist);\n      } else if (y < middleY) {\n        // top right\n        return Math.atan(xDist / yDist) + Math.PI * 1.5;\n      } else {\n        // we're touching the y line\n        return 0;\n      }\n    } else if (x < middleX) {\n      if (y > middleY) {\n        // bottom left\n        return Math.atan(xDist / yDist) + Math.PI * 0.5;\n      } else if (y < middleY) {\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      } else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    } else {\n      //we're touching the x line\n      if (y > middleY) {\n        return Math.PI * 0.5;\n      } else if (y < middleY) {\n        return Math.PI * 1.5;\n      } else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n\n}\n\nexport { Finger };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Finger.js"],"names":["utils","fingerDefaults","tapPixelsMovedThresh","Finger","constructor","params","onMakeConnection","onDeleteConnection","x","undefined","y","xStart","yStart","xDiff","yDiff","down","didMove","inRadianDiff","inRadianPrev","inRadianNew","outRadianDiff","outRadianPrev","outRadianNew","topSide","justErased","update","touchedPort","findHover","outCircle","arcs","length","in_radianDiff","out_radianDiff","touched","radiansMoved","inCircle","hoveredPort","findHoveredPort","circle","type","i","arcIndex","arcOffset","totPorts","ports","n","port","isUserTouching","touchEvent","handleDeleteConnection","unselectAllConnections","clearTouchedHovered","isCloseTo","mouseEvent","connections","conn","resetFromNewCoords","resetOnRelease","radianDown","radianDiff","name","selected","releaseWithoutMoving","tapEvent","inPort","isTouched","outPort","clearCirclesTouchedHovered","releaseEvent","getDistance","makeConnection","port1","port2","inType","moveEvent","justTouched","middleY","radiansFromCenter","outType","getRadian","middleX","centerX","centerY","yDist","Math","abs","xDist","atan","PI"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,oBAAoB,EAAE;AADD,CAAvB;;AAKA,MAAMC,MAAN,CAAa;AACXC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,gBAAV,EAA4BC,kBAA5B,EAAgD;AACzD,SAAKF,MAAL,GAAcA,MAAd;AAEA,SAAKG,CAAL,GAASC,SAAT;AACA,SAAKC,CAAL,GAASD,SAAT;AACA,SAAKE,MAAL,GAAcF,SAAd;AACA,SAAKG,MAAL,GAAcH,SAAd;AACA,SAAKI,KAAL,GAAaJ,SAAb;AACA,SAAKK,KAAL,GAAaL,SAAb;AACA,SAAKM,IAAL,GAAY,KAAZ;AACA,SAAKC,OAAL,GAAe,KAAf;AAEA,SAAKC,YAAL,GAAoBR,SAApB;AACA,SAAKS,YAAL,GAAoBT,SAApB;AACA,SAAKU,WAAL,GAAmBV,SAAnB;AACA,SAAKW,aAAL,GAAqBX,SAArB;AACA,SAAKY,aAAL,GAAqBZ,SAArB;AACA,SAAKa,YAAL,GAAoBb,SAApB;AAEA,SAAKc,OAAL,GAAe,KAAf;AACA,SAAKC,UAAL,GAAkB,KAAlB;AAEA,SAAKlB,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACD;;AAEDkB,EAAAA,MAAM,GAAI;AACR,QAAI,KAAKV,IAAL,IAAa,KAAKV,MAAL,CAAYqB,WAA7B,EAA0C;AACxC,WAAKC,SAAL;AACD;;AACD,QAAI,KAAKZ,IAAL,IAAa,KAAKV,MAAL,CAAYuB,SAAZ,CAAsBC,IAAtB,CAA2BC,MAA3B,GAAoC,CAArD,EAAwD;AACtD,YAAMC,aAAa,GAAG,KAAKZ,WAAL,GAAmB,KAAKD,YAA9C;AACA,YAAMc,cAAc,GAAG,KAAKV,YAAL,GAAoB,KAAKD,aAAhD;;AACA,UAAG,KAAKhB,MAAL,CAAYuB,SAAZ,CAAsBK,OAAzB,EAAiC;AAC/B,aAAK5B,MAAL,CAAYuB,SAAZ,CAAsBM,YAAtB,GAAqCF,cAArC;AACD,OAFD,MAGK,IAAG,KAAK3B,MAAL,CAAY8B,QAAZ,CAAqBF,OAAxB,EAAgC;AACnC,aAAK5B,MAAL,CAAY8B,QAAZ,CAAqBD,YAArB,GAAoCH,aAApC;AACD;AACF;;AACD,SAAKlB,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKI,YAAL,GAAoB,KAAKC,WAAzB;AACA,SAAKE,aAAL,GAAqB,KAAKC,YAA1B;AACD;;AAEDK,EAAAA,SAAS,GAAI;AACX,QAAI,CAAC,KAAKtB,MAAL,CAAYqB,WAAjB,EAA8B;AAC5B;AACD;;AACD,QAAI,KAAKrB,MAAL,CAAY+B,WAAhB,EAA6B;AAC3B,WAAK/B,MAAL,CAAY+B,WAAZ,GAA0B3B,SAA1B;AACD;;AACD,SAAK4B,eAAL,CAAqB,KAAKhC,MAAL,CAAYuB,SAAjC;;AACA,QAAI,KAAKvB,MAAL,CAAY+B,WAAhB,EAA6B;AAC3B;AACD;;AACD,SAAKC,eAAL,CAAqB,KAAKhC,MAAL,CAAY8B,QAAjC;;AACA,QAAI,KAAK9B,MAAL,CAAY+B,WAAhB,EAA6B;AAC3B;AACD;AACF;;AAEDC,EAAAA,eAAe,CAAEC,MAAF,EAAU;AACvB,QAAIA,MAAM,CAACT,IAAP,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AACD,QAAI,KAAKzB,MAAL,CAAYqB,WAAZ,IAA2B,KAAKrB,MAAL,CAAYqB,WAAZ,CAAwBa,IAAxB,KAAiCD,MAAM,CAACC,IAAvE,EAA6E;AAC3E;AACD;;AACD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,QAAQ,GAAG,CAACD,CAAC,GAAGF,MAAM,CAACI,SAAZ,IAAyBJ,MAAM,CAACT,IAAP,CAAYC,MAAtD;AACA,YAAMa,QAAQ,GAAGL,MAAM,CAACT,IAAP,CAAYY,QAAZ,EAAsBG,KAAtB,CAA4Bd,MAA7C;;AACA,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmC;AACjC,cAAMC,IAAI,GAAGR,MAAM,CAACT,IAAP,CAAYY,QAAZ,EAAsBG,KAAtB,CAA4BC,CAA5B,CAAb;;AACA,YAAIC,IAAI,CAACC,cAAL,CAAoB,KAAKvC,CAAzB,EAA4B,KAAKE,CAAjC,CAAJ,EAAyC;AACvC,eAAKL,MAAL,CAAY+B,WAAZ,GAA0BU,IAA1B;AACA;AACD;AACF;AACF;AACF;;AAEDE,EAAAA,UAAU,GAAI;AACZ,SAAKjC,IAAL,GAAY,IAAZ;AACA,SAAKF,KAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAa,CAAb;;AACA,QAAI,KAAKmC,sBAAL,EAAJ,EAAmC;AACjC;AACD,KANW,CAOZ;;;AACA,SAAKC,sBAAL;AACA,SAAK7C,MAAL,CAAY8B,QAAZ,CAAqBgB,mBAArB;AACA,SAAK9C,MAAL,CAAYuB,SAAZ,CAAsBuB,mBAAtB;;AACA,QAAG,KAAK9C,MAAL,CAAY8B,QAAZ,CAAqBiB,SAArB,CAA+B,KAAK5C,CAApC,EAAuC,KAAKE,CAA5C,CAAH,EAAkD;AAChD,WAAKL,MAAL,CAAY8B,QAAZ,CAAqBkB,UAArB,CAAgC,KAAK7C,CAArC,EAAwC,KAAKE,CAA7C,EAAgD,KAAKS,WAArD;AACD,KAFD,MAGK,IAAG,KAAKd,MAAL,CAAYuB,SAAZ,CAAsBwB,SAAtB,CAAgC,KAAK5C,CAArC,EAAwC,KAAKE,CAA7C,CAAH,EAAmD;AACtD,WAAKL,MAAL,CAAYuB,SAAZ,CAAsByB,UAAtB,CAAiC,KAAK7C,CAAtC,EAAyC,KAAKE,CAA9C,EAAiD,KAAKY,YAAtD;AACD;AACF;;AAED2B,EAAAA,sBAAsB,GAAI;AACxB,SAAI,IAAIT,CAAR,IAAa,KAAKnC,MAAL,CAAYiD,WAAzB,EAAqC;AACnC,YAAMC,IAAI,GAAG,KAAKlD,MAAL,CAAYiD,WAAZ,CAAwBd,CAAxB,CAAb;;AACA,UAAIe,IAAI,CAACR,cAAL,CAAoB,KAAKvC,CAAzB,EAA4B,KAAKE,CAAjC,CAAJ,EAAyC;AACvC,aAAKH,kBAAL,CAAwBgD,IAAxB;AACA,aAAK/B,UAAL,GAAkB,IAAlB;AACA,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAEDgC,EAAAA,kBAAkB,CAAEhD,CAAF,EAAKE,CAAL,EAAQ;AACxB,QAAG,KAAKF,CAAL,IAAU,KAAKE,CAAlB,EAAoB;AAClB,WAAKG,KAAL,GAAaL,CAAC,GAAG,KAAKA,CAAtB;AACA,WAAKM,KAAL,GAAaJ,CAAC,GAAG,KAAKA,CAAtB;AACD;;AACD,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKE,CAAL,GAASA,CAAT;AACD;;AAED+C,EAAAA,cAAc,GAAI;AAChB,SAAK1C,IAAL,GAAY,KAAZ;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAK0C,UAAL,GAAkBjD,SAAlB;AACA,SAAKkD,UAAL,GAAkBlD,SAAlB;AACD;;AAEDyC,EAAAA,sBAAsB,GAAI;AACxB,SAAK,IAAIU,IAAT,IAAiB,KAAKvD,MAAL,CAAYiD,WAA7B,EAA0C;AACxC,WAAKjD,MAAL,CAAYiD,WAAZ,CAAwBM,IAAxB,EAA8BC,QAA9B,GAAyC,KAAzC;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAAEtD,CAAF,EAAKE,CAAL,EAAQ;AAC1B,SAAKL,MAAL,CAAY8B,QAAZ,CAAqB4B,QAArB;AACA,SAAK1D,MAAL,CAAYuB,SAAZ,CAAsBmC,QAAtB,GAF0B,CAG1B;;AACA,SAAKP,kBAAL,CAAwBhD,CAAxB,EAA2BE,CAA3B;AACA,SAAK+C,cAAL,GAL0B,CAM1B;;AACA,QAAI,CAAC,KAAKjC,UAAV,EAAsB;AACpB,WAAK0B,sBAAL;AACD,KAFD,MAGK;AACH,WAAK1B,UAAL,GAAkB,KAAlB;AACD,KAZyB,CAa1B;;;AACA,QAAG,KAAKnB,MAAL,CAAYqB,WAAf,EAA2B;AACzB;AACA,WAAKwB,sBAAL;;AACA,WAAK,IAAIU,IAAT,IAAiB,KAAKvD,MAAL,CAAYiD,WAA7B,EAAyC;AACvC,cAAMC,IAAI,GAAG,KAAKlD,MAAL,CAAYiD,WAAZ,CAAwBM,IAAxB,CAAb;;AACA,YAAIL,IAAI,CAACS,MAAL,CAAYC,SAAZ,MAA2BV,IAAI,CAACW,OAAL,CAAaD,SAAb,EAA/B,EAAwD;AACtDV,UAAAA,IAAI,CAACM,QAAL,GAAgB,IAAhB;AACD;AACF;AACF;;AACD,SAAKM,0BAAL;AACD;;AAEDC,EAAAA,YAAY,CAAE5D,CAAF,EAAKE,CAAL,EAAQ;AAClB,QAAI,CAAC,KAAKM,OAAN,IAAiBhB,KAAK,CAACqE,WAAN,CAAkB,KAAK1D,MAAvB,EAA+B,KAAKC,MAApC,EAA4CJ,CAA5C,EAA+CE,CAA/C,IAAoDT,cAAc,CAACC,oBAAxF,EAA8G;AAC5G,WAAK4D,oBAAL,CAA0BtD,CAA1B,EAA6BE,CAA7B;AACA;AACD;;AACD,SAAK8C,kBAAL,CAAwBhD,CAAxB,EAA2BE,CAA3B;AACA,SAAK+C,cAAL;AACA,UAAM/B,WAAW,GAAG,KAAKrB,MAAL,CAAYqB,WAAhC;AACA,UAAMU,WAAW,GAAG,KAAK/B,MAAL,CAAY+B,WAAhC;;AACA,QAAIV,WAAW,IAAIU,WAAf,IAA8BA,WAAW,KAAKV,WAAlD,EAA8D;AAC5D,WAAK4C,cAAL,CAAoBlC,WAApB,EAAgCV,WAAhC;AACD;;AAED,SAAKwB,sBAAL;AAEA,SAAKiB,0BAAL;AACD;;AAEDA,EAAAA,0BAA0B,GAAI;AAC5B,SAAK9D,MAAL,CAAY8B,QAAZ,CAAqBgB,mBAArB;AACA,SAAK9C,MAAL,CAAYuB,SAAZ,CAAsBuB,mBAAtB;AACA,SAAK9C,MAAL,CAAYqB,WAAZ,GAA0BjB,SAA1B;AACA,SAAKJ,MAAL,CAAY+B,WAAZ,GAA0B3B,SAA1B;AACD;;AAED6D,EAAAA,cAAc,CAAEC,KAAF,EAASC,KAAT,EAAgB;AAC5B,QAAIR,MAAJ;AACA,QAAIE,OAAJ;;AACA,QAAIK,KAAK,CAAChC,IAAN,KAAe,KAAKlC,MAAL,CAAYoE,MAA/B,EAAsC;AACpCT,MAAAA,MAAM,GAAGO,KAAT;AACAL,MAAAA,OAAO,GAAGM,KAAV;AACD,KAHD,MAII;AACFR,MAAAA,MAAM,GAAGQ,KAAT;AACAN,MAAAA,OAAO,GAAGK,KAAV;AACD;;AACD,SAAKjE,gBAAL,CAAsB0D,MAAtB,EAA8BE,OAA9B;AACD;;AAEDQ,EAAAA,SAAS,CAAElE,CAAF,EAAKE,CAAL,EAAQiE,WAAR,EAAqB;AAC5B,QAAIA,WAAJ,EAAiB;AACf,WAAKhE,MAAL,GAAcH,CAAd;AACA,WAAKI,MAAL,GAAcF,CAAd;AACD;;AACD,SAAK8C,kBAAL,CAAwBhD,CAAxB,EAA2BE,CAA3B;AACA,SAAKM,OAAL,GAAe,CAAC2D,WAAhB,CAN4B,CAO5B;;AACA,QAAI,KAAKjE,CAAL,GAAS,KAAKL,MAAL,CAAYuE,OAAzB,EAAkC,KAAKrD,OAAL,GAAe,IAAf,CAAlC,KACK,KAAKA,OAAL,GAAe,KAAf;;AACL,QAAI,CAACoD,WAAL,EAAiB;AACf,WAAKzD,YAAL,GAAoB,KAAKC,WAAzB;AACA,WAAKE,aAAL,GAAqB,KAAKC,YAA1B;AACD;;AACD,SAAKH,WAAL,GAAmB,KAAK0D,iBAAL,CAAuB,KAAKrE,CAA5B,EAA+B,KAAKE,CAApC,EAAuC,KAAKL,MAAL,CAAYoE,MAAnD,CAAnB;AACA,SAAKnD,YAAL,GAAoB,KAAKuD,iBAAL,CAAuB,KAAKrE,CAA5B,EAA+B,KAAKE,CAApC,EAAuC,KAAKL,MAAL,CAAYyE,OAAnD,CAApB;;AACA,QAAIH,WAAJ,EAAgB;AACd,WAAKzD,YAAL,GAAoB,KAAKC,WAAzB;AACA,WAAKE,aAAL,GAAqB,KAAKC,YAA1B;AACD;AACF;;AAEDyD,EAAAA,SAAS,CAAExC,IAAF,EAAQ;AACf,WAAOA,IAAI,KAAK,KAAKlC,MAAL,CAAYoE,MAArB,GAA8B,KAAKtD,WAAnC,GAAiD,KAAKG,YAA7D;AACD;;AAEDuD,EAAAA,iBAAiB,CAAErE,CAAF,EAAKE,CAAL,EAAQ6B,IAAR,EAAc;AAC7B,QAAIyC,OAAO,GAAG,KAAK3E,MAAL,CAAYuB,SAAZ,CAAsBqD,OAApC;AACA,QAAIL,OAAO,GAAG,KAAKvE,MAAL,CAAYuB,SAAZ,CAAsBsD,OAApC;;AACA,QAAI3C,IAAI,KAAK,KAAKlC,MAAL,CAAYoE,MAAzB,EAAgC;AAC9BO,MAAAA,OAAO,GAAG,KAAK3E,MAAL,CAAY8B,QAAZ,CAAqB8C,OAA/B;AACAL,MAAAA,OAAO,GAAG,KAAKvE,MAAL,CAAY8B,QAAZ,CAAqB+C,OAA/B;AACD;;AACD,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAST,OAAO,GAAGlE,CAAnB,CAAd;AACA,UAAM4E,KAAK,GAAGF,IAAI,CAACC,GAAL,CAASL,OAAO,GAAGxE,CAAnB,CAAd;;AACA,QAAIA,CAAC,GAAGwE,OAAR,EAAgB;AACd,UAAItE,CAAC,GAAGkE,OAAR,EAAgB;AACd;AACA,eAAOQ,IAAI,CAACG,IAAL,CAAUJ,KAAK,GAAGG,KAAlB,CAAP;AACD,OAHD,MAIK,IAAI5E,CAAC,GAAGkE,OAAR,EAAgB;AACnB;AACA,eAAOQ,IAAI,CAACG,IAAL,CAAUD,KAAK,GAAGH,KAAlB,IAA4BC,IAAI,CAACI,EAAL,GAAU,GAA7C;AACD,OAHI,MAIA;AACH;AACA,eAAO,CAAP;AACD;AACF,KAbD,MAcK,IAAIhF,CAAC,GAAGwE,OAAR,EAAgB;AACnB,UAAItE,CAAC,GAAGkE,OAAR,EAAgB;AACd;AACA,eAAOQ,IAAI,CAACG,IAAL,CAAUD,KAAK,GAAGH,KAAlB,IAA4BC,IAAI,CAACI,EAAL,GAAU,GAA7C;AACD,OAHD,MAIK,IAAI9E,CAAC,GAAGkE,OAAR,EAAgB;AACnB;AACA,eAAOQ,IAAI,CAACG,IAAL,CAAUJ,KAAK,GAAGG,KAAlB,IAA2BF,IAAI,CAACI,EAAvC;AACD,OAHI,MAIA;AACH;AACA,eAAOJ,IAAI,CAACI,EAAZ;AACD;AACF,KAbI,MAcA;AACH;AACA,UAAI9E,CAAC,GAAGkE,OAAR,EAAgB;AACd,eAAOQ,IAAI,CAACI,EAAL,GAAU,GAAjB;AACD,OAFD,MAGK,IAAI9E,CAAC,GAAGkE,OAAR,EAAgB;AACnB,eAAOQ,IAAI,CAACI,EAAL,GAAU,GAAjB;AACD,OAFI,MAGA;AACH;AACA,eAAO,CAAP;AACD;AACF;AACF;;AAvRU;;AA0Rb,SAASrF,MAAT","sourcesContent":["import * as utils from './DrawUtils'\n\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3\n};\n\n\nclass Finger {\n  constructor (params, onMakeConnection, onDeleteConnection) {\n    this.params = params;\n\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n\n    this.topSide = false;\n    this.justErased = false;\n\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n  }\n\n  update () {\n    if (this.down || this.params.touchedPort) {\n      this.findHover();\n    }\n    if (this.down && this.params.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n      if(this.params.outCircle.touched){\n        this.params.outCircle.radiansMoved = out_radianDiff;\n      }\n      else if(this.params.inCircle.touched){\n        this.params.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    if (this.params.hoveredPort) {\n      this.params.hoveredPort = undefined;\n    }\n    this.findHoveredPort(this.params.outCircle);\n    if (this.params.hoveredPort) {\n      return;\n    }\n    this.findHoveredPort(this.params.inCircle);\n    if (this.params.hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort (circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n    if (this.params.touchedPort && this.params.touchedPort.type === circle.type) {\n      return;\n    }\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + circle.arcOffset) % circle.arcs.length;\n      const totPorts = circle.arcs[arcIndex].ports.length;\n      for (let n = 0; n < totPorts; n++) {\n        const port = circle.arcs[arcIndex].ports[n];\n        if (port.isUserTouching(this.x, this.y)) {\n          this.params.hoveredPort = port;\n          break;\n        }\n      }\n    }\n  }\n\n  touchEvent () {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n    if (this.handleDeleteConnection()) {\n      return;\n    }\n    // set all connections.hovered to false\n    this.unselectAllConnections();\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    if(this.params.inCircle.isCloseTo(this.x, this.y)){\n      this.params.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    }\n    else if(this.params.outCircle.isCloseTo(this.x, this.y)){\n      this.params.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n  }\n\n  handleDeleteConnection () {\n    for(let i in this.params.connections){\n      const conn = this.params.connections[i];\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  resetFromNewCoords (x, y) {\n    if(this.x && this.y){\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease () {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections () {\n    for (let name in this.params.connections) {\n      this.params.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving (x, y) {\n    this.params.inCircle.tapEvent();\n    this.params.outCircle.tapEvent();\n    // reset some Finger variables\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    // set all connections.hovered to false\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    }\n    else {\n      this.justErased = false;\n    }\n    // find which Connection is being interacted with\n    if(this.params.touchedPort){\n      // then, find the interactive connection\n      this.unselectAllConnections();\n      for (let name in this.params.connections){\n        const conn = this.params.connections[name];\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()){\n          conn.selected = true;\n        }\n      }\n    }\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent (x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.params.touchedPort;\n    const hoveredPort = this.params.hoveredPort;\n    if (touchedPort && hoveredPort && hoveredPort !== touchedPort){\n      this.makeConnection(hoveredPort,touchedPort);\n    }\n\n    this.unselectAllConnections();\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered () {\n    this.params.inCircle.clearTouchedHovered();\n    this.params.outCircle.clearTouchedHovered();\n    this.params.touchedPort = undefined;\n    this.params.hoveredPort = undefined;\n  }\n\n  makeConnection (port1, port2) {\n    let inPort;\n    let outPort;\n    if (port1.type === this.params.inType){\n      inPort = port1;\n      outPort = port2;\n    }\n    else{\n      inPort = port2;\n      outPort = port1;\n    }\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent (x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched;\n    // determine what side of the screen we're on\n    if (this.y > this.params.middleY) this.topSide = true;\n    else this.topSide = false;\n    if (!justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, this.params.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, this.params.outType);\n    if (justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian (type) {\n    return type === this.params.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter (x, y, type) {\n    let middleX = this.params.outCircle.centerX;\n    let middleY = this.params.outCircle.centerY;\n    if (type === this.params.inType){\n      middleX = this.params.inCircle.centerX;\n      middleY = this.params.inCircle.centerY;\n    }\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n    if (x > middleX){\n      if (y > middleY){\n        // bottom right\n        return Math.atan(yDist / xDist);\n      }\n      else if (y < middleY){\n        // top right\n        return Math.atan(xDist / yDist) + (Math.PI * 1.5);\n      }\n      else {\n        // we're touching the y line\n        return 0;\n      }\n    }\n    else if (x < middleX){\n      if (y > middleY){\n        // bottom left\n        return Math.atan(xDist / yDist) + (Math.PI * 0.5);\n      }\n      else if (y < middleY){\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      }\n      else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    }\n    else {\n      //we're touching the x line\n      if (y > middleY){\n        return Math.PI * 0.5;\n      }\n      else if (y < middleY){\n        return Math.PI * 1.5;\n      }\n      else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n}\n\nexport { Finger }\n"]},"metadata":{},"sourceType":"module"}