{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/patchbay-react/patchbay-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from './DrawUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {\n    in: 0.375,\n    out: .875\n  }\n};\n\nclass Arc {\n  constructor(params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  } // GETTERS\n\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort(index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort; // update some draw settings that change when ports > 0\n\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  onScreenUpdate(radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update(start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    this.drawnLineWidth = utils.clipValue(this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + utils.PI2 * arcDefaults.gutterStartEndScaler;\n    this.gutterEnd = this.end - utils.PI2 * arcDefaults.gutterStartEndScaler;\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let _ref of this._ports.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let i = _ref2[0];\n      let port = _ref2[1];\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort(x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.drawnLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.shouldDrawGutter) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterThickness, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2);\n\n    for (let port of this._ports) {\n      port.drawName();\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    sizeScaler = utils.clipValue(sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","emptyLineWidthScaler","gutterThicknessScaler","gutterStartEndScaler","sizeScalerPreMultiplier","angleOffset","in","out","Arc","constructor","params","parent","type","color","name","id","index","context","_parent","_type","_color","_name","_id","_index","_sizeScaler","_ports","_touched","_isSelected","start","undefined","end","PI2","radius","lineWidth","drawnLineWidth","drawnLineWidthScaler","shouldDrawGutter","gutterStart","gutterEnd","gutterThickness","ports","isSelected","touched","sizeScaler","newVal","holdsTouchedPort","port","touchedPort","Boolean","holdsHoveredPort","hoveredPort","addPort","tempPort","inType","onScreenUpdate","circleX","circleY","update","modifySizeScaler","clipValue","updatePorts","updateGutter","Math","max","rotStep","length","entries","i","radLocation","getTouchedPort","x","y","isUserTouching","drawArc","save","colors","background","restore","drawName","rotate","drawPorts","PI","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Port } from './Port'\n\n\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {in: 0.375, out: .875}\n};\n\nclass Arc {\n  constructor (params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._touched = false;\n\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  }\n\n  // GETTERS\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get index () { return this._index; }\n\n  get ports () { return this._ports; }\n\n  get isSelected () { return this._isSelected; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set touched (newVal) { this._touched = newVal; }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort (index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort;\n    // update some draw settings that change when ports > 0\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  onScreenUpdate (radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update (start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    this.drawnLineWidth = utils.clipValue(\n      this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(\n      this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + (utils.PI2 * arcDefaults.gutterStartEndScaler);\n    this.gutterEnd = this.end - (utils.PI2 * arcDefaults.gutterStartEndScaler);\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let [i, port] of this._ports.entries()) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort (x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.drawnLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.shouldDrawGutter) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterThickness, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.rotate(this.start + (this.rotStep / 2));\n    for (let port of this._ports) {\n      port.drawName();\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    sizeScaler = utils.clipValue(\n      sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}