{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.clearCanvas();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  drawTouchedPort(fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(this.params.touchedPort.size * patchbayDefaults.touchedLineScaler, patchbayDefaults.touchedLineMinWidth);\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, fingerX, fingerY, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedWobbleScaler","touchedLineScaler","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","clearCanvas","requestAnimationFrame","drawTouchedPort","fingerX","fingerY","touchedPort","touchCircleThickness","size","touchedLineWidth","Math","sin","wobbleCounter","max","touchedLineTipCircleScaler","scaler","min","circleRadius","save","drawArc","x","y","PI2","colors","white","restore","drawLine","green","drawHoveredPort","hoveredPort","hoveredCircleWidth","setSize","width","height","fillStyle","grey","fillRect","createConnection","outputID","inputID","inputIndex","outputIndex","tempName","generateName","connections","outPort","getPort","inPort","newConnection","addConnection","exists","eraseNodeFromConnections","id","n","conn","parent","deleteConnection"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.clearCanvas();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop);\n  }\n\n  drawTouchedPort (fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(\n      this.params.touchedPort.size * patchbayDefaults.touchedLineScaler,\n      patchbayDefaults.touchedLineMinWidth\n    );\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      fingerX, fingerY,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(\n      outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}