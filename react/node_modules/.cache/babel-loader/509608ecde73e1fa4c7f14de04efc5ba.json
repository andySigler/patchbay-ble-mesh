{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleScaler: 0.1,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25,\n  // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor(params, parent, type, index, color) {\n    this.params = params;\n    this.context = this.params.context;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this.textOffset = undefined;\n    this._visible = false;\n    this._sizeScaler = 0.0;\n    this.parentX = 0;\n    this.parentY = 0;\n    this.parentRadius = undefined;\n    this.parentWidth = undefined;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.portRadius = undefined;\n    this.drawnPortRadius = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = color;\n    this.highlightedFillStyle = utils.colors.white();\n  } // GETTERS\n\n\n  get visible() {\n    return this._visible;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get radius() {\n    return this.portRadius;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set name(name) {\n    this._name = name;\n  }\n\n  isTouched() {\n    return Boolean(this.params.touchedPort === this);\n  }\n\n  isPotentialConnection() {\n    return Boolean(this.params.touchedPort && this.params.touchedPort.type !== this._type);\n  }\n\n  isHovered() {\n    return Boolean(this.params.hoveredPort === this);\n  }\n\n  onScreenUpdate(parentRadius, parentWidth, parentX, parentY) {\n    this.parentRadius = parentRadius;\n    this.parentWidth = parentWidth;\n    this.parentX = parentX;\n    this.parentY = parentY;\n  }\n\n  update(sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    this._sizeScaler = !this._visible ? 0 : sizeScaler; // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n\n    this._x = this.parentRadius * Math.cos(radLocation) + this.parentX;\n    this._y = this.parentRadius * Math.sin(radLocation) + this.parentY; // drawArc() radius and stroke width\n\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = this.parentWidth / 2 * this._sizeScaler;\n    this.drawnPortRadius = Number(this.portRadius); // wobble the port's radius, if `touchedPort` is from the other circle\n\n    if (this.isPotentialConnection()) {\n      this.wobbleCounter = (this.wobbleCounter + portDefaults.wobbleStep) % utils.PI2;\n      const wobbleMaxSize = portDefaults.wobbleScaler * this.portRadius;\n      this.drawnPortRadius += Math.sin(this.wobbleCounter) * wobbleMaxSize;\n    } // text settings\n\n\n    this.textOffset = this.parentRadius - this.parentWidth / 2 - this.lineWidth;\n    this.fontSize = this._sizeScaler * this.parentWidth * portDefaults.fontSizeScaler;\n  }\n\n  draw() {\n    ;\n\n    if (this._visible) {\n      this.context.save();\n      utils.drawCircle(this.context, 0, this.parentRadius, this.drawnPortRadius, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.context.restore();\n    }\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n\n    if (this._x < this.parentX) {\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    } else {\n      this.context.textAlign = 'right';\n    }\n\n    this.context.font = utils.font(this.fontSize);\n\n    if (this.isTouched() || this.isHovered()) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    } else {\n      this.context.fillStyle = this.fillStyle;\n    }\n\n    this.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isUserTouching(x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    console.log(this._x, this._y, x, y);\n    console.log(dist, this._visible);\n\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleScaler","lineWidthScaler","minSizeScaler","fillTextFontSizeScaler","fontSizeScaler","Port","constructor","params","parent","type","index","color","context","_parent","_type","_index","_name","connections","_x","_y","textOffset","undefined","_visible","_sizeScaler","parentX","parentY","parentRadius","parentWidth","wobbleCounter","Math","random","PI2","portRadius","drawnPortRadius","lineWidth","strokeStyle","colors","background","fillStyle","highlightedFillStyle","white","visible","x","y","name","radius","sizeScaler","isTouched","Boolean","touchedPort","isPotentialConnection","isHovered","hoveredPort","onScreenUpdate","update","radLocation","isVisible","cos","sin","floor","Number","wobbleMaxSize","fontSize","draw","save","drawCircle","restore","drawName","translate","textAlign","rotate","PI","font","fillText","isUserTouching","dist","getDistance","console","log"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleScaler: 0.1,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25, // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor (params, parent, type, index, color) {\n    this.params = params;\n    this.context = this.params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n    this.textOffset = undefined;\n\n    this._visible = false;\n    this._sizeScaler = 0.0;\n\n    this.parentX = 0;\n    this.parentY = 0;\n    this.parentRadius = undefined;\n    this.parentWidth = undefined;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.portRadius = undefined;\n    this.drawnPortRadius = undefined;\n    this.lineWidth = undefined;\n\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = color;\n    this.highlightedFillStyle = utils.colors.white();\n  }\n\n  // GETTERS\n\n  get visible () { return this._visible }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get name () { return this._name; }\n\n  get index () { return this._index; }\n\n  get type () { return this._type; }\n\n  get parent () { return this._parent; }\n\n  get radius () { return this.portRadius; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set name (name) { this._name = name; }\n\n  isTouched () {\n    return Boolean(this.params.touchedPort === this);\n  }\n\n  isPotentialConnection () {\n    return Boolean(this.params.touchedPort && this.params.touchedPort.type !== this._type);\n  }\n\n  isHovered () {\n    return Boolean(this.params.hoveredPort === this);\n  }\n\n  onScreenUpdate (parentRadius, parentWidth, parentX, parentY) {\n    this.parentRadius = parentRadius;\n    this.parentWidth = parentWidth;\n    this.parentX = parentX;\n    this.parentY = parentY;\n  }\n\n  update (sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    this._sizeScaler = !this._visible ? 0 : sizeScaler;\n    // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n    this._x = this.parentRadius * Math.cos(radLocation) + this.parentX;\n    this._y = this.parentRadius * Math.sin(radLocation) + this.parentY;\n    // drawArc() radius and stroke width\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = (this.parentWidth / 2) * this._sizeScaler;\n    this.drawnPortRadius = Number(this.portRadius);\n    // wobble the port's radius, if `touchedPort` is from the other circle\n    if(this.isPotentialConnection()) {\n      this.wobbleCounter = (this.wobbleCounter + portDefaults.wobbleStep) % utils.PI2;\n      const wobbleMaxSize = portDefaults.wobbleScaler * this.portRadius;\n      this.drawnPortRadius += Math.sin(this.wobbleCounter) * wobbleMaxSize;\n    }\n    // text settings\n    this.textOffset = (this.parentRadius - (this.parentWidth / 2)) - this.lineWidth;\n    this.fontSize = this._sizeScaler * this.parentWidth * portDefaults.fontSizeScaler;\n  }\n\n  draw () {;\n    if(this._visible){\n      this.context.save();\n      utils.drawCircle(\n        this.context,\n        0, this.parentRadius,\n        this.drawnPortRadius, this.lineWidth,\n        this.strokeStyle, this.fillStyle\n      )\n      this.context.restore();\n    }\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n    if(this._x < this.parentX){\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    }\n    else{\n      this.context.textAlign = 'right';\n    }\n    this.context.font = utils.font(this.fontSize);\n    if(this.isTouched() || this.isHovered()) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    }\n    else {\n      this.context.fillStyle = this.fillStyle;\n    }\n    this.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isUserTouching (x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    console.log(this._x, this._y, x, y)\n    console.log(dist, this._visible)\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}