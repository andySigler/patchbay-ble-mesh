{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params, this.createConnection, this.deleteConnection);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, outputIndex, inputID, inputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  deleteConnection(outputID, outputIndex, inputID, inputIndex) {\n    const name = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","createConnection","deleteConnection","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","update","i","connections","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","touchedPort","touchCircleThickness","screenSize","touchedLineWidth","Math","sin","wobbleCounter","circleRadius","drawArc","x","y","PI2","colors","white","drawLine","green","hoveredPort","hoveredCircleWidth","size","setSize","width","height","fillStyle","background","fillRect","outputID","outputIndex","inputID","inputIndex","tempName","generateName","outPort","getPort","inPort","newConnection","addConnection","exists","name","eraseNodeFromConnections","id","n","conn","parent","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(\n      this.params, this.createConnection, this.deleteConnection\n    );\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, outputIndex, inputID, inputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  deleteConnection (outputID, outputIndex, inputID, inputIndex) {\n    const name = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}