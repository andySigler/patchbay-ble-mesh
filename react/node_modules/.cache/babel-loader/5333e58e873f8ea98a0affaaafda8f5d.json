{"ast":null,"code":"const appParamsDefaults = {\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9\n};\n\nclass AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor(context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  addConnection(name, connection) {\n    this._connections[name] = connection;\n  }\n\n  deleteConnection(index) {//\n  }\n\n  getPort(parentID, portID, type) {\n    const circle = type === this.inType ? this.inCircle : this.outCircle;\n\n    for (let i = 0; i < circle.arcs.length; i++) {\n      if (circle.arcs[i].id === parentID) {\n        return circle.arcs[i].ports[portID];\n      }\n    }\n\n    return undefined;\n  } // GETTERS\n\n\n  get testingGUI() {\n    return this._testingGUI;\n  }\n\n  get inCircle() {\n    return this._inCircle;\n  }\n\n  get outCircle() {\n    return this._outCircle;\n  }\n\n  get connections() {\n    return this._connections;\n  }\n\n  get inType() {\n    return this._inType;\n  }\n\n  get outType() {\n    return this._outType;\n  }\n\n  get deleteType() {\n    return this._deleteType;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get middleX() {\n    return this._middleX;\n  }\n\n  get middleY() {\n    return this._middleY;\n  }\n\n  get scaler() {\n    return this._scaler;\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  } // SETTERS\n\n\n  set scaler(newVal) {\n    this._scaler = newVal;\n  }\n\n  set touchedPort(newPort) {\n    this._touchedPort = newPort;\n  }\n\n  set hoveredPort(newPort) {\n    this._hoveredPort = newPort;\n  }\n\n  set inCircle(circle) {\n    this._inCircle = circle;\n  }\n\n  set outCircle(circle) {\n    this._outCircle = circle;\n  }\n\n  set width(newVal) {\n    this._width = newVal;\n    this._middleX = this._width / 2;\n    this.updateScaler();\n  }\n\n  set height(newVal) {\n    this._height = newVal;\n    this._middleY = this._height / 2;\n    this.updateScaler();\n  }\n\n  updateScaler() {\n    this._scaler = Math.min(this._width, this._height * appParamsDefaults.globalScalerHeightMultiplier);\n    this._scaler *= appParamsDefaults.globalScalerMultiplier;\n\n    if (this._width < this._height) {\n      var Xoffset = theWidth * .2;\n      var Yoffset = theHeight * 0.2;\n      inCircle.centerX = middleX - Xoffset;\n      outCircle.centerX = middleX + Xoffset;\n      inCircle.centerY = middleY - Yoffset;\n      outCircle.centerY = middleY + Yoffset;\n    } else {\n      var Xoffset = usedSize * .3;\n      var Yoffset = theHeight * 0.1;\n      inCircle.centerX = middleX - Xoffset;\n      outCircle.centerX = middleX + Xoffset;\n      inCircle.centerY = middleY - Yoffset;\n      outCircle.centerY = middleY + Yoffset;\n    }\n  }\n\n}\n\nexport { AppParams };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/AppParams.js"],"names":["appParamsDefaults","globalScalerHeightMultiplier","globalScalerMultiplier","AppParams","constructor","context","_context","_width","_height","_middleX","_middleY","_scaler","_touchedPort","undefined","_hoveredPort","_inType","_outType","_deleteType","_connections","_inCircle","_outCircle","_testingGUI","addConnection","name","connection","deleteConnection","index","getPort","parentID","portID","type","circle","inType","inCircle","outCircle","i","arcs","length","id","ports","testingGUI","connections","outType","deleteType","width","height","middleX","middleY","scaler","touchedPort","hoveredPort","newVal","newPort","updateScaler","Math","min","Xoffset","theWidth","Yoffset","theHeight","centerX","centerY","usedSize"],"mappings":"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","sourcesContent":["const appParamsDefaults = {\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9\n};\n\nclass AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor (context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._scaler = 1; // previously known as `usedSize`\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  addConnection (name, connection) {\n    this._connections[name] = connection;\n  }\n\n  deleteConnection (index) {\n    //\n  }\n\n  getPort (parentID, portID, type) {\n    const circle = type === this.inType ? this.inCircle : this.outCircle;\n    for (let i = 0; i < circle.arcs.length; i++) {\n      if (circle.arcs[i].id === parentID) {\n        return circle.arcs[i].ports[portID];\n      }\n    }\n    return undefined;\n  }\n\n  // GETTERS\n\n  get testingGUI () { return this._testingGUI; }\n\n  get inCircle () { return this._inCircle; }\n\n  get outCircle () { return this._outCircle; }\n\n  get connections () { return this._connections; }\n\n  get inType () { return this._inType; }\n\n  get outType () { return this._outType; }\n\n  get deleteType () { return this._deleteType; }\n\n  get context () { return this._context; }\n\n  get width () { return this._width; }\n\n  get height () { return this._height; }\n\n  get middleX () { return this._middleX; }\n\n  get middleY () { return this._middleY; }\n\n  get scaler () { return this._scaler; }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  // SETTERS\n\n  set scaler (newVal) { this._scaler = newVal; }\n\n  set touchedPort (newPort) { this._touchedPort = newPort; }\n\n  set hoveredPort (newPort) { this._hoveredPort = newPort; }\n\n  set inCircle (circle) { this._inCircle = circle; }\n\n  set outCircle (circle) { this._outCircle = circle; }\n\n  set width (newVal) {\n    this._width = newVal;\n    this._middleX = this._width / 2;\n    this.updateScaler();\n  }\n\n  set height (newVal) {\n    this._height = newVal;\n    this._middleY = this._height / 2;\n    this.updateScaler();\n  }\n\n  updateScaler () {\n    this._scaler = Math.min(\n      this._width,\n      this._height * appParamsDefaults.globalScalerHeightMultiplier\n    );\n    this._scaler *= appParamsDefaults.globalScalerMultiplier;\n    if(this._width < this._height){\n      var Xoffset = theWidth*.2;\n      var Yoffset = theHeight*0.2;\n      inCircle.centerX = middleX-Xoffset;\n      outCircle.centerX = middleX+Xoffset;\n      inCircle.centerY = middleY-Yoffset;\n      outCircle.centerY = middleY+Yoffset;\n    }\n    else{\n      var Xoffset = usedSize*.3;\n      var Yoffset = theHeight*0.1;\n      inCircle.centerX = middleX-Xoffset;\n      outCircle.centerX = middleX+Xoffset;\n      inCircle.centerY = middleY-Yoffset;\n      outCircle.centerY = middleY+Yoffset;\n    }\n  }\n}\n\nexport { AppParams }\n"]},"metadata":{},"sourceType":"module"}