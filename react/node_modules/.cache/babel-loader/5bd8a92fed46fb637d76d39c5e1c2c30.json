{"ast":null,"code":"import * as utils from './DrawUtils';\nconst testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes(params) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingGUI_Nodes.length);\n\n  for (let index = 0; index < testingGUI_Nodes.length; index++) {\n    const i = (index + startingIndex) % testingGUI_Nodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    params.outCircle.addArc(testingGUI_Nodes[i].name, color, i + 2); // ID ???\n\n    params.inCircle.addArc(testingGUI_Nodes[i].name, color, i + 2);\n    var rOutputs = testingGUI_Nodes[i].outputs.length;\n\n    for (var o = 0; o < rOutputs; o++) {\n      outCircle.arcs[outCircle.arcs.length - 1].addPort(o);\n      outCircle.arcs[outCircle.arcs.length - 1].ports[o].name = testingGUI_Nodes[i].outputs[o];\n      outCircle.arcs[outCircle.arcs.length - 1].paletteIndex = rColorIndex;\n    }\n\n    var rInputs = testingGUI_Nodes[i].inputs.length;\n\n    for (var o = 0; o < rInputs; o++) {\n      inCircle.arcs[inCircle.arcs.length - 1].addPort(o);\n      inCircle.arcs[inCircle.arcs.length - 1].ports[o].name = testingGUI_Nodes[i].inputs[o];\n      inCircle.arcs[inCircle.arcs.length - 1].paletteIndex = rColorIndex;\n    }\n  }\n\n  for (var c = 0; c < inCircle.arcs.length; c++) {\n    var inArc = c;\n\n    if (inCircle.arcs[inArc].ports.length > 0) {\n      for (var d = 0; d < 20; d++) {\n        var outArc = Math.floor(Math.random() * outCircle.arcs.length);\n\n        if (outCircle.arcs[outArc].ports.length > 0) {\n          var inPort = Math.floor(Math.random() * inCircle.arcs[inArc].ports.length);\n          var outPort = Math.floor(Math.random() * outCircle.arcs[outArc].ports.length);\n          sendRoute(outCircle.arcs[outArc].id, inCircle.arcs[inArc].id, inPort, outPort);\n          console.log('port made');\n        }\n      }\n    }\n  }\n}\n\nexport { testingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/TestParams.js"],"names":["utils","testingNodes","makeTestingNodes","params","startingIndex","Math","floor","random","testingGUI_Nodes","length","index","i","rColorIndex","colors","palette","color","outCircle","addArc","name","inCircle","rOutputs","outputs","o","arcs","addPort","ports","paletteIndex","rInputs","inputs","c","inArc","d","outArc","inPort","outPort","sendRoute","id","console","log"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes(params) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingGUI_Nodes.length);\n  for (let index = 0; index < testingGUI_Nodes.length; index++) {\n    const i = (index + startingIndex) % testingGUI_Nodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    params.outCircle.addArc(testingGUI_Nodes[i].name, color, i + 2); // ID ???\n    params.inCircle.addArc(testingGUI_Nodes[i].name, color, i + 2);\n\n    var rOutputs = testingGUI_Nodes[i].outputs.length;\n    for (var o=0;o<rOutputs;o++) {\n        outCircle.arcs[outCircle.arcs.length-1].addPort(o);\n        outCircle.arcs[outCircle.arcs.length-1].ports[o].name = testingGUI_Nodes[i].outputs[o];\n        outCircle.arcs[outCircle.arcs.length-1].paletteIndex = rColorIndex;\n    }\n\n    var rInputs = testingGUI_Nodes[i].inputs.length;\n    for (var o=0;o<rInputs;o++) {\n        inCircle.arcs[inCircle.arcs.length-1].addPort(o);\n        inCircle.arcs[inCircle.arcs.length-1].ports[o].name = testingGUI_Nodes[i].inputs[o];\n        inCircle.arcs[inCircle.arcs.length-1].paletteIndex = rColorIndex;\n    }\n  }\n\n  for (var c=0;c<inCircle.arcs.length;c++) {\n    var inArc = c;\n    if(inCircle.arcs[inArc].ports.length>0) {\n      for (var d=0;d<20;d++) {\n        var outArc = Math.floor(Math.random()*outCircle.arcs.length);\n        if(outCircle.arcs[outArc].ports.length>0) {\n          var inPort = Math.floor(Math.random()*inCircle.arcs[inArc].ports.length);\n          var outPort = Math.floor(Math.random()*outCircle.arcs[outArc].ports.length);\n          sendRoute(outCircle.arcs[outArc].id,inCircle.arcs[inArc].id,inPort,outPort);\n          console.log('port made');\n        }\n      }\n    }\n  }\n}\n\nexport { testingNodes }\n"]},"metadata":{},"sourceType":"module"}