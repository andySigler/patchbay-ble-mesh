{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/patchbay-react/patchbay-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nfunction drawCircle(context, color, x, y) {\n  context.strokeStyle = color;\n  context.lineWidth = 5; // hard-coded width\n\n  context.beginPath();\n  context.arc(x, y, 30, 0, Math.PI * 2, false); // hard-coded radius\n\n  context.closePath();\n  context.stroke();\n}\n\nfunction updateBouncingCircleCoords(canvas, pos, step) {\n  pos.x += step.x;\n\n  if (pos.x < 0 || pos.x > canvas.width) {\n    step.x *= -1;\n    pos.x += step.x;\n  }\n\n  pos.y += step.y;\n\n  if (pos.y < 0 || pos.y > canvas.height) {\n    step.y *= -1;\n    pos.y += step.y;\n  }\n\n  return [pos, step];\n}\n\nfunction drawLoop(canvas, context, pos, step) {\n  var _updateBouncingCircle = updateBouncingCircleCoords(canvas, pos, step);\n\n  var _updateBouncingCircle2 = _slicedToArray(_updateBouncingCircle, 2);\n\n  pos = _updateBouncingCircle2[0];\n  step = _updateBouncingCircle2[1];\n  context.save();\n  context.fillStyle = 'gray';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  drawCircle(context, 'blue', pos.x, pos.y);\n  drawCircle(context, 'red', canvas.width / 2, canvas.height / 2);\n  context.restore();\n  requestAnimationFrame(() => drawLoop(canvas, context, pos, step));\n}\n\nexport default class App extends React.Component {\n  initCanvas(c) {\n    const canvas = c;\n    const pos = {\n      x: 0,\n      y: 0\n    };\n    const step = {\n      x: 5,\n      y: 5\n    };\n    pos.x = canvas.width / 2;\n    pos.y = canvas.height / 2;\n    context = canvas.getContext('2d');\n    requestAnimationFrame(() => drawLoop(canvas, context, pos, step));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      width: \"300\",\n      height: \"300\",\n      ref: this.initCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n} // class App extends React.Component {\n//   render() {\n//     return <div>\n//       <Animation></Animation>\n//     </div>;\n//   }\n// }\n// class Animation extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { angle: 0 };\n//     this.updateAnimationState = this.updateAnimationState.bind(this);\n//   }\n//   componentDidMount() {\n//     this.rAF = requestAnimationFrame(this.updateAnimationState);\n//   }\n//   updateAnimationState() {\n//     this.setState(prevState => ({ angle: prevState.angle + 1 }));\n//     this.rAF = requestAnimationFrame(this.updateAnimationState);\n//   }\n//   componentWillUnmount() {\n//     cancelAnimationFrame(this.rAF);\n//   }\n//   render() {\n//     return <Canvas angle={this.state.angle} />\n//   }\n// }\n// class Canvas extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.saveContext = this.saveContext.bind(this);\n//   }\n//   saveContext(ctx) {\n//     this.ctx = ctx;\n//   }\n//   componentDidUpdate() {\n//     const {angle} = this.props;\n//     const width = this.ctx.canvas.width;\n//     const height = this.ctx.canvas.height;\n//     this.ctx.save();\n//     this.ctx.beginPath();\n//     this.ctx.clearRect(0, 0, width, height);\n//     this.ctx.translate(width/2, height/2 );\n//     this.ctx.rotate(angle * Math.PI / 180);\n//     this.ctx.fillStyle = '#4397AC';\n//     this.ctx.fillRect(-width/4, -height/4, width/2, height/2);\n//     this.ctx.restore();\n//   }\n//   render() {\n//     return <PureCanvas contextRef={this.saveContext}></PureCanvas>;\n//   }\n// }\n// class PureCanvas extends React.Component {\n//   shouldComponentUpdate() { return false; }\n//   render() {\n//     return (\n//       <canvas width=\"300\" height=\"300\"\n//         ref={node => node ? this.props.contextRef(node.getContext('2d')) : null}\n//       />\n//     )\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js"],"names":["React","drawCircle","context","color","x","y","strokeStyle","lineWidth","beginPath","arc","Math","PI","closePath","stroke","updateBouncingCircleCoords","canvas","pos","step","width","height","drawLoop","save","fillStyle","fillRect","restore","requestAnimationFrame","App","Component","initCanvas","c","getContext","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction drawCircle(context, color, x, y) {\n  context.strokeStyle = color;\n  context.lineWidth = 5; // hard-coded width\n  context.beginPath();\n  context.arc(x, y, 30, 0, Math.PI * 2, false);  // hard-coded radius\n  context.closePath();\n  context.stroke();\n}\n\n\nfunction updateBouncingCircleCoords(canvas, pos, step) {\n  pos.x += step.x;\n  if (pos.x < 0 || pos.x > canvas.width) {\n    step.x *= -1;\n    pos.x += step.x;\n  }\n  pos.y += step.y;\n  if (pos.y < 0 || pos.y > canvas.height) {\n    step.y *= -1;\n    pos.y += step.y;\n  }\n  return [pos, step]\n}\n\n\nfunction drawLoop(canvas, context, pos, step) {\n  [pos, step] = updateBouncingCircleCoords(canvas, pos, step);\n  context.save();\n  context.fillStyle = 'gray';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  drawCircle(context, 'blue', pos.x, pos.y);\n  drawCircle(context, 'red', canvas.width / 2, canvas.height / 2);\n  context.restore();\n  requestAnimationFrame(() => drawLoop(canvas, context, pos, step));\n}\n\n\nexport default class App extends React.Component {\n\n  initCanvas(c) {\n    const canvas = c\n    const pos = {x: 0, y: 0};\n    const step = {x: 5, y: 5};\n    pos.x = canvas.width / 2;\n    pos.y = canvas.height / 2;\n    context = canvas.getContext('2d');\n    requestAnimationFrame(() => drawLoop(canvas, context, pos, step));\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas width=\"300\" height=\"300\" ref={this.initCanvas}/>\n      </div>\n    );\n  }\n}\n\n// class App extends React.Component {\n//   render() {\n//     return <div>\n//       <Animation></Animation>\n//     </div>;\n//   }\n// }\n\n// class Animation extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { angle: 0 };\n//     this.updateAnimationState = this.updateAnimationState.bind(this);\n//   }\n\n//   componentDidMount() {\n//     this.rAF = requestAnimationFrame(this.updateAnimationState);\n//   }\n\n//   updateAnimationState() {\n//     this.setState(prevState => ({ angle: prevState.angle + 1 }));\n//     this.rAF = requestAnimationFrame(this.updateAnimationState);\n//   }\n\n//   componentWillUnmount() {\n//     cancelAnimationFrame(this.rAF);\n//   }\n\n//   render() {\n//     return <Canvas angle={this.state.angle} />\n//   }\n// }\n\n// class Canvas extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.saveContext = this.saveContext.bind(this);\n//   }\n\n//   saveContext(ctx) {\n//     this.ctx = ctx;\n//   }\n\n//   componentDidUpdate() {\n//     const {angle} = this.props;\n//     const width = this.ctx.canvas.width;\n//     const height = this.ctx.canvas.height;\n//     this.ctx.save();\n//     this.ctx.beginPath();\n//     this.ctx.clearRect(0, 0, width, height);\n//     this.ctx.translate(width/2, height/2 );\n//     this.ctx.rotate(angle * Math.PI / 180);\n//     this.ctx.fillStyle = '#4397AC';\n//     this.ctx.fillRect(-width/4, -height/4, width/2, height/2);\n//     this.ctx.restore();\n//   }\n\n//   render() {\n//     return <PureCanvas contextRef={this.saveContext}></PureCanvas>;\n//   }\n// }\n\n// class PureCanvas extends React.Component {\n//   shouldComponentUpdate() { return false; }\n\n//   render() {\n//     return (\n//       <canvas width=\"300\" height=\"300\"\n//         ref={node => node ? this.props.contextRef(node.getContext('2d')) : null}\n//       />\n//     )\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}