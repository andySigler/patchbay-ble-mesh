{"ast":null,"code":"import * as utils from './PatchbayUtils';\nimport { AppParams } from './AppParams';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.context = context;\n    this.connections = {};\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n    this.inCircle = this.createCircle(context, utils.inType);\n    this.outCircle = this.createCircle(context, utils.outType);\n    this.finger = this.createFinger();\n    this.width = undefined;\n    this.height = undefined;\n    this.middleX = undefined;\n    this.middleY = undefined;\n    this.screenSize = undefined;\n    this.reqAnimFrame = undefined;\n  }\n\n  createCircle(type) {\n    return new Circle(context, type, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness, () => this.touchedPort, () => this.hoveredPort);\n  }\n\n  createFinger() {\n    return new Finger(this.inCircle, this.outCircle, this.connections, (inPort, outPort) => this.createAndSaveConnection(inPort, outPort), conn => this.deleteConnection(conn), () => this.touchedPort, () => this.hoveredPort, port => {\n      this.touchedPort = port;\n    }, port => {\n      this.hoveredPort = port;\n    });\n  }\n\n  setSize(width, height) {\n    if (width) this.width = width;\n    if (height) this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize() {\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n\n    for (let i in this.connections) {\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables() {\n    this.middleX = this.width / 2;\n    this.middleY = this.height / 2;\n    this.screenSize = Math.min(this.width, this.height * patchbayDefaults.globalScalerHeightMultiplier);\n    this.screenSize *= patchbayDefaults.globalScalerMultiplier;\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = this.middleX - xOffset;\n    this.outCircle.x = this.middleX + xOffset;\n    this.inCircle.y = this.middleY - yOffset;\n    this.outCircle.y = this.middleY + yOffset;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n\n    for (let i in this.connections) {\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n\n    for (let i in this.connections) {\n      this.connections[i].draw();\n    }\n\n    const circleRadius = this.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.touchedPort) {\n      return;\n    }\n\n    this.context.save();\n    utils.drawArc(this.context, this.touchedPort.x, this.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.touchedPort) {\n      return;\n    }\n\n    let touchedLineWidth = Math.sin(this.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.context.save();\n    utils.drawLine(this.context, this.touchedPort.x, this.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.context.save();\n    utils.drawArc(this.context, this.touchedPort.x, this.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.hoveredPort) {\n      return;\n    }\n\n    this.context.save();\n    utils.drawArc(this.context, this.hoveredPort.x, this.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.green(), undefined);\n    this.context.restore();\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection(inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection(connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection(conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName(name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Circle","Connection","Finger","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","globalScalerHeightMultiplier","globalScalerMultiplier","circleCenterXOffsetScaler","circleCenterYOffsetScaler","Patchbay","constructor","context","connections","touchedPort","undefined","hoveredPort","inCircle","createCircle","inType","outCircle","outType","finger","createFinger","width","height","middleX","middleY","screenSize","reqAnimFrame","type","inPort","outPort","createAndSaveConnection","conn","deleteConnection","port","setSize","updateScreenVariables","adjustChildrenToScreenSize","adjustToScreenSize","i","Math","min","xOffset","yOffset","x","y","drawLoop","cancelAnimationFrame","update","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","drawArc","PI2","colors","white","touchedLineWidth","sin","wobbleCounter","drawLine","green","fillStyle","background","fillRect","saveConnection","createConnection","connection","name","deleteConnectionByName","handleUserEvent","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { AppParams } from './AppParams'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\nconst patchbayDefaults = {\n  tempThickness: 0.075,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.context = context;\n\n    this.connections = {};\n\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n\n    this.inCircle = this.createCircle(context, utils.inType);\n    this.outCircle = this.createCircle(context, utils.outType);\n    this.finger = this.createFinger();\n\n    this.width = undefined;\n    this.height = undefined;\n    this.middleX = undefined;\n    this.middleY = undefined;\n    this.screenSize = undefined;\n\n    this.reqAnimFrame = undefined;\n  }\n\n  createCircle (type) {\n    return new Circle(\n      context,\n      type,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness,\n      () => this.touchedPort,\n      () => this.hoveredPort\n    );\n  }\n\n  createFinger () {\n    return new Finger(\n      this.inCircle,\n      this.outCircle,\n      this.connections,\n      (inPort, outPort) => this.createAndSaveConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn),\n      () => this.touchedPort,\n      () => this.hoveredPort,\n      (port) => { this.touchedPort = port },\n      (port) => { this.hoveredPort = port }\n    );\n  }\n\n  setSize (width, height) {\n    if (width) this.width = width;\n    if (height) this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize () {\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n    for(let i in this.connections){\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables () {\n    this.middleX = this.width / 2;\n    this.middleY = this.height / 2;\n    this.screenSize = Math.min(\n      this.width,\n      this.height * patchbayDefaults.globalScalerHeightMultiplier\n    );\n    this.screenSize *= patchbayDefaults.globalScalerMultiplier;\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = this.middleX - xOffset;\n    this.outCircle.x = this.middleX + xOffset;\n    this.inCircle.y = this.middleY - yOffset;\n    this.outCircle.y = this.middleY + yOffset;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n    for(let i in this.connections){\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n\n    for(let i in this.connections){\n      this.connections[i].draw();\n    }\n\n    const circleRadius = this.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.touchedPort) {\n      return;\n    }\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.touchedPort) {\n      return;\n    }\n    let touchedLineWidth = Math.sin(this.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.context.save();\n    utils.drawLine(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.hoveredPort) {\n      return;\n    }\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.hoveredPort.x, this.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.green(), undefined\n    );\n    this.context.restore();\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection (inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection (connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection (conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName (name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}