{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Arc } from './Arc';\nconst circleDefaults = {\n  autoStepTotal: 20,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  outPaddingScaler: 0.5,\n  isCloseToScaler: 0.4,\n  isTouchingPortScaler: 1.25,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor(params, type, radiusPercentage, thickness) {\n    this.params = params;\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n    this._centerX = 0;\n    this._centerY = 0;\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = circleDefaults.autoStepTotal;\n    this.autoStepCount = 0;\n    this.autoStepSize = 0;\n    this.targetArc = 0;\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n    this.animPercent = 0;\n    this.animDirection = -1;\n    this._touched = false;\n    this._type = type;\n    this._arcs = [];\n    this.arcEndPoints = [];\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n    this.padding = circleDefaults.padding;\n\n    if (this._type === this.params.outType) {\n      this.padding *= circleDefaults.outPaddingScaler;\n    }\n  } // GETTERS\n\n\n  get type() {\n    return this._type;\n  }\n\n  get highlighted() {\n    return this._highlighted;\n  }\n\n  get lineWidth() {\n    return this._lineWidth;\n  }\n\n  get arcOffset() {\n    return this._arcOffset;\n  }\n\n  get radiusPercentage() {\n    return this._radiusPercentage;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get arcs() {\n    return this._arcs;\n  }\n\n  get radiansMoved() {\n    return this._radiansMoved;\n  }\n\n  get centerX() {\n    return this._centerX;\n  }\n\n  get centerY() {\n    return this._centerY;\n  } // SETTERS\n\n\n  set radiansMoved(newVal) {\n    this._radiansMoved = newVal;\n  }\n\n  set centerX(newVal) {\n    this._centerX = newVal;\n  }\n\n  set centerY(newVal) {\n    this._centerY = newVal;\n  }\n\n  update(sizeScaler) {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    } else {\n      this.rotateDrag();\n    }\n\n    const totalArcs = this._arcs.length;\n\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * sizeScaler);\n\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = i === 0 ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n\n        this._arcs[arcIndex].update(points[0], points[1], this._radiusPercentage * sizeScaler, this._lineWidth, this.padding, this._highlighted[i]);\n      }\n    }\n  }\n\n  drawArcs() {\n    if (this._arcs.length > 0) {\n      this.params.context.save();\n      this.params.context.translate(this._centerX, this._centerY);\n      this.params.context.textAlign = 'center'; // draw the TYPE text in the center of the Circle\n\n      const typeFontSize = Math.floor(this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= this._type === this.params.inType ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.params.context.font = typeFontSize + 'px Helvetica';\n      this.params.context.fillStyle = utils.colors.black();\n      this.params.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler); // then draw the currently displayed arc's name\n\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc0FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.params.context.fillText(arc0.name, xOffset0, 0); // draw the next-in-line Arc's label (fading in/out)\n\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc1FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.params.context.fillText(arc1.name, xOffset1, 0);\n      console.log('arc0.sizeScaler:', arc0.sizeScaler);\n      console.log('arc1.sizeScaler:', arc1.sizeScaler); // now draw the actual child Arcs\n\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.params.context.restore();\n    }\n  }\n\n  drawNames() {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n\n    if (!this.params.touchedPort || this.params.touchedPort.type !== this.type) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].isSelected) {\n          this._arcs[i].drawName();\n        }\n      }\n    } else {\n      // the touched port is in this circle, so only draw it's name\n      const portStart = this.params.touchedPort.parent.start;\n      const portRotStep = this.params.touchedPort.parent.rotStep;\n      const portRelRadsToPort = portRotStep * this.params.touchedPort.index;\n      const rotateToTouchedPort = portStart + portRotStep / 2 + portRelRadsToPort;\n      this.params.context.save();\n      this.params.context.rotate(rotateToTouchedPort);\n      this.params.touchedPort.drawName();\n      this.params.context.restore();\n    }\n\n    this.params.context.restore();\n  }\n\n  drawPorts() {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n    const totalArcs = this._arcs.length;\n    const touchedPort = this.params.touchedPort;\n\n    for (let i = 0; i < totalArcs; i++) {\n      const sizeScaler = this._arcOffset === i ? 1 - this.animPercent : this.animPercent;\n\n      if (this._arcs[i].isSelected) {\n        // don't draw the port, if it's in this Circle, and doesn't belong to this Arc\n        if (touchedPort && touchedPort.type === this._type && touchedPort.parent !== this._arcs[i]) {\n          continue;\n        }\n\n        console.log('drawPorts: sizeScaler:', sizeScaler);\n\n        this._arcs[i].drawPorts(sizeScaler);\n      }\n    }\n\n    this.params.context.restore();\n  }\n\n  startAutoMove(newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let amountToMove = moveUp - this.animPercent;\n\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        amountToMove = moveDown + this._arcs.length + this.animPercent;\n      } else if (moveDown === 0) {\n        amountToMove = (moveDown - this.animPercent) % this._arcs.length;\n      } else {\n        amountToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n\n    this.autoStepSize = amountToMove / this.autoStepTotal;\n    this.autoStepCount = 0; // if (this._arcs[this._arcOffset]) this._arcs[this._arcOffset].sizeScaler = 0;\n    // this._arcOffset = newOffset;\n    // this.animPercent = 0;\n  }\n\n  updateAutoMoving() {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset -= this.animDirection;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 0;\n      } else if (this.animPercent < 0) {\n        this._arcOffset += this.animDirection;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 1 + this.animPercent;\n      }\n    } else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose(i) {\n    const realStart = this.arcEndPoints[i].start;\n    const realEnd = this.arcEndPoints[i].end;\n    let target = i + this.animDirection;\n\n    if (target < 0) {\n      target = this._arcs.length + target;\n    } else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    }\n\n    let startDiff = this.arcEndPoints[target].star - realStart;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n\n    if (i === 0 && this.animDirection === 1) {\n      startDiff = startDiff * -1;\n      endDiff = endDiff + utils.PI2;\n    } else if (i === 1 && this.animDirection === -1) {\n      startDiff = startDiff * -1;\n      endDiff = utils.PI2 + endDiff;\n    }\n\n    let currentStart = startDiff * this.animPercent + realStart;\n    let currentEnd = endDiff * this.animPercent + realEnd;\n\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    } else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    } else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: false\n      };\n    } else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: false,\n        1: true\n      };\n    }\n\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent(fingerX, fingerY, compRadian) {\n    for (let i in this._highlighted) {\n      if (this._highlighted[i]) {\n        const arcIndex = (i + this._arcOffset) % this._arcs.length;\n        let scaler = this.animPercent * circleDefaults.isTouchingPortScaler;\n\n        if (i === 0) {\n          scaler = 1 - scaler;\n        }\n\n        if (this._arcs[arcIndex].isTouchingPort(fingerX, fingerY, scaler)) {\n          this._touched = false;\n          return;\n        }\n      }\n    }\n\n    this._touched = true; // see which arc was touched\n\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (n === this._arcOffset && this._type === this.params.inType) {\n        compRadian += utils.PI2;\n      }\n\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag() {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = (utils.PI - this._radiansMoved % utils.PI) * -1;\n    }\n\n    if (this._radiansMoved < -utils.PI / 2) {\n      this._radiansMoved = utils.PI - Math.abs(this._radiansMoved) % utils.PI;\n    }\n\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - relativeMovement % 1;\n    } else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + relativeMovement % 1;\n    }\n\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      } else {\n        this.direction = 1;\n      }\n\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset -= this.animDirection;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 0;\n      } else if (this.animPercent < 0) {\n        this._arcOffset += this.animDirection;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 1 + this.animPercent;\n      }\n    }\n  }\n\n  addArc(name, color, id) {\n    const tempArc = new Arc(this.params, this, this._type, color, name, id, this._arcs.length);\n\n    this._arcs.push(tempArc);\n\n    this.updateDimensionStuff();\n  }\n\n  deleteArc(id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff() {\n    this.arcEndPoints = [];\n\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [{\n        'start': utils.PI / 2,\n        'end': utils.PI / 2\n      }];\n    } else if (this._arcs.length === 2) {\n      this.arcEndPoints = [{\n        'start': utils.PI,\n        'end': utils.PI2\n      }, {\n        'start': 0,\n        'end': utils.PI\n      }];\n    } else {\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo(x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = this._radiusPercentage * this.params.screenSize + w;\n    const innerRad = this._radiusPercentage * this.params.screenSize - w;\n\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n\n    return false;\n  }\n\n  tapEvent() {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered() {\n    this._touched = false;\n\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n\n      for (let n = 0; n < this._arcs[i].ports.length; n++) {\n        this._arcs[i].ports[n].touched = false;\n        this._arcs[i].ports[n].hovered = false;\n      }\n    }\n  }\n\n}\n\nexport { Circle };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Circle.js"],"names":["utils","Arc","circleDefaults","autoStepTotal","rotateFeedback","padding","PI","outPaddingScaler","isCloseToScaler","isTouchingPortScaler","highlightCuttoff","textXOffsetScaler","arcTextScaler","typeFontSizeScaler","labelOffsetYScaler","Circle","constructor","params","type","radiusPercentage","thickness","_radiusPercentage","relativeLineWidth","_lineWidth","undefined","_centerX","_centerY","_arcOffset","targetOffset","isAutoMoving","autoStepCount","autoStepSize","targetArc","_highlighted","animPercent","animDirection","_touched","_type","_arcs","arcEndPoints","_radiansMoved","outType","highlighted","lineWidth","arcOffset","touched","arcs","radiansMoved","centerX","centerY","newVal","update","sizeScaler","updateAutoMoving","rotateDrag","totalArcs","length","Math","floor","i","nonHighlightedIndex","arcIndex","points","transpose","drawArcs","context","save","translate","textAlign","typeFontSize","screenSize","inType","typeYOffset","font","fillStyle","colors","black","fillText","toUpperCase","arc0","arc0FontSize","xOffset0","color","min","name","arc1","arc1FontSize","xOffset1","console","log","drawArc","restore","drawNames","touchedPort","isSelected","drawName","portStart","parent","start","portRotStep","rotStep","portRelRadsToPort","index","rotateToTouchedPort","rotate","drawPorts","startAutoMove","newOffset","moveUp","moveDown","amountToMove","abs","realStart","realEnd","end","target","startDiff","star","endDiff","PI2","currentStart","currentEnd","mouseEvent","fingerX","fingerY","compRadian","scaler","isTouchingPort","n","relativeMovement","direction","animStep","addArc","id","tempArc","push","updateDimensionStuff","deleteArc","splice","smallerWidth","isCloseTo","x","y","distFromCenter","getDistance","w","outerRad","innerRad","tapEvent","clearTouchedHovered","ports","hovered"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Arc } from './Arc'\n\nconst circleDefaults = {\n  autoStepTotal: 20,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  outPaddingScaler: 0.5,\n  isCloseToScaler: 0.4,\n  isTouchingPortScaler: 1.25,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor (params, type, radiusPercentage, thickness) {\n    this.params = params;\n\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n\n    this._centerX = 0;\n    this._centerY = 0;\n\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = circleDefaults.autoStepTotal;\n    this.autoStepCount = 0;\n    this.autoStepSize = 0;\n    this.targetArc = 0;\n\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n\n    this.animPercent = 0;\n    this.animDirection = -1;\n\n    this._touched = false;\n\n    this._type = type;\n\n    this._arcs = [];\n\n    this.arcEndPoints = [];\n\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n\n    this.padding = circleDefaults.padding;\n    if (this._type === this.params.outType) {\n      this.padding *= circleDefaults.outPaddingScaler;\n    }\n  }\n\n  // GETTERS\n\n  get type () { return this._type; }\n\n  get highlighted () { return this._highlighted; }\n\n  get lineWidth () { return this._lineWidth; }\n\n  get arcOffset () { return this._arcOffset; }\n\n  get radiusPercentage () { return this._radiusPercentage; }\n\n  get touched () { return this._touched; }\n\n  get arcs () { return this._arcs; }\n\n  get radiansMoved () { return this._radiansMoved; }\n\n  get centerX () { return this._centerX; }\n\n  get centerY () { return this._centerY; }\n\n  // SETTERS\n\n  set radiansMoved (newVal) { this._radiansMoved = newVal; }\n\n  set centerX (newVal) { this._centerX = newVal; }\n\n  set centerY (newVal) { this._centerY = newVal; }\n\n  update (sizeScaler) {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    }\n    else {\n      this.rotateDrag();\n    }\n    const totalArcs = this._arcs.length;\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * sizeScaler);\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = (i === 0) ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n        this._arcs[arcIndex].update(\n          points[0],\n          points[1],\n          this._radiusPercentage * sizeScaler,\n          this._lineWidth,\n          this.padding,\n          this._highlighted[i]\n        );\n      }\n    }\n  }\n\n  drawArcs () {\n    if (this._arcs.length > 0) {\n      this.params.context.save();\n      this.params.context.translate(this._centerX, this._centerY);\n      this.params.context.textAlign = 'center';\n\n      // draw the TYPE text in the center of the Circle\n      const typeFontSize = Math.floor(\n        this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= (this._type === this.params.inType) ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.params.context.font = typeFontSize + 'px Helvetica';\n      this.params.context.fillStyle = utils.colors.black();\n      this.params.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler);\n\n      // then draw the currently displayed arc's name\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc0FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.params.context.fillText(arc0.name, xOffset0, 0);\n\n      // draw the next-in-line Arc's label (fading in/out)\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      this.params.context.font = arc1FontSize + 'px Helvetica';\n      this.params.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.params.context.fillText(arc1.name, xOffset1, 0);\n\n      console.log('arc0.sizeScaler:', arc0.sizeScaler);\n      console.log('arc1.sizeScaler:', arc1.sizeScaler);\n\n      // now draw the actual child Arcs\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.params.context.restore();\n    }\n  }\n\n  drawNames () {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n    if (!this.params.touchedPort || this.params.touchedPort.type !== this.type) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].isSelected) {\n          this._arcs[i].drawName();\n        }\n      }\n    }\n    else {\n      // the touched port is in this circle, so only draw it's name\n      const portStart = this.params.touchedPort.parent.start;\n      const portRotStep = this.params.touchedPort.parent.rotStep;\n      const portRelRadsToPort = portRotStep * this.params.touchedPort.index;\n      const rotateToTouchedPort = portStart + (portRotStep / 2) + portRelRadsToPort;\n      this.params.context.save();\n      this.params.context.rotate(rotateToTouchedPort);\n      this.params.touchedPort.drawName();\n      this.params.context.restore();\n    }\n    this.params.context.restore();\n  }\n\n  drawPorts () {\n    this.params.context.save();\n    this.params.context.translate(this._centerX, this._centerY);\n    const totalArcs = this._arcs.length;\n    const touchedPort = this.params.touchedPort;\n    for (let i = 0; i < totalArcs; i++) {\n      const sizeScaler = (this._arcOffset === i) ? 1 - this.animPercent : this.animPercent;\n      if (this._arcs[i].isSelected) {\n        // don't draw the port, if it's in this Circle, and doesn't belong to this Arc\n        if (touchedPort && touchedPort.type === this._type && touchedPort.parent !== this._arcs[i]) {\n          continue\n        }\n        console.log('drawPorts: sizeScaler:', sizeScaler)\n        this._arcs[i].drawPorts(sizeScaler);\n      }\n    }\n    this.params.context.restore();\n  }\n\n  startAutoMove (newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let amountToMove = moveUp - this.animPercent;\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        amountToMove = moveDown + this._arcs.length + this.animPercent;\n      }\n      else if (moveDown === 0) {\n        amountToMove = (moveDown - this.animPercent) % this._arcs.length;\n      }\n      else {\n        amountToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n    this.autoStepSize = amountToMove / this.autoStepTotal;\n    this.autoStepCount = 0;\n    // if (this._arcs[this._arcOffset]) this._arcs[this._arcOffset].sizeScaler = 0;\n    // this._arcOffset = newOffset;\n    // this.animPercent = 0;\n  }\n\n  updateAutoMoving () {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n      if (this.animPercent >= 1) {\n        this._arcOffset -= this.animDirection;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset<0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 0;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset += this.animDirection;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 1 + this.animPercent;\n      }\n    }\n    else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose (i) {\n    const realStart = this.arcEndPoints[i].start;\n    const realEnd = this.arcEndPoints[i].end;\n\n    let target = i + this.animDirection;\n    if (target < 0) {\n      target = this._arcs.length + target;\n    }\n    else if (target >= this._arcs.length) {\n      target = target%this._arcs.length;\n    }\n\n    let startDiff = this.arcEndPoints[target].star - realStart;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n    if (i === 0 && this.animDirection === 1) {\n      startDiff = startDiff * -1;\n      endDiff = endDiff + utils.PI2;\n    }\n    else if (i === 1 && this.animDirection === -1) {\n      startDiff = startDiff * -1;\n      endDiff = utils.PI2 + endDiff;\n    }\n\n    let currentStart = (startDiff * this.animPercent) + realStart;\n    let currentEnd = (endDiff * this.animPercent) + realEnd;\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    }\n    else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    }\n    else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: false\n      };\n    }\n    else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: false,\n        1: true\n      };\n    }\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent (fingerX, fingerY, compRadian) {\n    for (let i in this._highlighted) {\n      if (this._highlighted[i]) {\n        const arcIndex = (i + this._arcOffset) % this._arcs.length;\n        let scaler = this.animPercent * circleDefaults.isTouchingPortScaler;\n        if (i === 0) {\n          scaler = 1 - scaler;\n        }\n        if (this._arcs[arcIndex].isTouchingPort(fingerX, fingerY, scaler)) {\n          this._touched = false;\n          return;\n        }\n      }\n    }\n    this._touched = true;\n    // see which arc was touched\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (n === this._arcOffset && this._type === this.params.inType) {\n        compRadian += utils.PI2;\n      }\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag () {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = (utils.PI - (this._radiansMoved % utils.PI)) * -1;\n    }\n    if (this._radiansMoved <- utils.PI / 2) {\n      this._radiansMoved = (utils.PI - (Math.abs(this._radiansMoved) % utils.PI));\n    }\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - (relativeMovement % 1);\n    }\n    else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + (relativeMovement % 1);\n    }\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      }\n      else {\n        this.direction = 1;\n      }\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset -= this.animDirection;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 0;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset += this.animDirection;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 1 + this.animPercent;\n      }\n    }\n  }\n\n  addArc (name, color, id) {\n    const tempArc = new Arc(\n      this.params,\n      this,\n      this._type,\n      color,\n      name,\n      id,\n      this._arcs.length\n    );\n    this._arcs.push(tempArc);\n    this.updateDimensionStuff();\n  }\n\n  deleteArc (id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n        break;\n      }\n    }\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff () {\n    this.arcEndPoints = [];\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI / 2,\n          'end': utils.PI / 2\n        }\n      ];\n    }\n    else if (this._arcs.length === 2) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI,\n          'end': utils.PI2\n        },\n        {\n          'start': 0,\n          'end': utils.PI\n        },\n      ];\n    }\n    else{\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo (x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = (this._radiusPercentage * this.params.screenSize) + w;\n    const innerRad = (this._radiusPercentage * this.params.screenSize) - w;\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n    return false;\n  }\n\n  tapEvent () {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered () {\n    this._touched = false;\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n      for (let n = 0; n < this._arcs[i].ports.length; n++) {\n        this._arcs[i].ports[n].touched = false;\n        this._arcs[i].ports[n].hovered = false;\n      }\n    }\n  }\n}\n\nexport { Circle }\n"]},"metadata":{},"sourceType":"module"}