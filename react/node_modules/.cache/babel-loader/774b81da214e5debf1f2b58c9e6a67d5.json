{"ast":null,"code":"import * as utils from './DrawUtils';\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  deleteScaler: 0.4,\n  lineWidthScaler: 0.003,\n  lineWidthOpacityScaler: 2,\n  circleSizeOpacityScaler: 2,\n  opacityScaler: 1.5,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor(params, outPort, inPort, name) {\n    this.params = params;\n    this.name = name; // references to the parent Ports (in/out)\n\n    this.outPort = outPort;\n    this.inPort = inPort;\n    this.exists = true;\n    this._hovered = false;\n    this.x1 = undefined;\n    this.y1 = undefined;\n    this.x2 = undefined;\n    this.y2 = undefined;\n    this.stroke = undefined;\n    this.lineWidth = cordDefaults.width; // the location and size of the delete circle\n\n    this._deleteX = undefined;\n    this._deleteY = undefined;\n    this._deleteSize = this.inPort.size * cordDefaults.deleteScaler; // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n\n    this.wobbleCounter = Math.random() * Math.PI * 2;\n    this.wobbleStep = cordDefaults.wobbleStep;\n    this.wobbleAmount = cordDefaults.wobbleAmount;\n    this.circleSize = undefined;\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    return String(outPort.parent.id + '/' + inPort.parent.id + '__' + inPort.index + '/' + outPort.index);\n  }\n\n  get hovered() {\n    return this._hovered;\n  }\n\n  get deleteX() {\n    return this._deleteX;\n  }\n\n  get deleteY() {\n    return this._deleteY;\n  }\n\n  get deleteSize() {\n    return this._deleteSize;\n  }\n\n  update() {\n    // set the XY coordinates based on the parent Ports' locations\n    this.x1 = this.outPort.x;\n    this.y1 = this.outPort.y;\n    this.x2 = this.inPort.x;\n    this.y2 = this.inPort.y; // the coordinate where a deletion circle would be\n\n    this._deleteX = (this.x1 - this.x2) / 2 + this.x2;\n    this._deleteY = (this.y1 - this.y2) / 2 + this.y2; // incase the overall size has changed, update the size variables\n\n    this._deleteSize = this.inPort.size * cordDefaults.deleteScaler;\n    this.lineWidth = Math.max(this.params.scaler * cordDefaults.lineWidthScaler, 2); // increment the sinusoidal wobbling variable\n\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % (Math.PI * 2);\n    this.updateDrawSettings();\n  }\n\n  updateDrawSettings() {\n    // the visible flag is set by the Arc\n    if (this.outPort.visible && this.inPort.visible) {\n      // the opacity depends on the size of the parent ports' circles\n      const opacity = Math.min(this.outPort.sizeScaler, this.inPort.sizeScaler) * cordDefaults.opacityScaler; // that scaled opacity then controls all other variables for the line\n\n      this.lineWidth = Math.floor(this.lineWidth * opacity * cordDefaults.lineWidthOpacityScaler);\n      this.circleSize = Math.floor(this.lineWidth * opacity * cordDefaults.circleSizeOpacityScaler);\n      this.lineFill = utils.colors.white(opacity);\n      this.lineStroke = utils.colors.white(opacity);\n\n      if (this._hovered) {\n        this.lineStroke = utils.colors.red(opacity);\n        this.delCircleFill = utils.colors.white(opacity);\n        this.delCircleStroke = utils.colors.red(opacity);\n        const sineVal = this._deleteSize + Math.sin(this.wobbleCounter) * this.wobbleAmount;\n        this.delLineWidth = sineVal * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = sineVal * opacity * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler;\n      }\n    }\n  }\n\n  draw() {\n    if (this.outPort.visible && this.inPort.visible) {\n      // save the context state\n      this.params.context.save(); // draw the line, from the input port to the output port\n\n      utils.drawLine(this.params.context, this.x1, this.y1, this.x2, this.y2, this.lineWidth, this.lineStroke); // draw the two circles on top of that line, inside each port\n\n      utils.drawArc(this.params.context, this.x1, this.y1, this.circleSize, 0, utils.PI2, this.lineWidth, undefined, this.lineFill);\n      utils.drawArc(this.params.context, this.x2, this.y2, this.circleSize, 0, utils.PI2, this.lineWidth, undefined, this.lineFill); // restore the context state\n\n      this.params.context.restore();\n\n      if (this._hovered) {\n        // save the context's state\n        this.params.context.save(); // translate to where the delete circle is\n\n        this.params.context.translate(this._deleteX, this._deleteY); // draw the circle, with a fill and a stroke\n\n        utils.drawArc(this.params.context, 0, 0, this.wobbleSize, 0, utils.PI2, this.lineWidth, this.delCircleStroke, this.delCircleFill); // draw the two lines that make the X\n\n        this.params.context.rotate(utils.PI / 4);\n        utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke);\n        this.params.context.rotate(-utils.PI / 2);\n        utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke); // restore the context's state\n\n        this.params.context.restore();\n      }\n    }\n  }\n\n}\n\nexport { Connection };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Connection.js"],"names":["utils","cordDefaults","width","wobbleStep","wobbleAmount","deleteScaler","lineWidthScaler","lineWidthOpacityScaler","circleSizeOpacityScaler","opacityScaler","deleteLineWidthScaler","wobbleSizeScaler","wobbleLineLengthScaler","Connection","constructor","params","outPort","inPort","name","exists","_hovered","x1","undefined","y1","x2","y2","stroke","lineWidth","_deleteX","_deleteY","_deleteSize","size","wobbleCounter","Math","random","PI","circleSize","lineFill","lineStroke","delCircleFill","delCircleStroke","delLineWidth","wobbleSize","wobbleLineLength","generateName","String","parent","id","index","hovered","deleteX","deleteY","deleteSize","update","x","y","max","scaler","updateDrawSettings","visible","opacity","min","sizeScaler","floor","colors","white","red","sineVal","sin","draw","context","save","drawLine","drawArc","PI2","restore","translate","rotate"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  deleteScaler: 0.4,\n  lineWidthScaler: 0.003,\n  lineWidthOpacityScaler: 2,\n  circleSizeOpacityScaler: 2,\n  opacityScaler: 1.5,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor (params, outPort, inPort, name) {\n    this.params = params;\n    this.name = name;\n\n    // references to the parent Ports (in/out)\n    this.outPort = outPort;\n    this.inPort = inPort;\n\n    this.exists = true;\n    this._hovered = false;\n\n    this.x1 = undefined;\n    this.y1 = undefined;\n    this.x2 = undefined;\n    this.y2 = undefined;\n    this.stroke = undefined;\n    this.lineWidth = cordDefaults.width;\n\n    // the location and size of the delete circle\n    this._deleteX = undefined;\n    this._deleteY = undefined;\n    this._deleteSize = this.inPort.size * cordDefaults.deleteScaler;\n\n    // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n    this.wobbleCounter = Math.random() * Math.PI * 2;\n    this.wobbleStep = cordDefaults.wobbleStep;\n    this.wobbleAmount = cordDefaults.wobbleAmount;\n\n    this.circleSize = undefined;\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    return String(\n      outPort.parent.id + '/' + inPort.parent.id + '__' + inPort.index + '/' + outPort.index);\n  }\n\n  get hovered () { return this._hovered }\n\n  get deleteX () { return this._deleteX }\n\n  get deleteY () { return this._deleteY }\n\n  get deleteSize () { return this._deleteSize }\n\n  update () {\n    // set the XY coordinates based on the parent Ports' locations\n    this.x1 = this.outPort.x;\n    this.y1 = this.outPort.y;\n    this.x2 = this.inPort.x;\n    this.y2 = this.inPort.y;\n\n    // the coordinate where a deletion circle would be\n    this._deleteX = ((this.x1 - this.x2) / 2) + this.x2;\n    this._deleteY = ((this.y1 - this.y2) / 2) + this.y2;\n\n    // incase the overall size has changed, update the size variables\n    this._deleteSize = this.inPort.size * cordDefaults.deleteScaler;\n    this.lineWidth = Math.max(this.params.scaler * cordDefaults.lineWidthScaler, 2);\n\n    // increment the sinusoidal wobbling variable\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % (Math.PI * 2);\n\n    this.updateDrawSettings();\n  }\n\n  updateDrawSettings () {\n    // the visible flag is set by the Arc\n    if(this.outPort.visible && this.inPort.visible){\n      // the opacity depends on the size of the parent ports' circles\n      const opacity = Math.min(this.outPort.sizeScaler, this.inPort.sizeScaler) * cordDefaults.opacityScaler;\n      // that scaled opacity then controls all other variables for the line\n      this.lineWidth = Math.floor(this.lineWidth * opacity * cordDefaults.lineWidthOpacityScaler);\n      this.circleSize =  Math.floor(this.lineWidth * opacity * cordDefaults.circleSizeOpacityScaler);\n      this.lineFill = utils.colors.white(opacity);\n      this.lineStroke = utils.colors.white(opacity);\n      if(this._hovered) {\n        this.lineStroke = utils.colors.red(opacity);\n        this.delCircleFill = utils.colors.white(opacity);\n        this.delCircleStroke = utils.colors.red(opacity);\n        const sineVal = this._deleteSize + (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n        this.delLineWidth = sineVal * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = sineVal * opacity * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler;\n      }\n    }\n  }\n\n  draw () {\n    if(this.outPort.visible && this.inPort.visible){\n      // save the context state\n      this.params.context.save();\n      // draw the line, from the input port to the output port\n      utils.drawLine(\n        this.params.context,\n        this.x1, this.y1, this.x2, this.y2,\n        this.lineWidth, this.lineStroke\n      );\n      // draw the two circles on top of that line, inside each port\n      utils.drawArc(\n        this.params.context,\n        this.x1, this.y1,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, undefined, this.lineFill\n      )\n      utils.drawArc(\n        this.params.context,\n        this.x2, this.y2,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, undefined, this.lineFill\n      )\n      // restore the context state\n      this.params.context.restore();\n      if(this._hovered){\n        // save the context's state\n        this.params.context.save();\n\n        // translate to where the delete circle is\n        this.params.context.translate(this._deleteX, this._deleteY);\n        // draw the circle, with a fill and a stroke\n        utils.drawArc(\n          this.params.context,\n          0, 0,\n          this.wobbleSize, 0, utils.PI2,\n          this.lineWidth, this.delCircleStroke, this.delCircleFill\n        )\n        // draw the two lines that make the X\n        this.params.context.rotate(utils.PI / 4);\n        utils.drawLine(\n          this.params.context,\n          0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n          this.delLineWidth, this.delCircleStroke\n        );\n        this.params.context.rotate(-utils.PI / 2);\n        utils.drawLine(\n          this.params.context,\n          0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n          this.delLineWidth, this.delCircleStroke\n        );\n        // restore the context's state\n        this.params.context.restore();\n      }\n    }\n  }\n}\n\nexport { Connection }\n"]},"metadata":{},"sourceType":"module"}