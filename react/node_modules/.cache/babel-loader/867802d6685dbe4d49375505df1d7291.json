{"ast":null,"code":"const testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes() {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingGUI_Nodes.length) % testingGUI_Nodes.length;\n\n  for (var index = 0; index < testingGUI_Nodes.length; index++) {\n    var i = (index + startingIndex) % testingGUI_Nodes.length;\n    var rColorIndex = i % colorPalette.length;\n    var color = colorPalette[rColorIndex];\n    outCircle.addArc(testingGUI_Nodes[i].name, color, i + 2);\n    inCircle.addArc(testingGUI_Nodes[i].name, color, i + 2);\n    var rOutputs = testingGUI_Nodes[i].outputs.length;\n\n    for (var o = 0; o < rOutputs; o++) {\n      outCircle.arcs[outCircle.arcs.length - 1].addPort(o);\n      outCircle.arcs[outCircle.arcs.length - 1].ports[o].name = testingGUI_Nodes[i].outputs[o];\n      outCircle.arcs[outCircle.arcs.length - 1].paletteIndex = rColorIndex;\n    }\n\n    var rInputs = testingGUI_Nodes[i].inputs.length;\n\n    for (var o = 0; o < rInputs; o++) {\n      inCircle.arcs[inCircle.arcs.length - 1].addPort(o);\n      inCircle.arcs[inCircle.arcs.length - 1].ports[o].name = testingGUI_Nodes[i].inputs[o];\n      inCircle.arcs[inCircle.arcs.length - 1].paletteIndex = rColorIndex;\n    }\n  }\n\n  for (var c = 0; c < inCircle.arcs.length; c++) {\n    var inArc = c;\n\n    if (inCircle.arcs[inArc].ports.length > 0) {\n      for (var d = 0; d < 20; d++) {\n        var outArc = Math.floor(Math.random() * outCircle.arcs.length);\n\n        if (outCircle.arcs[outArc].ports.length > 0) {\n          var inPort = Math.floor(Math.random() * inCircle.arcs[inArc].ports.length);\n          var outPort = Math.floor(Math.random() * outCircle.arcs[outArc].ports.length);\n          sendRoute(outCircle.arcs[outArc].id, inCircle.arcs[inArc].id, inPort, outPort);\n          console.log('port made');\n        }\n      }\n    }\n  }\n}\n\nexport { testingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/TestParams.js"],"names":["testingNodes","makeTestingNodes","startingIndex","Math","floor","random","testingGUI_Nodes","length","index","i","rColorIndex","colorPalette","color","outCircle","addArc","name","inCircle","rOutputs","outputs","o","arcs","addPort","ports","paletteIndex","rInputs","inputs","c","inArc","d","outArc","inPort","outPort","sendRoute","id","console","log"],"mappings":"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","sourcesContent":["const testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes() {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingGUI_Nodes.length) % testingGUI_Nodes.length;\n  for (var index = 0; index < testingGUI_Nodes.length; index++) {\n    var i = (index+startingIndex)%testingGUI_Nodes.length;\n    var rColorIndex = i % colorPalette.length;\n    var color = colorPalette[rColorIndex];\n      outCircle.addArc(testingGUI_Nodes[i].name,color,i+2);\n      inCircle.addArc(testingGUI_Nodes[i].name,color,i+2);\n\n      var rOutputs =testingGUI_Nodes[i].outputs.length;\n      for (var o=0;o<rOutputs;o++) {\n          outCircle.arcs[outCircle.arcs.length-1].addPort(o);\n          outCircle.arcs[outCircle.arcs.length-1].ports[o].name = testingGUI_Nodes[i].outputs[o];\n          outCircle.arcs[outCircle.arcs.length-1].paletteIndex = rColorIndex;\n      }\n\n      var rInputs = testingGUI_Nodes[i].inputs.length;\n      for (var o=0;o<rInputs;o++) {\n          inCircle.arcs[inCircle.arcs.length-1].addPort(o);\n          inCircle.arcs[inCircle.arcs.length-1].ports[o].name = testingGUI_Nodes[i].inputs[o];\n          inCircle.arcs[inCircle.arcs.length-1].paletteIndex = rColorIndex;\n      }\n  }\n\n  for (var c=0;c<inCircle.arcs.length;c++) {\n    var inArc = c;\n    if(inCircle.arcs[inArc].ports.length>0) {\n      for (var d=0;d<20;d++) {\n        var outArc = Math.floor(Math.random()*outCircle.arcs.length);\n        if(outCircle.arcs[outArc].ports.length>0) {\n          var inPort = Math.floor(Math.random()*inCircle.arcs[inArc].ports.length);\n          var outPort = Math.floor(Math.random()*outCircle.arcs[outArc].ports.length);\n          sendRoute(outCircle.arcs[outArc].id,inCircle.arcs[inArc].id,inPort,outPort);\n          console.log('port made');\n        }\n      }\n    }\n  }\n}\n\nexport { testingNodes }\n"]},"metadata":{},"sourceType":"module"}