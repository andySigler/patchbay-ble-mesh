{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeScaler: 0.53,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.2,\n  minCircleSize: 1,\n  minStrokeWidth: 4,\n  fillTextFontSizeScaler: 0.2,\n  radOffsetScaler: 0.05,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor(params, parent, type, index) {\n    this.params = params;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this._touched = false;\n    this._hovered = false;\n    this.sizeScaler = 0;\n    this.circleRad;\n    this.size;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n    this.circleSize, this.lineWidth, this.strokeStyle, this.fillStyle;\n    this.shouldDraw = false;\n    this.radOffset; // the visible flag is used by Cords to determine if they should be shown\n\n    self._visible = false;\n  } // GETTERS\n\n\n  get visible() {\n    return self._visible;\n  }\n\n  get x() {\n    return self._x;\n  }\n\n  get y() {\n    return self._y;\n  }\n\n  get touched() {\n    return self._touched;\n  }\n\n  get hovered() {\n    return self._hovered;\n  }\n\n  get name() {\n    return self._name;\n  }\n\n  get index() {\n    return self._index;\n  }\n\n  get type() {\n    return self._type;\n  }\n\n  get parent() {\n    return self._parent;\n  } // SETTERS\n\n\n  set touched(state) {\n    self._touched = state;\n  }\n\n  set hovered(state) {\n    self._hovered = state;\n  }\n\n  set name(name) {\n    self._name = name;\n  }\n\n  update(rad, size, radLocation, isVisible) {\n    this.circleRad = rad;\n    this.size = size;\n    this._visible = isVisible;\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n    this._x = this.circleRad * Math.cos(radLocation) + this._parent.parent.centerX;\n    this._y = this.circleRad * Math.sin(radLocation) + this._parent.parent.centerY;\n  }\n\n  updateDrawSettings(sizeScaler) {\n    this.sizeScaler = sizeScaler;\n    const tempSize = this.size * this.sizeScaler * portDefaults.circleSizeScaler;\n    this.shouldDraw = false;\n\n    if (tempSize > portDefaults.circleSizeDrawThresh) {\n      this.shouldDraw = true; // the size of the Port's circle\n\n      this.circleSize = Number(tempSize);\n\n      if (this.params.touchedPort && this.params.touchedPort.type != this._type) {\n        this.circleSize += Math.sin(this.wobbleCounter) * this.wobbleAmount;\n      }\n\n      this.circleSize = Math.max(this.circleSize, portDefaults.minCircleSize); // colors\n\n      this.strokeStyle = undefined;\n\n      if (tempSize > portDefaults.minStrokeWidth) {\n        this.strokeStyle = utils.colors.grey();\n      }\n\n      this.fillStyle = this._parent.color();\n      this.lineWidth = Math.floor(tempSize * portDefaults.lineWidthScaler);\n    } // settings for drawing the name\n\n\n    this.radOffset = this._parent.radius - this.params.scaler * portDefaults.radOffsetScaler;\n    this.fontSize = Math.floor(this.sizeScaler * this.size * portDefaults.fontSizeScaler);\n  }\n\n  draw(sizeScaler) {\n    // TODO: updating drawing setting should me moved to the update function\n    this.updateDrawSettings(sizeScaler);\n\n    if (this.shouldDraw) {\n      this.params.context.save();\n      utils.drawArc(this.params.context, 0, this.circleRad, this.circleSize, 0, utils.PI2, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.params.context.restore();\n    }\n  }\n\n  drawName() {\n    this.params.context.save();\n    this.params.context.translate(this.radOffset, 0);\n\n    if (this._x < this._parent.parent.centerX) {\n      this.params.context.textAlign = 'left';\n      this.params.context.rotate(Math.PI);\n    } else {\n      this.params.context.textAlign = 'right';\n    }\n\n    this.params.context.font = this.fontSize + 'px Helvetica';\n\n    if (this._touched || this._hovered) {\n      this.params.context.fillStyle = utils.colors.white();\n    } else {\n      this.params.context.fillStyle = this._parent.color();\n    }\n\n    this.params.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.params.context.restore();\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleAmount","circleSizeScaler","circleSizeDrawThresh","lineWidthScaler","minCircleSize","minStrokeWidth","fillTextFontSizeScaler","radOffsetScaler","fontSizeScaler","Port","constructor","params","parent","type","index","_parent","_type","_index","_name","connections","_x","_y","_touched","_hovered","sizeScaler","circleRad","size","wobbleCounter","Math","random","PI2","circleSize","lineWidth","strokeStyle","fillStyle","shouldDraw","radOffset","self","_visible","visible","x","y","touched","hovered","name","state","update","rad","radLocation","isVisible","cos","centerX","sin","centerY","updateDrawSettings","tempSize","Number","touchedPort","max","undefined","colors","grey","color","floor","radius","scaler","fontSize","draw","context","save","drawArc","restore","drawName","translate","textAlign","rotate","PI","font","white","fillText"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeScaler: 0.53,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.2,\n  minCircleSize: 1,\n  minStrokeWidth: 4,\n  fillTextFontSizeScaler: 0.2,\n  radOffsetScaler: 0.05,\n  fontSizeScaler: 0.4\n};\n\nclass Port {\n  constructor (params, parent, type, index) {\n    this.params = params;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n\n    this._touched = false;\n    this._hovered = false;\n\n    this.sizeScaler = 0;\n    this.circleRad;\n    this.size;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n\n    this.circleSize, this.lineWidth, this.strokeStyle, this.fillStyle;\n    this.shouldDraw = false;\n\n    this.radOffset;\n\n    // the visible flag is used by Cords to determine if they should be shown\n    self._visible = false;\n  }\n\n  // GETTERS\n\n  get visible () { return self._visible }\n\n  get x () { return self._x }\n\n  get y () { return self._y }\n\n  get touched () { return self._touched; }\n\n  get hovered () { return self._hovered; }\n\n  get name () { return self._name; }\n\n  get index () { return self._index; }\n\n  get type () { return self._type; }\n\n  get parent () { return self._parent; }\n\n  // SETTERS\n\n  set touched (state) { self._touched = state; }\n\n  set hovered (state) { self._hovered = state; }\n\n  set name (name) { self._name = name; }\n\n  update (rad, size, radLocation, isVisible) {\n    this.circleRad = rad;\n    this.size = size;\n\n    this._visible = isVisible;\n\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n\n    this._x = this.circleRad * Math.cos(radLocation) + this._parent.parent.centerX;\n    this._y = this.circleRad * Math.sin(radLocation) + this._parent.parent.centerY;\n  }\n\n  updateDrawSettings (sizeScaler) {\n    this.sizeScaler = sizeScaler;\n    const tempSize = this.size * this.sizeScaler * portDefaults.circleSizeScaler;\n    this.shouldDraw = false;\n    if(tempSize > portDefaults.circleSizeDrawThresh){\n      this.shouldDraw = true;\n      // the size of the Port's circle\n      this.circleSize = Number(tempSize);\n      if(this.params.touchedPort && this.params.touchedPort.type != this._type) {\n        this.circleSize += (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n      }\n      this.circleSize = Math.max(this.circleSize, portDefaults.minCircleSize);\n\n      // colors\n      this.strokeStyle = undefined;\n      if(tempSize > portDefaults.minStrokeWidth) {\n        this.strokeStyle = utils.colors.grey();\n      }\n      this.fillStyle = this._parent.color();\n      this.lineWidth = Math.floor(tempSize * portDefaults.lineWidthScaler);\n    }\n\n    // settings for drawing the name\n    this.radOffset = this._parent.radius - (this.params.scaler * portDefaults.radOffsetScaler);\n    this.fontSize = Math.floor(this.sizeScaler * this.size * portDefaults.fontSizeScaler);\n  }\n\n  draw (sizeScaler) {\n    // TODO: updating drawing setting should me moved to the update function\n    this.updateDrawSettings(sizeScaler);\n    if(this.shouldDraw){\n      this.params.context.save();\n      utils.drawArc(\n        this.params.context,\n        0, this.circleRad,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, this.strokeStyle, this.fillStyle\n      )\n      this.params.context.restore();\n    }\n  }\n\n  drawName () {\n    this.params.context.save();\n    this.params.context.translate(this.radOffset, 0);\n\n    if(this._x < this._parent.parent.centerX){\n      this.params.context.textAlign = 'left';\n      this.params.context.rotate(Math.PI);\n    }\n    else{\n      this.params.context.textAlign = 'right';\n    }\n    this.params.context.font = this.fontSize + 'px Helvetica';\n    if(this._touched || this._hovered) {\n      this.params.context.fillStyle = utils.colors.white();\n    }\n    else {\n      this.params.context.fillStyle = this._parent.color();\n    }\n\n    this.params.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.params.context.restore();\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}