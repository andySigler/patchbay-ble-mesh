{"ast":null,"code":"import * as utils from './DrawUtils';\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  drawSizeScaler: 0.04,\n  lineWidth: 3,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor(params, inPort, outPort) {\n    this.params = params;\n    this.name = this.constructor.generateName(inPort, outPort);\n    this.inPort = inPort;\n    this.outPort = outPort;\n    this._selected = false;\n    this.lineWidth = cordDefaults.width; // the location and size of the delete circle\n\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined; // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    const inID = inPort.parent.id;\n    const inIndex = inPort.index;\n    const outID = outPort.parent.id;\n    const outIndex = outPort.index;\n    return String(inID + '/' + inIndex + '_' + outID + '/' + outIndex);\n  } // GETTERS\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get visible() {\n    return this.inPort.visible && this.outPort.visible;\n  }\n\n  get sizeScaler() {\n    return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler);\n  } // SETTERS\n\n\n  set selected(newVal) {\n    this._selected = newVal;\n  }\n\n  update() {\n    this.onScreenUpdate();\n\n    if (this.visible) {\n      // the coordinate where a deletion circle would be\n      // will be halfway between the two ports\n      this._x = (this.outPort.x - this.inPort.x) / 2 + this.inPort.x;\n      this._y = (this.outPort.y - this.inPort.y) / 2 + this.inPort.y;\n      this.lineWidth = Math.floor(cordDefaults.lineWidth * this.sizeScaler); // colors\n\n      this.lineFill = utils.colors.white(this.sizeScaler);\n      this.lineStroke = utils.colors.white(this.sizeScaler);\n\n      if (this._selected) {\n        this.wobbleCounter = (this.wobbleCounter + cordDefaults.wobbleStep) % utils.PI2;\n        const wobbledRadius = this._radius + Math.sin(this.wobbleCounter) * cordDefaults.wobbleAmount;\n        this.delLineWidth = wobbledRadius * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = wobbledRadius * this.sizeScaler * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler; // colors\n\n        this.lineStroke = utils.colors.red(this.sizeScaler);\n        this.delCircleFill = utils.colors.white(this.sizeScaler);\n        this.delCircleStroke = utils.colors.red(this.sizeScaler);\n      }\n    }\n  }\n\n  onScreenUpdate() {\n    this._radius = this.params.screenSize * cordDefaults.drawSizeScaler;\n  }\n\n  draw() {\n    if (this.visible) {\n      // save the context state\n      this.params.context.save(); // draw the line, from the input port to the output port\n\n      utils.drawLine(this.params.context, this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y, this.lineWidth, this.lineStroke); // draw the two circles on top of that line, inside each port\n\n      utils.drawArc(this.params.context, this.outPort.x, this.outPort.y, this.lineWidth, 0, utils.PI2, 0, undefined, this.lineFill);\n      utils.drawArc(this.params.context, this.inPort.x, this.inPort.y, this.lineWidth, 0, utils.PI2, 0, undefined, this.lineFill); // restore the context state\n\n      this.params.context.restore();\n\n      if (this._selected) {\n        this.drawDeleteCircle();\n      }\n    }\n  }\n\n  drawDeleteCircle() {\n    // save the context's state\n    this.params.context.save(); // translate to where the delete circle is\n\n    this.params.context.translate(this._x, this._y); // draw the circle, with a fill and a stroke\n\n    utils.drawArc(this.params.context, 0, 0, this.wobbleSize, 0, utils.PI2, this.lineWidth, this.delCircleStroke, this.delCircleFill); // draw the two lines that make the X\n\n    this.params.context.rotate(utils.PI / 4);\n    utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke);\n    this.params.context.rotate(-utils.PI / 2);\n    utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke); // restore the context's state\n\n    this.params.context.restore();\n  }\n\n  isUserTouching(x, y) {\n    if (!this._selected) {\n      return false;\n    }\n\n    const dist = utils.getDistance(x, y, this._x, this._y);\n\n    if (dist < this._radius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Connection };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Connection.js"],"names":["utils","cordDefaults","width","wobbleStep","wobbleAmount","drawSizeScaler","lineWidth","deleteLineWidthScaler","wobbleSizeScaler","wobbleLineLengthScaler","Connection","constructor","params","inPort","outPort","name","generateName","_selected","_x","undefined","_y","_radius","wobbleCounter","Math","random","PI2","lineFill","lineStroke","delCircleFill","delCircleStroke","delLineWidth","wobbleSize","wobbleLineLength","inID","parent","id","inIndex","index","outID","outIndex","String","selected","x","y","visible","sizeScaler","min","newVal","update","onScreenUpdate","floor","colors","white","wobbledRadius","sin","red","screenSize","draw","context","save","drawLine","drawArc","restore","drawDeleteCircle","translate","rotate","PI","isUserTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  drawSizeScaler: 0.04,\n  lineWidth: 3,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor (params, inPort, outPort) {\n    this.params = params;\n    this.name = this.constructor.generateName(inPort, outPort);\n\n    this.inPort = inPort;\n    this.outPort = outPort;\n\n    this._selected = false;\n\n    this.lineWidth = cordDefaults.width;\n\n    // the location and size of the delete circle\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined;\n\n    // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n    this.wobbleCounter = Math.random() * utils.PI2;\n\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    const inID = inPort.parent.id;\n    const inIndex = inPort.index;\n    const outID = outPort.parent.id;\n    const outIndex = outPort.index;\n    return String(\n      inID + '/' + inIndex + '_' + outID + '/' + outIndex);\n  }\n\n  // GETTERS\n\n  get selected () { return this._selected }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get visible () { return this.inPort.visible && this.outPort.visible; }\n\n  get sizeScaler () { return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler); }\n\n  // SETTERS\n\n  set selected (newVal) { this._selected = newVal; }\n\n  update () {\n    this.onScreenUpdate();\n\n    if (this.visible) {\n      // the coordinate where a deletion circle would be\n      // will be halfway between the two ports\n      this._x = ((this.outPort.x - this.inPort.x) / 2) + this.inPort.x;\n      this._y = ((this.outPort.y - this.inPort.y) / 2) + this.inPort.y;\n\n      this.lineWidth = Math.floor(cordDefaults.lineWidth * this.sizeScaler);\n\n      // colors\n      this.lineFill = utils.colors.white(this.sizeScaler);\n      this.lineStroke = utils.colors.white(this.sizeScaler);\n\n      if (this._selected) {\n        this.wobbleCounter = (this.wobbleCounter + cordDefaults.wobbleStep) % utils.PI2;\n        const wobbledRadius = this._radius + (Math.sin(this.wobbleCounter) * cordDefaults.wobbleAmount);\n        this.delLineWidth = wobbledRadius * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = wobbledRadius * this.sizeScaler * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler;\n        // colors\n        this.lineStroke = utils.colors.red(this.sizeScaler);\n        this.delCircleFill = utils.colors.white(this.sizeScaler);\n        this.delCircleStroke = utils.colors.red(this.sizeScaler);\n      }\n    }\n  }\n\n  onScreenUpdate () {\n    this._radius = this.params.screenSize * cordDefaults.drawSizeScaler;\n  }\n\n  draw () {\n    if(this.visible){\n      // save the context state\n      this.params.context.save();\n      // draw the line, from the input port to the output port\n      utils.drawLine(\n        this.params.context,\n        this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y,\n        this.lineWidth, this.lineStroke\n      );\n      // draw the two circles on top of that line, inside each port\n      utils.drawArc(\n        this.params.context,\n        this.outPort.x, this.outPort.y,\n        this.lineWidth, 0, utils.PI2,\n        0, undefined, this.lineFill\n      )\n      utils.drawArc(\n        this.params.context,\n        this.inPort.x, this.inPort.y,\n        this.lineWidth, 0, utils.PI2,\n        0, undefined, this.lineFill\n      )\n      // restore the context state\n      this.params.context.restore();\n\n      if(this._selected){\n        this.drawDeleteCircle();\n      }\n    }\n  }\n\n  drawDeleteCircle () {\n    // save the context's state\n    this.params.context.save();\n    // translate to where the delete circle is\n    this.params.context.translate(this._x, this._y);\n    // draw the circle, with a fill and a stroke\n    utils.drawArc(\n      this.params.context,\n      0, 0,\n      this.wobbleSize, 0, utils.PI2,\n      this.lineWidth, this.delCircleStroke, this.delCircleFill\n    )\n    // draw the two lines that make the X\n    this.params.context.rotate(utils.PI / 4);\n    utils.drawLine(\n      this.params.context,\n      0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n      this.delLineWidth, this.delCircleStroke\n    );\n    this.params.context.rotate(-utils.PI / 2);\n    utils.drawLine(\n      this.params.context,\n      0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n      this.delLineWidth, this.delCircleStroke\n    );\n    // restore the context's state\n    this.params.context.restore();\n  }\n\n  isUserTouching (x, y) {\n    if (!this._selected) {\n      return false;\n    }\n    const dist = utils.getDistance(x, y, this._x, this._y);\n    if (dist < this._radius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Connection }\n"]},"metadata":{},"sourceType":"module"}