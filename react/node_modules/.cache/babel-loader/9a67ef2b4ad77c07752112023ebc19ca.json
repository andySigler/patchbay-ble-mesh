{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.4,\n  minCircleSize: 1,\n  fillTextFontSizeScaler: 0.2,\n  textXOffsetScaler: 0.05,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor(params, parent, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this.relX = 0;\n    this.relY = 0;\n    this._touched = false;\n    this._hovered = false;\n    this.sizeScaler = 0;\n    this.arcRadius = undefined;\n    this._arcLineWidth = undefined;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n    this.circleSize = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = this._parent.color();\n    this.shouldDraw = false;\n    this.textXOffset = undefined; // the visible flag is used by Cords to determine if they should be shown\n\n    this._visible = false;\n  } // GETTERS\n\n\n  get visible() {\n    return this._visible;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get hovered() {\n    return this._hovered;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get size() {\n    return this._arcLineWidth;\n  } // SETTERS\n\n\n  set touched(state) {\n    this._touched = state;\n  }\n\n  set hovered(state) {\n    this._hovered = state;\n  }\n\n  set name(name) {\n    this._name = name;\n  }\n\n  update(sizeScaler, radLocation, isVisible) {\n    this.sizeScaler = sizeScaler;\n    this._visible = isVisible;\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n    this.circleSize = this._arcLineWidth * this.sizeScaler * 0.5; // b/c radius\n\n    if (this._visible && this.circleSize > portDefaults.circleSizeDrawThresh) {\n      // wobble the port's radius, if `touchedPort` is from the other circle\n      if (this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n        this.circleSize += Math.sin(this.wobbleCounter) * this.wobbleAmount;\n      }\n\n      this.circleSize = utils.clipValue(this.circleSize, portDefaults.minCircleSize, this._arcLineWidth);\n      this.lineWidth = Math.floor(this.circleSize * portDefaults.lineWidthScaler);\n    } // settings for drawing the name\n\n\n    this.textXOffset = this.arcRadius - this._arcLineWidth;\n    this.fontSize = Math.floor(this.sizeScaler * this._arcLineWidth * portDefaults.fontSizeScaler); // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n\n    this._x = this.arcRadius * Math.cos(radLocation) + this.relX;\n    this._y = this.arcRadius * Math.sin(radLocation) + this.relY;\n  }\n\n  onScreenUpdate(arcRadius, lineWidth, relX, relY) {\n    this.arcRadius = arcRadius;\n    this._arcLineWidth = lineWidth;\n    this.relX = relX;\n    this.relY = relY;\n  }\n\n  draw() {\n    ;\n\n    if (this._visible) {\n      this.context.save();\n      utils.drawArc(this.context, 0, this.arcRadius, this.circleSize, 0, utils.PI2, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.context.restore();\n    }\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.translate(this.textXOffset, 0);\n\n    if (this._x < this._parent.parent.centerX) {\n      this.context.textAlign = 'left';\n      this.context.rotate(Math.PI);\n    } else {\n      this.context.textAlign = 'right';\n    }\n\n    this.context.font = this.fontSize + 'px Helvetica';\n\n    if (this._touched || this._hovered) {\n      this.context.fillStyle = utils.colors.white();\n    } else {\n      this.context.fillStyle = this.fillStyle;\n    }\n\n    this.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouching(x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n\n    if (this._visible && dist < this.circleSize) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleAmount","circleSizeDrawThresh","lineWidthScaler","minCircleSize","fillTextFontSizeScaler","textXOffsetScaler","fontSizeScaler","touchingScaler","Port","constructor","params","parent","type","index","context","_parent","_type","_index","_name","connections","_x","_y","relX","relY","_touched","_hovered","sizeScaler","arcRadius","undefined","_arcLineWidth","wobbleCounter","Math","random","PI2","circleSize","lineWidth","strokeStyle","colors","background","fillStyle","color","shouldDraw","textXOffset","_visible","visible","x","y","touched","hovered","name","size","state","update","radLocation","isVisible","touchedPort","sin","clipValue","floor","fontSize","cos","onScreenUpdate","draw","save","drawArc","restore","drawName","translate","centerX","textAlign","rotate","PI","font","white","fillText","isTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  circleSizeDrawThresh: 2,\n  lineWidthScaler: 0.4,\n  minCircleSize: 1,\n  fillTextFontSizeScaler: 0.2,\n  textXOffsetScaler: 0.05,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor (params, parent, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n    this.relX = 0;\n    this.relY = 0;\n\n    this._touched = false;\n    this._hovered = false;\n\n    this.sizeScaler = 0;\n    this.arcRadius = undefined;\n    this._arcLineWidth = undefined;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbleStep = portDefaults.wobbleStep;\n    this.wobbleAmount = portDefaults.wobbleAmount;\n\n    this.circleSize = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = this._parent.color();\n    this.shouldDraw = false;\n\n    this.textXOffset = undefined;\n\n    // the visible flag is used by Cords to determine if they should be shown\n    this._visible = false;\n  }\n\n  // GETTERS\n\n  get visible () { return this._visible }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get touched () { return this._touched; }\n\n  get hovered () { return this._hovered; }\n\n  get name () { return this._name; }\n\n  get index () { return this._index; }\n\n  get type () { return this._type; }\n\n  get parent () { return this._parent; }\n\n  get size () { return this._arcLineWidth; }\n\n  // SETTERS\n\n  set touched (state) { this._touched = state; }\n\n  set hovered (state) { this._hovered = state; }\n\n  set name (name) { this._name = name; }\n\n  update (sizeScaler, radLocation, isVisible) {\n    this.sizeScaler = sizeScaler;\n    this._visible = isVisible;\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % utils.PI2;\n    this.circleSize = this._arcLineWidth * this.sizeScaler * 0.5;  // b/c radius\n    if(this._visible && this.circleSize > portDefaults.circleSizeDrawThresh){\n      // wobble the port's radius, if `touchedPort` is from the other circle\n      if(this.params.touchedPort && this.params.touchedPort.type !== this._type) {\n        this.circleSize += (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n      }\n      this.circleSize = utils.clipValue(\n        this.circleSize, portDefaults.minCircleSize, this._arcLineWidth);\n      this.lineWidth = Math.floor(this.circleSize * portDefaults.lineWidthScaler);\n    }\n    // settings for drawing the name\n    this.textXOffset = this.arcRadius - this._arcLineWidth;\n    this.fontSize = Math.floor(this.sizeScaler * this._arcLineWidth * portDefaults.fontSizeScaler);\n    // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n    this._x = this.arcRadius * Math.cos(radLocation) + this.relX;\n    this._y = this.arcRadius * Math.sin(radLocation) + this.relY;\n  }\n\n  onScreenUpdate (arcRadius, lineWidth, relX, relY) {\n    this.arcRadius = arcRadius;\n    this._arcLineWidth = lineWidth;\n    this.relX = relX;\n    this.relY = relY;\n  }\n\n  draw () {;\n    if(this._visible){\n      this.context.save();\n      utils.drawArc(\n        this.context,\n        0, this.arcRadius,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, this.strokeStyle, this.fillStyle\n      )\n      this.context.restore();\n    }\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.translate(this.textXOffset, 0);\n\n    if(this._x < this._parent.parent.centerX){\n      this.context.textAlign = 'left';\n      this.context.rotate(Math.PI);\n    }\n    else{\n      this.context.textAlign = 'right';\n    }\n    this.context.font = this.fontSize + 'px Helvetica';\n    if(this._touched || this._hovered) {\n      this.context.fillStyle = utils.colors.white();\n    }\n    else {\n      this.context.fillStyle = this.fillStyle;\n    }\n\n    this.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouching (x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    if (this._visible && dist < this.circleSize) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}