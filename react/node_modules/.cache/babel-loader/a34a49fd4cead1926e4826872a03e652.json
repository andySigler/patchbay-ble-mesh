{"ast":null,"code":"import * as utils from './DrawUtils';\nconst arcDefaults = {\n  touchingScaler: 0.4,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor(params, parent, type, color, name, id, index) {\n    this.params = params;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n    this._ports = [];\n    this._focused = false;\n    this._touched = false;\n    this._isSelected = false;\n    this.start;\n    this.end;\n    this.radius;\n    this.portSize;\n    this.arcLineWidth;\n    this.gutterStart;\n    this.gutterEnd;\n    this.gutterLineWidth;\n    this.test = true;\n  } // GETTERS\n\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  get touched() {\n    return this._touched;\n  } // SETTERS\n\n\n  set focused(newVal) {\n    this._focused = newVal;\n  }\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  addPort(index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index);\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta(data) {\n    // all of an Arc's ports are created all at once\n    if (this._ports.length == 0) {\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n\n      for (const i = 0; i < totalNewPorts; i++) {\n        this.addPort(i);\n      }\n    } // if ports already exist, then we are updated the names of the ports\n    else if (this.test) {\n        // loop through all ports of this type (in or out)\n        for (const i in data.ports[this._type]) {\n          const dataPort = data.ports[this._type][i]; // TODO: not sure when this would ever be false...\n\n          if (dataPort) {\n            // loop through all this Arc's previously saved ports\n            for (const p = 0; p < this._ports.length; p++) {\n              if (this._ports[p].index == dataPort.index) {\n                // update the name\n                this._ports[p].name = dataPort.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n  }\n\n  update(start, end, radius, portSize, padding, isSelected) {\n    // update this Arc's visual draw settings\n    this.start = start + padding;\n    this.end = end - padding;\n\n    if (this._parent.type === this.params.outType) {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * 1.75) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * .25) % utils.PI2;\n        this.end = (this.end + utils.PI * .25) % utils.PI2;\n      }\n    } else {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * .75) % utils.PI2;\n        this.end = (this.end + utils.PI * .75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * 1.25) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.25) % utils.PI2;\n      }\n    }\n\n    if (this.params.height < this.params.width) {\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n\n    this.radius = radius;\n    this.portSize = portSize;\n    this._isSelected = isSelected;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    let widthScaler = arcDefaults.arcWidthScaler; // if this Arc is empy, draw the Arc as a thin line\n\n    if (this._ports.length <= 0) {\n      widthScaler = arcDefaults.emptyArcScaler;\n    }\n\n    this.arcLineWidth = Math.max(this._parent.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + utils.PI * arcDefaults.gutterScaler;\n    this.gutterEnd = this.end + utils.PI * arcDefaults.gutterScaler;\n    this.gutterLineWidth = undefined;\n\n    if (this._isSelected) {\n      if (this._parent.type === this.params.inType && this._ports.length > 0) {\n        this.gutterLineWidth = Math.max(this._parent.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n      }\n    }\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (const i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        // the visible flag is used by Cords to determine if they should be shown\n        const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n        const isVisible = Boolean(this._isSelected);\n\n        this._ports[i].update(this.radius, this.portSize, radLocation, isVisible);\n      }\n    }\n  }\n\n  isTouchingPort(x, y, sizeScaler) {\n    // test to see if we are touching one of this Arc's ports\n    // if yes, set that Port as the global `touchedPort`\n    for (const i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        const dist = utils.getDistance(this._ports[i].x, this._ports[i].y, x, y);\n\n        if (dist < this._ports[i].size * arcDefaults.touchingScaler * sizeScaler) {\n          this._ports[i].touched = true;\n          this.params.touchedPort = this._ports[i];\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.params.context.save();\n    utils.drawArc(this.params.context, 0, 0, this.radius, this.start, this.end, this.arcLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.gutterLineWidth) {\n      utils.drawArc(this.params.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterLineWidth, this.params.colors.grey(), undefined);\n    }\n\n    this.params.context.restore();\n  }\n\n  drawName() {\n    this.params.context.save();\n    this.params.context.rotate(this.start + this.rotStep / 2);\n\n    for (const i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n\n    this.params.context.restore();\n  }\n\n  drawPorts(sizeScaler) {\n    // use the `sizeScaler` to dynamically set the radius of the\n    // child Port circles\n    if (sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n\n    if (sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n\n    this.sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh; // map [0, 1]\n\n    this.sizeScaler = Math.pow(this.sizeScaler, 2); // give it a curve\n    // draw the child Ports\n\n    this.params.context.save();\n    this.params.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (const i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].draw(sizeScaler);\n\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n\n    this.params.context.restore();\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","arcDefaults","touchingScaler","arcWidthScaler","gutterLineWidthScaler","gutterScaler","emptyArcScaler","sizeScalerMultiplier","sizeScalerThresh","Arc","constructor","params","parent","type","color","name","id","index","_parent","_type","_color","_name","_id","_index","_ports","_focused","_touched","_isSelected","start","end","radius","portSize","arcLineWidth","gutterStart","gutterEnd","gutterLineWidth","test","isSelected","ports","focused","touched","newVal","addPort","tempPort","Port","handleMeta","data","length","totalNewPorts","Number","totalPorts","i","dataPort","p","update","padding","outType","width","height","PI","PI2","widthScaler","Math","max","lineWidth","updateGutter","updatePorts","undefined","inType","rotStep","radLocation","isVisible","Boolean","isTouchingPort","x","y","sizeScaler","dist","getDistance","size","touchedPort","drawArc","context","save","colors","grey","restore","drawName","rotate","drawPorts","pow","draw"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst arcDefaults = {\n  touchingScaler: 0.4,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor (params, parent, type, color, name, id, index) {\n    this.params = params;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n\n    this._ports = [];\n\n    this._focused = false;\n    this._touched = false;\n\n    this._isSelected = false;\n\n    this.start;\n    this.end;\n    this.radius;\n    this.portSize;\n    this.arcLineWidth;\n\n    this.gutterStart;\n    this.gutterEnd;\n    this.gutterLineWidth;\n\n    this.test = true;\n  }\n\n  // GETTERS\n\n  get isSelected () { return this._isSelected; }\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get index () { return this._index; }\n\n  get ports () { return this._ports; }\n\n  get focused () { return this._focused; }\n\n  get touched () { return this._touched; }\n\n  // SETTERS\n\n  set focused (newVal) { this._focused = newVal; }\n\n  set touched (newVal) { this._touched = newVal; }\n\n  addPort (index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index);\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta (data) {\n    // all of an Arc's ports are created all at once\n    if(this._ports.length==0){\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n      for(const i = 0; i < totalNewPorts; i++){\n        this.addPort(i);\n      }\n    }\n    // if ports already exist, then we are updated the names of the ports\n    else if(this.test){\n      // loop through all ports of this type (in or out)\n      for(const i in data.ports[this._type]){\n        const dataPort = data.ports[this._type][i];\n        // TODO: not sure when this would ever be false...\n        if (dataPort) {\n          // loop through all this Arc's previously saved ports\n          for(const p = 0;p < this._ports.length; p++){\n            if(this._ports[p].index == dataPort.index){\n              // update the name\n              this._ports[p].name = dataPort.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  update (start, end, radius, portSize, padding, isSelected) {\n    // update this Arc's visual draw settings\n    this.start = start + padding;\n    this.end = end - padding;\n    if(this._parent.type === this.params.outType){\n      if(this.params.width < this.params.height){\n        this.start = (this.start + (utils.PI * 1.75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.75)) % utils.PI2;\n      }\n      else{\n        this.start = (this.start + (utils.PI * .25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .25)) % utils.PI2;\n      }\n    }\n    else{\n      if(this.params.width < this.params.height){\n        this.start = (this.start + (utils.PI * .75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .75)) % utils.PI2;\n      }\n      else{\n        this.start = (this.start + (utils.PI * 1.25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.25)) % utils.PI2;\n      }\n    }\n    if(this.params.height < this.params.width){\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n    this.radius = radius;\n    this.portSize = portSize;\n    this._isSelected = isSelected;\n    if(this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    let widthScaler = arcDefaults.arcWidthScaler;\n    // if this Arc is empy, draw the Arc as a thin line\n    if(this._ports.length <= 0) {\n      widthScaler = arcDefaults.emptyArcScaler;\n    }\n    this.arcLineWidth = Math.max(this._parent.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + (utils.PI * arcDefaults.gutterScaler);\n    this.gutterEnd = this.end + (utils.PI * arcDefaults.gutterScaler);\n    this.gutterLineWidth = undefined;\n    if (this._isSelected) {\n      if (this._parent.type === this.params.inType && this._ports.length > 0) {\n        this.gutterLineWidth = Math.max(\n          this._parent.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n      }\n    }\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for(const i = 0;i < this._ports.length; i++){\n      if(this._ports[i]){\n        // the visible flag is used by Cords to determine if they should be shown\n        const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n        const isVisible = Boolean(this._isSelected);\n        this._ports[i].update(this.radius, this.portSize, radLocation, isVisible);\n      }\n    }\n  }\n\n  isTouchingPort (x, y, sizeScaler) {\n    // test to see if we are touching one of this Arc's ports\n    // if yes, set that Port as the global `touchedPort`\n    for(const i = 0; i < this._ports.length; i++){\n      if(this._ports[i]){\n        const dist = utils.getDistance(this._ports[i].x, this._ports[i].y, x, y);\n        if(dist < this._ports[i].size * arcDefaults.touchingScaler * sizeScaler){\n          this._ports[i].touched = true;\n          this.params.touchedPort = this._ports[i];\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      0, 0, this.radius, this.start, this.end,\n      this.arcLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.gutterLineWidth) {\n      utils.drawArc(\n        this.params.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterLineWidth, this.params.colors.grey(), undefined\n      )\n    }\n    this.params.context.restore();\n  }\n\n  drawName () {\n    this.params.context.save();\n    this.params.context.rotate(this.start + (this.rotStep / 2));\n    for(const i = 0;i < this._ports.length; i++){\n      if(this._ports[i]){\n        this._ports[i].drawName();\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n    this.params.context.restore();\n  }\n\n  drawPorts (sizeScaler) {\n    // use the `sizeScaler` to dynamically set the radius of the\n    // child Port circles\n    if(sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n    if(sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n    this.sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh; // map [0, 1]\n    this.sizeScaler = Math.pow(this.sizeScaler, 2)  // give it a curve\n    // draw the child Ports\n    this.params.context.save();\n    this.params.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for(const i = 0; i < this._ports.length; i++){\n      if(this._ports[i]){\n        this._ports[i].draw(sizeScaler);\n        this.params.context.rotate(this.rotStep);\n      }\n    }\n    this.params.context.restore();\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}