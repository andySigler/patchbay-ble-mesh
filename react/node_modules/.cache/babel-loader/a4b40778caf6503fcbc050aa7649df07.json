{"ast":null,"code":"import * as utils from './DrawUtils';\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25,\n  // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor(params, parent, color, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n    this.connections = {};\n    this._x = 0;\n    this._y = 0;\n    this.textOffset = undefined;\n    this.parentX = 0;\n    this.parentY = 0;\n    this.parentRadius = undefined;\n    this.parentWidth = undefined;\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.portRadius = undefined;\n    this.lineWidth = undefined;\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = color;\n    this.highlightedFillStyle = utils.colors.white(); // the visible flag is used by Cords to determine if they should be shown\n\n    this._visible = false;\n  } // GETTERS\n\n\n  get visible() {\n    return this._visible;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get radius() {\n    return this.portRadius;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set name(name) {\n    this._name = name;\n  }\n\n  onScreenUpdate(parentRadius, parentWidth, parentX, parentY) {\n    this.parentRadius = parentRadius;\n    this.parentWidth = parentWidth;\n    this.parentX = parentX;\n    this.parentY = parentY;\n  }\n\n  update(sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    this._sizeScaler = !this._visible ? 0 : utils.clipValue(sizeScaler, portDefaults.minSizeScaler, 1); // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n\n    this._x = this.parentRadius * Math.cos(radLocation) + this.parentX;\n    this._y = this.parentRadius * Math.sin(radLocation) + this.parentY; // drawArc() radius and stroke width\n\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = this.parentWidth / 2 * sizeScaler; // wobble the port's radius, if `touchedPort` is from the other circle\n\n    this.wobbleCounter = (this.wobbleCounter + portDefaults.wobbleStep) % utils.PI2;\n\n    if (!this.isTouchedType()) {\n      this.portRadius += Math.sin(this.wobbleCounter) * portDefaults.wobbleAmount;\n    } // text settings\n\n\n    this.textOffset = this.parentRadius - this.parentWidth / 2 - this.lineWidth;\n    this.fontSize = sizeScaler * this.parentWidth * portDefaults.fontSizeScaler;\n  }\n\n  draw() {\n    ;\n\n    if (this._visible) {\n      this.context.save();\n      utils.drawArc(this.context, 0, this.parentRadius, this.portRadius, 0, utils.PI2, this.lineWidth, this.strokeStyle, this.fillStyle);\n      this.context.restore();\n    }\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n\n    if (this._x < this.parentX) {\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    } else {\n      this.context.textAlign = 'right';\n    }\n\n    this.context.font = utils.font(this.fontSize);\n\n    if (this.isTouched() || this.isHovered()) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    } else {\n      this.context.fillStyle = this.fillStyle;\n    }\n\n    this.context.fillText(this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouched() {\n    return this.params.touchedPort === this;\n  }\n\n  isTouchedType() {\n    return this.params.touchedPort && this.params.touchedPort.type == this._type;\n  }\n\n  isHovered() {\n    return this.params.hoveredPort === this;\n  }\n\n  isTouching(x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Port };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Port.js"],"names":["utils","portDefaults","wobbleStep","wobbleAmount","lineWidthScaler","minSizeScaler","fillTextFontSizeScaler","fontSizeScaler","touchingScaler","Port","constructor","params","parent","color","type","index","context","_parent","_type","_index","_name","connections","_x","_y","textOffset","undefined","parentX","parentY","parentRadius","parentWidth","wobbleCounter","Math","random","PI2","portRadius","lineWidth","strokeStyle","colors","background","fillStyle","highlightedFillStyle","white","_visible","visible","x","y","name","radius","sizeScaler","_sizeScaler","onScreenUpdate","update","radLocation","isVisible","clipValue","cos","sin","floor","isTouchedType","fontSize","draw","save","drawArc","restore","drawName","translate","textAlign","rotate","PI","font","isTouched","isHovered","fillText","touchedPort","hoveredPort","isTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst portDefaults = {\n  wobbleStep: 0.07,\n  wobbleAmount: 3,\n  lineWidthScaler: 0.4,\n  minSizeScaler: 0.25, // percentage\n  fillTextFontSizeScaler: 0.2,\n  fontSizeScaler: 0.4,\n  touchingScaler: 1.0\n};\n\nclass Port {\n  constructor (params, parent, color, type, index) {\n    this.params = params;\n    this.context = this.params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._index = index;\n    this._name = \"\";\n\n    this.connections = {};\n\n    this._x = 0;\n    this._y = 0;\n    this.textOffset = undefined;\n\n    this.parentX = 0;\n    this.parentY = 0;\n    this.parentRadius = undefined;\n    this.parentWidth = undefined;\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.portRadius = undefined;\n    this.lineWidth = undefined;\n\n    this.strokeStyle = utils.colors.background();\n    this.fillStyle = color;\n    this.highlightedFillStyle = utils.colors.white();\n\n    // the visible flag is used by Cords to determine if they should be shown\n    this._visible = false;\n  }\n\n  // GETTERS\n\n  get visible () { return this._visible }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get name () { return this._name; }\n\n  get index () { return this._index; }\n\n  get type () { return this._type; }\n\n  get parent () { return this._parent; }\n\n  get radius () { return this.portRadius; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set name (name) { this._name = name; }\n\n  onScreenUpdate (parentRadius, parentWidth, parentX, parentY) {\n    this.parentRadius = parentRadius;\n    this.parentWidth = parentWidth;\n    this.parentX = parentX;\n    this.parentY = parentY;\n  }\n\n  update (sizeScaler, radLocation, isVisible) {\n    // the Port is only visible if 1) told so by parent, and 2) is big enough\n    this._visible = isVisible && sizeScaler > portDefaults.minSizeScaler;\n    this._sizeScaler = !this._visible ? 0 : utils.clipValue(\n      sizeScaler, portDefaults.minSizeScaler, 1);\n    // Ports need an absolute coordinate on the screen\n    // because their position is used to determine when they are being\n    // interacted with\n    this._x = this.parentRadius * Math.cos(radLocation) + this.parentX;\n    this._y = this.parentRadius * Math.sin(radLocation) + this.parentY;\n    // drawArc() radius and stroke width\n    this.lineWidth = Math.floor(this.portRadius * portDefaults.lineWidthScaler);\n    this.portRadius = (this.parentWidth / 2) * sizeScaler;\n    // wobble the port's radius, if `touchedPort` is from the other circle\n    this.wobbleCounter = (this.wobbleCounter + portDefaults.wobbleStep) % utils.PI2;\n    if(!this.isTouchedType()) {\n      this.portRadius += (Math.sin(this.wobbleCounter) * portDefaults.wobbleAmount);\n    }\n    // text settings\n    this.textOffset = (this.parentRadius - (this.parentWidth / 2)) - this.lineWidth;\n    this.fontSize = sizeScaler * this.parentWidth * portDefaults.fontSizeScaler;\n  }\n\n  draw () {;\n    if(this._visible){\n      this.context.save();\n      utils.drawArc(\n        this.context,\n        0, this.parentRadius,\n        this.portRadius, 0, utils.PI2,\n        this.lineWidth, this.strokeStyle, this.fillStyle\n      )\n      this.context.restore();\n    }\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.translate(this.textOffset, 0);\n    if(this._x < this.parentX){\n      this.context.textAlign = 'left';\n      this.context.rotate(utils.PI);\n    }\n    else{\n      this.context.textAlign = 'right';\n    }\n    this.context.font = utils.font(this.fontSize);\n    if(this.isTouched() || this.isHovered()) {\n      this.context.fillStyle = this.highlightedFillStyle;\n    }\n    else {\n      this.context.fillStyle = this.fillStyle;\n    }\n    this.context.fillText(\n      this._name, 0, this.fontSize * portDefaults.fillTextFontSizeScaler);\n    this.context.restore();\n  }\n\n  isTouched () {\n    return this.params.touchedPort === this;\n  }\n\n  isTouchedType () {\n    return this.params.touchedPort && this.params.touchedPort.type == this._type;\n  }\n\n  isHovered () {\n    return this.params.hoveredPort === this;\n  }\n\n  isTouching (x, y) {\n    const dist = utils.getDistance(this._x, this._y, x, y);\n    if (this._visible && dist < this.portRadius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Port }\n"]},"metadata":{},"sourceType":"module"}