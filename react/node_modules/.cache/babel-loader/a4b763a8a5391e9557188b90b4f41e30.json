{"ast":null,"code":"import * as utils from './modules/PatchbayUtils';\nconst testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    const inArc = patchbay.inCircle.createArc(testingNodes[i].name, color, i + 2);\n    patchbay.inCircle.addArc(inArc);\n    const outArc = patchbay.outCircle.createArc(testingNodes[i].name, color, i + 2);\n    patchbay.outCircle.addArc(outArc);\n    const rOutputs = testingNodes[i].outputs.length;\n    const totOutArcs = patchbay.outCircle.arcs.length;\n\n    for (let o = 0; o < rOutputs; o++) {\n      const arc = patchbay.outCircle.arcs[totOutArcs - 1];\n      const name = testingNodes[i].outputs[o];\n      const port = arc.createPort(o, name);\n      arc.addPort(port);\n    }\n\n    const rInputs = testingNodes[i].inputs.length;\n    const totInArcs = patchbay.inCircle.arcs.length;\n\n    for (let o = 0; o < rInputs; o++) {\n      const arc = patchbay.inCircle.arcs[totInArcs - 1];\n      const name = testingNodes[i].outputs[o];\n      const port = arc.createPort(o, name);\n      arc.addPort(port);\n    }\n  }\n\n  for (let inArc = 0; inArc < patchbay.inCircle.arcs.length; inArc++) {\n    if (patchbay.inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(Math.random() * patchbay.outCircle.arcs.length);\n\n        if (patchbay.outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(Math.random() * patchbay.inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(Math.random() * patchbay.outCircle.arcs[outArc].ports.length);\n          patchbay.createConnection(patchbay.inCircle.arcs[inArc].ports[inPortIndex], patchbay.outCircle.arcs[outArc].ports[outPortIndex]);\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/PatchbaySimParams.js"],"names":["utils","testingNodes","makeTestingNodes","patchbay","startingIndex","Math","floor","random","length","index","i","rColorIndex","colors","palette","color","inArc","inCircle","createArc","name","addArc","outArc","outCircle","rOutputs","outputs","totOutArcs","arcs","o","arc","port","createPort","addPort","rInputs","inputs","totInArcs","ports","d","inPortIndex","outPortIndex","createConnection"],"mappings":"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","sourcesContent":["import * as utils from './modules/PatchbayUtils'\n\nconst testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    const inArc = patchbay.inCircle.createArc(testingNodes[i].name, color, i + 2);\n    patchbay.inCircle.addArc(inArc);\n    const outArc = patchbay.outCircle.createArc(testingNodes[i].name, color, i + 2);\n    patchbay.outCircle.addArc(outArc);\n    const rOutputs = testingNodes[i].outputs.length;\n    const totOutArcs = patchbay.outCircle.arcs.length;\n    for (let o = 0; o < rOutputs; o++) {\n      const arc = patchbay.outCircle.arcs[totOutArcs - 1];\n      const name = testingNodes[i].outputs[o];\n      const port = arc.createPort(o, name);\n      arc.addPort(port);\n    }\n    const rInputs = testingNodes[i].inputs.length;\n    const totInArcs = patchbay.inCircle.arcs.length;\n    for (let o = 0; o < rInputs; o++) {\n      const arc = patchbay.inCircle.arcs[totInArcs - 1];\n      const name = testingNodes[i].outputs[o];\n      const port = arc.createPort(o, name);\n      arc.addPort(port);\n    }\n  }\n  for (let inArc = 0; inArc < patchbay.inCircle.arcs.length; inArc++) {\n    if(patchbay.inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(\n          Math.random() * patchbay.outCircle.arcs.length);\n        if(patchbay.outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(\n            Math.random() * patchbay.inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(\n            Math.random() * patchbay.outCircle.arcs[outArc].ports.length);\n          patchbay.createConnection(\n            patchbay.inCircle.arcs[inArc].ports[inPortIndex],\n            patchbay.outCircle.arcs[outArc].ports[outPortIndex]\n          );\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes }\n"]},"metadata":{},"sourceType":"module"}