{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    console.log('drawloop');\n\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update(this.params.screenSize);\n    this.params.inCircle.update(this.params.screenSize);\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n    this.params.context.restore(); // this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(this.params.touchedPort.size * patchbayDefaults.touchedLineScaler, patchbayDefaults.touchedLineMinWidth);\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, fingerX, fingerY, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedWobbleScaler","touchedLineScaler","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","console","log","cancelAnimationFrame","update","screenSize","i","connections","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","drawTouchedPort","drawHoveredPort","restore","fingerX","fingerY","touchedPort","touchCircleThickness","size","touchedLineWidth","Math","sin","wobbleCounter","max","touchedLineTipCircleScaler","scaler","min","circleRadius","drawArc","x","y","PI2","colors","white","drawLine","green","hoveredPort","hoveredCircleWidth","setSize","width","height","fillStyle","grey","fillRect","createConnection","outputID","inputID","inputIndex","outputIndex","tempName","generateName","outPort","getPort","inPort","newConnection","addConnection","exists","eraseNodeFromConnections","id","n","conn","parent","deleteConnection"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    console.log('drawloop');\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update(this.params.screenSize);\n    this.params.inCircle.update(this.params.screenSize);\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n\n    this.params.context.restore();\n    // this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(\n      this.params.touchedPort.size * patchbayDefaults.touchedLineScaler,\n      patchbayDefaults.touchedLineMinWidth\n    );\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      fingerX, fingerY,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.grey();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(\n      outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}