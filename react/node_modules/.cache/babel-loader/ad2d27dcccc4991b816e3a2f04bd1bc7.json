{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor(params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._focused = false;\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n    this.test = true;\n  } // GETTERS\n\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set focused(newVal) {\n    this._focused = newVal;\n  }\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort(index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta(data) {\n    // all of an Arc's ports are created all at once\n    if (this._ports.length === 0) {\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n\n      for (let i = 0; i < totalNewPorts; i++) {\n        this.addPort(i);\n      }\n    } // if ports already exist, then we are updated the names of the ports\n    else if (this.test) {\n        // loop through all ports of this type (in or out)\n        for (let i in data.ports[this._type]) {\n          const dataPort = data.ports[this._type][i]; // TODO: not sure when this would ever be false...\n\n          if (dataPort) {\n            // loop through all this Arc's previously saved ports\n            for (let p = 0; p < this._ports.length; p++) {\n              if (this._ports[p].index === dataPort.index) {\n                // update the name\n                this._ports[p].name = dataPort.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n  }\n\n  onScreenUpdate(radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, x, y);\n    }\n  }\n\n  update(start, end, radius, lineWidth, padding, isSelected, sizeScaler) {\n    this.onScreenUpdate(radius, lineWidth); // update this Arc's visual draw settings\n\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this.start = start + padding;\n    this.end = end - padding;\n\n    if (this._type === this.params.outType) {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * 1.75) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * .25) % utils.PI2;\n        this.end = (this.end + utils.PI * .25) % utils.PI2;\n      }\n    } else {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + utils.PI * .75) % utils.PI2;\n        this.end = (this.end + utils.PI * .75) % utils.PI2;\n      } else {\n        this.start = (this.start + utils.PI * 1.25) % utils.PI2;\n        this.end = (this.end + utils.PI * 1.25) % utils.PI2;\n      }\n    }\n\n    if (this.params.height < this.params.width) {\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n\n    this._isSelected = isSelected;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + utils.PI * arcDefaults.gutterScaler;\n    this.gutterEnd = this.end - utils.PI * arcDefaults.gutterScaler;\n    this.gutterLineWidth = undefined;\n\n    if (this._type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let i = 0; i < this._ports.length; i++) {\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n\n      this._ports[i].update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort(x, y) {\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        if (this._ports[i].isUserTouching(x, y)) {\n          return this._ports[i];\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.arcLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.gutterLineWidth) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterLineWidth, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n\n        this.context.rotate(this.rotStep);\n      }\n    }\n\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    if (sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n\n    if (sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n\n    sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh;\n    sizeScaler = Math.pow(sizeScaler, 2);\n    return sizeScaler;\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","touchingScaler","arcWidthScaler","gutterLineWidthScaler","gutterScaler","emptyArcScaler","sizeScalerMultiplier","sizeScalerThresh","Arc","constructor","params","parent","type","color","name","id","index","context","_parent","_type","_color","_name","_id","_index","_sizeScaler","_ports","_focused","_touched","_isSelected","start","undefined","end","radius","lineWidth","arcLineWidth","gutterStart","gutterEnd","gutterLineWidth","test","isSelected","ports","focused","touched","sizeScaler","newVal","holdsTouchedPort","port","touchedPort","Boolean","holdsHoveredPort","hoveredPort","addPort","tempPort","handleMeta","data","length","totalNewPorts","Number","totalPorts","i","dataPort","p","onScreenUpdate","x","y","update","padding","modifySizeScaler","outType","width","height","PI","PI2","widthScaler","Math","max","updateGutter","updatePorts","inType","rotStep","radLocation","getTouchedPort","isUserTouching","drawArc","save","colors","background","restore","drawName","rotate","drawPorts","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Port } from './Port'\n\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85\n};\n\nclass Arc {\n  constructor (params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._focused = false;\n    this._touched = false;\n\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n\n    this.test = true;\n  }\n\n  // GETTERS\n\n  get isSelected () { return this._isSelected; }\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get index () { return this._index; }\n\n  get ports () { return this._ports; }\n\n  get focused () { return this._focused; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set focused (newVal) { this._focused = newVal; }\n\n  set touched (newVal) { this._touched = newVal; }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort (index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort;\n  }\n\n  handleMeta (data) {\n    // all of an Arc's ports are created all at once\n    if (this._ports.length === 0) {\n      const totalNewPorts = Number(data.totalPorts[this._type]);\n      for (let i = 0; i < totalNewPorts; i++) {\n        this.addPort(i);\n      }\n    }\n    // if ports already exist, then we are updated the names of the ports\n    else if (this.test) {\n      // loop through all ports of this type (in or out)\n      for (let i in data.ports[this._type]) {\n        const dataPort = data.ports[this._type][i];\n        // TODO: not sure when this would ever be false...\n        if (dataPort) {\n          // loop through all this Arc's previously saved ports\n          for (let p = 0;p < this._ports.length; p++) {\n            if (this._ports[p].index === dataPort.index) {\n              // update the name\n              this._ports[p].name = dataPort.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  onScreenUpdate (radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, x, y);\n    }\n  }\n\n  update (start, end, radius, lineWidth, padding, isSelected, sizeScaler) {\n    this.onScreenUpdate(radius, lineWidth);\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this.start = start + padding;\n    this.end = end - padding;\n    if (this._type === this.params.outType) {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + (utils.PI * 1.75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.75)) % utils.PI2;\n      }\n      else {\n        this.start = (this.start + (utils.PI * .25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .25)) % utils.PI2;\n      }\n    }\n    else {\n      if (this.params.width < this.params.height) {\n        this.start = (this.start + (utils.PI * .75)) % utils.PI2;\n        this.end = (this.end + (utils.PI * .75)) % utils.PI2;\n      }\n      else {\n        this.start = (this.start + (utils.PI * 1.25)) % utils.PI2;\n        this.end = (this.end + (utils.PI * 1.25)) % utils.PI2;\n      }\n    }\n    if (this.params.height < this.params.width) {\n      this.start = (this.start + utils.PI * 1.5) % utils.PI2;\n      this.end = (this.end + utils.PI * 1.5) % utils.PI2;\n    }\n    this._isSelected = isSelected;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + (utils.PI * arcDefaults.gutterScaler);\n    this.gutterEnd = this.end - (utils.PI * arcDefaults.gutterScaler);\n    this.gutterLineWidth = undefined;\n    if (this._type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(\n        this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let i = 0; i < this._ports.length; i++) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      this._ports[i].update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort (x, y) {\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        if (this._ports[i].isUserTouching(x, y)) {\n          return this._ports[i];\n        }\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.arcLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.gutterLineWidth) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterLineWidth, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.rotate(this.start + (this.rotStep / 2));\n    for (let i = 0;i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n        this.context.rotate(this.rotStep);\n      }\n    }\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    if (sizeScaler < 0) sizeScaler = 0;\n    sizeScaler *= arcDefaults.sizeScalerMultiplier;\n    if (sizeScaler > arcDefaults.sizeScalerThresh) {\n      sizeScaler = arcDefaults.sizeScalerThresh;\n    }\n    sizeScaler = sizeScaler / arcDefaults.sizeScalerThresh;\n    sizeScaler = Math.pow(sizeScaler, 2);\n    return sizeScaler;\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}