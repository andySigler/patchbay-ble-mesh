{"ast":null,"code":"const PI = Math.PI;\nconst PI2 = Math.PI * 2;\nconst colors = {\n  black: (opacity = 1.0) => \"rgba(0, 0, 0, \".concat(opacity, \")\"),\n  white: (opacity = 1.0) => \"rgba(255, 255, 255, \".concat(opacity, \")\"),\n  grey: (opacity = 1.0) => \"rgba(79, 79, 79, \".concat(opacity, \")\"),\n  gray: (opacity = 1.0) => \"rgba(79, 79, 79, \".concat(opacity, \")\"),\n  red: (opacity = 1.0) => \"rgba(226, 39, 39, \".concat(opacity, \")\"),\n  green: (opacity = 1.0) => \"rgba(100, 255, 100, \".concat(opacity, \")\"),\n  palette: [(opacity = 1.0) => \"rgba(176, 79, 79, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(176, 79, 176, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(43, 211, 252, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(176, 176, 79, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(252, 120, 43, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(176, 176, 176, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(30, 147, 175, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(X, X, X, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(X, X, X, \".concat(opacity, \")\"), (opacity = 1.0) => \"rgba(X, X, X, \".concat(opacity, \")\")]\n};\n\nconst drawLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  context.beginPath();\n  continueLine(context, x1, y1, x2, y2, width, stroke);\n};\n\nconst continueLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  if (width) context.lineWidth = width;\n  context.moveTo(x1, y1);\n  context.lineTo(x2, y2);\n  context.stroke();\n};\n\nconst drawArc = (context, x, y, radius, start, end, width, stroke = undefined, fill = undefined) => {\n  context.beginPath();\n  if (stroke) context.strokeStyle = stroke;\n  if (fill) context.fillStyle = fill;\n  context.arc(x, y, radius, start, end, false);\n  if (stroke) context.stroke();\n  if (fill) context.fill();\n};\n\nconst getDistance = (x1, y1, x2, y2) => {\n  var xDiff = x1 - x2;\n  var yDiff = y1 - y2;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n};\n\nexport { PI, PI2, colors, drawLine, continueLine, drawArc, getDistance };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/DrawUtils.js"],"names":["PI","Math","PI2","colors","black","opacity","white","grey","gray","red","green","palette","drawLine","context","x1","y1","x2","y2","width","stroke","undefined","beginPath","continueLine","lineWidth","moveTo","lineTo","drawArc","x","y","radius","start","end","fill","strokeStyle","fillStyle","arc","getDistance","xDiff","yDiff","sqrt"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,IAAI,CAACD,EAAhB;AACA,MAAME,GAAG,GAAGD,IAAI,CAACD,EAAL,GAAU,CAAtB;AAGA,MAAMG,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE,CAACC,OAAO,GAAG,GAAX,6BAAoCA,OAApC,MADM;AAEbC,EAAAA,KAAK,EAAE,CAACD,OAAO,GAAG,GAAX,mCAA0CA,OAA1C,MAFM;AAGbE,EAAAA,IAAI,EAAE,CAACF,OAAO,GAAG,GAAX,gCAAuCA,OAAvC,MAHO;AAIbG,EAAAA,IAAI,EAAE,CAACH,OAAO,GAAG,GAAX,gCAAuCA,OAAvC,MAJO;AAKbI,EAAAA,GAAG,EAAE,CAACJ,OAAO,GAAG,GAAX,iCAAwCA,OAAxC,MALQ;AAMbK,EAAAA,KAAK,EAAE,CAACL,OAAO,GAAG,GAAX,mCAA0CA,OAA1C,MANM;AAObM,EAAAA,OAAO,EAAE,CACP,CAACN,OAAO,GAAG,GAAX,iCAAwCA,OAAxC,MADO,EAEP,CAACA,OAAO,GAAG,GAAX,kCAAyCA,OAAzC,MAFO,EAGP,CAACA,OAAO,GAAG,GAAX,kCAAyCA,OAAzC,MAHO,EAIP,CAACA,OAAO,GAAG,GAAX,kCAAyCA,OAAzC,MAJO,EAKP,CAACA,OAAO,GAAG,GAAX,kCAAyCA,OAAzC,MALO,EAMP,CAACA,OAAO,GAAG,GAAX,mCAA0CA,OAA1C,MANO,EAOP,CAACA,OAAO,GAAG,GAAX,kCAAyCA,OAAzC,MAPO,EAQP,CAACA,OAAO,GAAG,GAAX,6BAAoCA,OAApC,MARO,EASP,CAACA,OAAO,GAAG,GAAX,6BAAoCA,OAApC,MATO,EAUP,CAACA,OAAO,GAAG,GAAX,6BAAoCA,OAApC,MAVO;AAPI,CAAf;;AAqBA,MAAMO,QAAQ,GAAG,CAACC,OAAD,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,MAAM,GAAGC,SAA1C,KAAwD;AACvEP,EAAAA,OAAO,CAACQ,SAAR;AACAC,EAAAA,YAAY,CAACT,OAAD,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,MAAjC,CAAZ;AACD,CAHD;;AAKA,MAAMG,YAAY,GAAG,CAACT,OAAD,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,KAA1B,EAAiCC,MAAM,GAAGC,SAA1C,KAAwD;AAC3E,MAAIF,KAAJ,EAAWL,OAAO,CAACU,SAAR,GAAoBL,KAApB;AACXL,EAAAA,OAAO,CAACW,MAAR,CAAeV,EAAf,EAAmBC,EAAnB;AACAF,EAAAA,OAAO,CAACY,MAAR,CAAeT,EAAf,EAAmBC,EAAnB;AACAJ,EAAAA,OAAO,CAACM,MAAR;AACD,CALD;;AAOA,MAAMO,OAAO,GAAG,CAACb,OAAD,EAAUc,CAAV,EAAaC,CAAb,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCb,KAApC,EAA2CC,MAAM,GAAGC,SAApD,EAA+DY,IAAI,GAAGZ,SAAtE,KAAoF;AAClGP,EAAAA,OAAO,CAACQ,SAAR;AACA,MAAIF,MAAJ,EAAYN,OAAO,CAACoB,WAAR,GAAsBd,MAAtB;AACZ,MAAIa,IAAJ,EAAUnB,OAAO,CAACqB,SAAR,GAAoBF,IAApB;AACVnB,EAAAA,OAAO,CAACsB,GAAR,CAAYR,CAAZ,EAAeC,CAAf,EAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,GAAjC,EAAsC,KAAtC;AACA,MAAIZ,MAAJ,EAAYN,OAAO,CAACM,MAAR;AACZ,MAAIa,IAAJ,EAAUnB,OAAO,CAACmB,IAAR;AACX,CAPD;;AASA,MAAMI,WAAW,GAAG,CAACtB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,KAAoB;AACtC,MAAIoB,KAAK,GAAGvB,EAAE,GAAGE,EAAjB;AACA,MAAIsB,KAAK,GAAGvB,EAAE,GAAGE,EAAjB;AACA,SAAOhB,IAAI,CAACsC,IAAL,CAAUF,KAAK,GAAGA,KAAR,GAAgBC,KAAK,GAAGA,KAAlC,CAAP;AACD,CAJD;;AAMA,SACEtC,EADF,EAEEE,GAFF,EAGEC,MAHF,EAIES,QAJF,EAKEU,YALF,EAMEI,OANF,EAOEU,WAPF","sourcesContent":["const PI = Math.PI;\nconst PI2 = Math.PI * 2;\n\n\nconst colors = {\n  black: (opacity = 1.0) => `rgba(0, 0, 0, ${opacity})`,\n  white: (opacity = 1.0) => `rgba(255, 255, 255, ${opacity})`,\n  grey: (opacity = 1.0) => `rgba(79, 79, 79, ${opacity})`,\n  gray: (opacity = 1.0) => `rgba(79, 79, 79, ${opacity})`,\n  red: (opacity = 1.0) => `rgba(226, 39, 39, ${opacity})`,\n  green: (opacity = 1.0) => `rgba(100, 255, 100, ${opacity})`,\n  palette: [\n    (opacity = 1.0) => `rgba(176, 79, 79, ${opacity})`,\n    (opacity = 1.0) => `rgba(176, 79, 176, ${opacity})`,\n    (opacity = 1.0) => `rgba(43, 211, 252, ${opacity})`,\n    (opacity = 1.0) => `rgba(176, 176, 79, ${opacity})`,\n    (opacity = 1.0) => `rgba(252, 120, 43, ${opacity})`,\n    (opacity = 1.0) => `rgba(176, 176, 176, ${opacity})`,\n    (opacity = 1.0) => `rgba(30, 147, 175, ${opacity})`,\n    (opacity = 1.0) => `rgba(X, X, X, ${opacity})`,\n    (opacity = 1.0) => `rgba(X, X, X, ${opacity})`,\n    (opacity = 1.0) => `rgba(X, X, X, ${opacity})`,\n  ]\n}\n\nconst drawLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  context.beginPath();\n  continueLine(context, x1, y1, x2, y2, width, stroke);\n}\n\nconst continueLine = (context, x1, y1, x2, y2, width, stroke = undefined) => {\n  if (width) context.lineWidth = width;\n  context.moveTo(x1, y1);\n  context.lineTo(x2, y2);\n  context.stroke();\n}\n\nconst drawArc = (context, x, y, radius, start, end, width, stroke = undefined, fill = undefined) => {\n  context.beginPath();\n  if (stroke) context.strokeStyle = stroke;\n  if (fill) context.fillStyle = fill;\n  context.arc(x, y, radius, start, end, false);\n  if (stroke) context.stroke();\n  if (fill) context.fill();\n}\n\nconst getDistance = (x1, y1, x2, y2) => {\n  var xDiff = x1 - x2;\n  var yDiff = y1 - y2;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n}\n\nexport {\n  PI,\n  PI2,\n  colors,\n  drawLine,\n  continueLine,\n  drawArc,\n  getDistance\n}\n"]},"metadata":{},"sourceType":"module"}