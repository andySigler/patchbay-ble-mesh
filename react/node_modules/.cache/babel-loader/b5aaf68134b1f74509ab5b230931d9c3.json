{"ast":null,"code":"var _jsxFileName = \"/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { Patchbay, userEventTypes } from './modules/Patchbay';\nimport { makeTestingNodes } from './modules/TestParams'; // TODO: get screen values from React-Native methods when on mobile\n\nconst screenTestScaler = 0.8;\nconst canvasWidth = Math.floor(736 * screenTestScaler);\nconst canvasHeight = Math.floor(414 * screenTestScaler);\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(Animation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.patchbay = undefined;\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    this.patchbay = new Patchbay(canvas);\n    this.patchbay.setSize(canvas.width, canvas.height);\n    makeTestingNodes(this.patchbay);\n    this.patchbay.drawLoop();\n  }\n\n  handleUserEvent(event, type) {\n    if (!this.patchbay) {\n      return;\n    }\n\n    console.log(event.clientX);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      onMouseDown: event => this.handleUserEvent(event, userEventTypes.touch),\n      onMouseMove: event => this.handleUserEvent(event, userEventTypes.move),\n      onMouseLeave: event => this.handleUserEvent(event, userEventTypes.release),\n      onMouseUp: event => this.handleUserEvent(event, userEventTypes.release),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/App.js"],"names":["React","Patchbay","userEventTypes","makeTestingNodes","screenTestScaler","canvasWidth","Math","floor","canvasHeight","App","Component","render","Animation","constructor","props","canvasRef","createRef","patchbay","undefined","componentDidMount","canvas","current","width","height","setSize","drawLoop","handleUserEvent","event","type","console","log","clientX","touch","move","release"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,oBAAzC;AACA,SAASC,gBAAT,QAAgC,sBAAhC,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,GAAzB;AACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,MAAMH,gBAAjB,CAApB;AACA,MAAMI,YAAY,GAAGF,IAAI,CAACC,KAAL,CAAW,MAAMH,gBAAjB,CAArB;;AAGA,MAAMK,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAChCC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,CAAP;AAGD;;AAL+B;;AAQlC,MAAMC,SAAN,SAAwBZ,KAAK,CAACU,SAA9B,CAAwC;AACtCG,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBf,KAAK,CAACgB,SAAN,EAAjB;AACA,SAAKC,QAAL,GAAgBC,SAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnB,UAAMC,MAAM,GAAG,KAAKL,SAAL,CAAeM,OAA9B;AACAD,IAAAA,MAAM,CAACE,KAAP,GAAejB,WAAf;AACAe,IAAAA,MAAM,CAACG,MAAP,GAAgBf,YAAhB;AACA,SAAKS,QAAL,GAAgB,IAAIhB,QAAJ,CAAamB,MAAb,CAAhB;AACA,SAAKH,QAAL,CAAcO,OAAd,CAAsBJ,MAAM,CAACE,KAA7B,EAAoCF,MAAM,CAACG,MAA3C;AACApB,IAAAA,gBAAgB,CAAC,KAAKc,QAAN,CAAhB;AACA,SAAKA,QAAL,CAAcQ,QAAd;AACD;;AAEDC,EAAAA,eAAe,CAAEC,KAAF,EAASC,IAAT,EAAe;AAC5B,QAAI,CAAC,KAAKX,QAAV,EAAoB;AAClB;AACD;;AACDY,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,OAAlB;AACD;;AAEDpB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAE,KAAKI,SADZ;AAEE,MAAA,WAAW,EAAGY,KAAD,IAAW,KAAKD,eAAL,CAAqBC,KAArB,EAA4BzB,cAAc,CAAC8B,KAA3C,CAF1B;AAGE,MAAA,WAAW,EAAGL,KAAD,IAAW,KAAKD,eAAL,CAAqBC,KAArB,EAA4BzB,cAAc,CAAC+B,IAA3C,CAH1B;AAIE,MAAA,YAAY,EAAGN,KAAD,IAAW,KAAKD,eAAL,CAAqBC,KAArB,EAA4BzB,cAAc,CAACgC,OAA3C,CAJ3B;AAKE,MAAA,SAAS,EAAGP,KAAD,IAAW,KAAKD,eAAL,CAAqBC,KAArB,EAA4BzB,cAAc,CAACgC,OAA3C,CALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD;;AApCqC;;AAwCxC,eAAezB,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { Patchbay, userEventTypes } from './modules/Patchbay'\nimport { makeTestingNodes} from './modules/TestParams'\n\n// TODO: get screen values from React-Native methods when on mobile\nconst screenTestScaler = 0.8;\nconst canvasWidth = Math.floor(736 * screenTestScaler);\nconst canvasHeight = Math.floor(414 * screenTestScaler);\n\n\nclass App extends React.Component {\n  render() {\n    return <div>\n      <Animation></Animation>\n    </div>;\n  }\n}\n\nclass Animation extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.patchbay = undefined;\n  }\n\n  componentDidMount () {\n    const canvas = this.canvasRef.current;\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n    this.patchbay = new Patchbay(canvas);\n    this.patchbay.setSize(canvas.width, canvas.height);\n    makeTestingNodes(this.patchbay);\n    this.patchbay.drawLoop();\n  }\n\n  handleUserEvent (event, type) {\n    if (!this.patchbay) {\n      return;\n    }\n    console.log(event.clientX);\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas\n          ref={this.canvasRef}\n          onMouseDown={(event) => this.handleUserEvent(event, userEventTypes.touch)}\n          onMouseMove={(event) => this.handleUserEvent(event, userEventTypes.move)}\n          onMouseLeave={(event) => this.handleUserEvent(event, userEventTypes.release)}\n          onMouseUp={(event) => this.handleUserEvent(event, userEventTypes.release)}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}