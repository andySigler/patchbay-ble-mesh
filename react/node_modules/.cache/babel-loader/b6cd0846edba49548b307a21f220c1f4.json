{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Arc } from './Arc';\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  isCloseToScaler: 0.4,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor(params, type, radiusPercentage, thickness) {\n    this.params = params;\n    this.context = params.context;\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n    this._centerX = 0;\n    this._centerY = 0;\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n    this.targetArc = 0;\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n    this.animPercent = 0;\n    this._touched = false;\n    this._type = type;\n    this._arcs = [];\n    this.arcEndPoints = [];\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n  } // GETTERS\n\n\n  get type() {\n    return this._type;\n  }\n\n  get highlighted() {\n    return this._highlighted;\n  }\n\n  get lineWidth() {\n    return this._lineWidth;\n  }\n\n  get arcOffset() {\n    return this._arcOffset;\n  }\n\n  get radiusPercentage() {\n    return this._radiusPercentage;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get arcs() {\n    return this._arcs;\n  }\n\n  get radiansMoved() {\n    return this._radiansMoved;\n  }\n\n  get centerX() {\n    return this._centerX;\n  }\n\n  get centerY() {\n    return this._centerY;\n  } // SETTERS\n\n\n  set radiansMoved(newVal) {\n    this._radiansMoved = newVal;\n  }\n\n  set centerX(newVal) {\n    this._centerX = newVal;\n  }\n\n  set centerY(newVal) {\n    this._centerY = newVal;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  holdsHoveredPort() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  update() {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    } else {\n      this.rotateDrag();\n    }\n\n    const totalArcs = this._arcs.length;\n\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * this.params.screenSize);\n\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = i === 0 ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n        const sizeScaler = this._arcOffset === arcIndex ? 1 - this.animPercent : this.animPercent;\n\n        this._arcs[arcIndex].onScreenUpdate(this._radiusPercentage * this.params.screenSize, this._lineWidth, this.centerX, this.centerY);\n\n        this._arcs[arcIndex].update(points[0] + circleDefaults.padding, points[1] - circleDefaults.padding, this._highlighted[i], sizeScaler);\n      }\n    }\n  }\n\n  drawArcs() {\n    if (this._arcs.length > 0) {\n      this.context.save();\n      this.context.translate(this._centerX, this._centerY);\n      this.context.textAlign = 'center'; // draw the TYPE text in the center of the Circle\n\n      const typeFontSize = Math.floor(this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= this._type === this.params.inType ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.context.font = utils.font(typeFontSize);\n      this.context.fillStyle = utils.colors.black();\n      this.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler); // then draw the currently displayed arc's name\n\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.context.font = utils.font(arc0FontSize);\n      this.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.context.fillText(arc0.name, xOffset0, 0); // draw the next-in-line Arc's label (fading in/out)\n\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.context.font = utils.font(arc1FontSize);\n      this.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.context.fillText(arc1.name, xOffset1, 0); // now draw the actual child Arcs\n\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.context.restore();\n    }\n  }\n\n  drawNames() {\n    this.context.save();\n    this.context.translate(this._centerX, this._centerY);\n\n    if (!this.holdsTouchedPort()) {\n      for (let arc of this._arcs) {\n        if (arc.isSelected) {\n          arc.drawAllPortNames();\n        }\n      }\n    } else {\n      // the touched port is in this circle, so only draw it's name\n      const parentArc = this.params.touchedPort.parent;\n      parentArc.drawPortName(this.params.touchedPort);\n    }\n\n    this.context.restore();\n  }\n\n  drawPorts() {\n    this.context.save();\n    this.context.translate(this._centerX, this._centerY);\n\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n\n    this.context.restore();\n  }\n\n  startAutoMove(newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.animPercent;\n\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.animPercent;\n      } else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.animPercent) % this._arcs.length;\n      } else {\n        arcsToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n\n    this.autoStepCount = 0;\n  }\n\n  updateAutoMoving() {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 0;\n      } else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        } else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.animPercent = 1 + this.animPercent;\n      }\n    } else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose(i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n\n    if (target < 0) {\n      target = this._arcs.length + target;\n    } else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    } // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n\n\n    const realStart = this.arcEndPoints[i].start;\n    let startDiff = this.arcEndPoints[target].start - realStart;\n    const realEnd = this.arcEndPoints[i].end;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = startDiff * this.animPercent + realStart;\n    let currentEnd = endDiff * this.animPercent + realEnd;\n\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    } else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    } else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    } else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent(fingerX, fingerY, compRadian) {\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n\n      const port = this._arcs[arcIndex].getTouchedPort(fingerX, fingerY);\n\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n\n    this._touched = true; // see which arc was touched\n\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag() {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - this._radiansMoved % utils.PI;\n      this._radiansMoved *= -1;\n    }\n\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - relativeMovement % 1;\n    } else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + relativeMovement % 1;\n    }\n\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      } else {\n        this.direction = 1;\n      }\n\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) this._arcOffset -= this._arcs.length;\n        this.animPercent -= 1;\n      } else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset < 0) this._arcOffset += this._arcs.length;\n        this.animPercent += 1;\n      }\n    }\n  }\n\n  addArc(name, color, id) {\n    const tempArc = new Arc(this.params, this, this._type, name, id, color);\n\n    this._arcs.push(tempArc);\n\n    this.updateDimensionStuff();\n  }\n\n  getArcById(id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n\n    return undefined;\n  }\n\n  deleteArc(id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff() {\n    this.arcEndPoints = [];\n\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [{\n        'start': utils.PI / 2,\n        'end': utils.PI / 2\n      }];\n    } else if (this._arcs.length === 2) {\n      this.arcEndPoints = [{\n        'start': utils.PI,\n        'end': utils.PI2\n      }, {\n        'start': 0,\n        'end': utils.PI\n      }];\n    } else {\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo(x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = this._radiusPercentage * this.params.screenSize + w;\n    const innerRad = this._radiusPercentage * this.params.screenSize - w;\n\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n\n    return false;\n  }\n\n  tapEvent() {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered() {\n    this._touched = false;\n\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n\n}\n\nexport { Circle };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Circle.js"],"names":["utils","Arc","circleDefaults","autoStepSize","rotateFeedback","padding","PI","isCloseToScaler","highlightCuttoff","textXOffsetScaler","arcTextScaler","typeFontSizeScaler","labelOffsetYScaler","Circle","constructor","params","type","radiusPercentage","thickness","context","_radiusPercentage","relativeLineWidth","_lineWidth","undefined","_centerX","_centerY","_arcOffset","targetOffset","isAutoMoving","autoStepTotal","autoStepCount","targetArc","_highlighted","animPercent","_touched","_type","_arcs","arcEndPoints","_radiansMoved","highlighted","lineWidth","arcOffset","touched","arcs","radiansMoved","centerX","centerY","newVal","holdsTouchedPort","port","touchedPort","Boolean","holdsHoveredPort","hoveredPort","update","updateAutoMoving","rotateDrag","totalArcs","length","Math","floor","screenSize","i","nonHighlightedIndex","arcIndex","points","transpose","sizeScaler","onScreenUpdate","drawArcs","save","translate","textAlign","typeFontSize","inType","typeYOffset","font","fillStyle","colors","black","fillText","toUpperCase","arc0","arc0FontSize","xOffset0","outType","color","min","name","arc1","arc1FontSize","xOffset1","drawArc","restore","drawNames","arc","isSelected","drawAllPortNames","parentArc","parent","drawPortName","drawPorts","startAutoMove","newOffset","moveUp","moveDown","arcsToMove","abs","target","realStart","start","startDiff","realEnd","end","endDiff","PI2","currentStart","currentEnd","mouseEvent","fingerX","fingerY","compRadian","getTouchedPort","n","relativeMovement","direction","animStep","addArc","id","tempArc","push","updateDimensionStuff","getArcById","deleteArc","splice","smallerWidth","isCloseTo","x","y","distFromCenter","getDistance","w","outerRad","innerRad","tapEvent","clearTouchedHovered"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Arc } from './Arc'\n\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 100,\n  isCloseToScaler: 0.4,\n  highlightCuttoff: 1 / 50,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor (params, type, radiusPercentage, thickness) {\n    this.params = params;\n    this.context = params.context;\n\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thickness;\n    this._lineWidth = undefined;\n\n    this._centerX = 0;\n    this._centerY = 0;\n\n    this._arcOffset = 0;\n    this.targetOffset = 0;\n    this.isAutoMoving = false;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n    this.targetArc = 0;\n\n    this._highlighted = {\n      0: true,\n      1: false\n    };\n\n    this.animPercent = 0;\n\n    this._touched = false;\n\n    this._type = type;\n\n    this._arcs = [];\n\n    this.arcEndPoints = [];\n\n    this._radiansMoved = 0;\n    this.rotateFeedback = circleDefaults.rotateFeedback;\n  }\n\n  // GETTERS\n\n  get type () { return this._type; }\n\n  get highlighted () { return this._highlighted; }\n\n  get lineWidth () { return this._lineWidth; }\n\n  get arcOffset () { return this._arcOffset; }\n\n  get radiusPercentage () { return this._radiusPercentage; }\n\n  get touched () { return this._touched; }\n\n  get arcs () { return this._arcs; }\n\n  get radiansMoved () { return this._radiansMoved; }\n\n  get centerX () { return this._centerX; }\n\n  get centerY () { return this._centerY; }\n\n  // SETTERS\n\n  set radiansMoved (newVal) { this._radiansMoved = newVal; }\n\n  set centerX (newVal) { this._centerX = newVal; }\n\n  set centerY (newVal) { this._centerY = newVal; }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  holdsHoveredPort () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  update () {\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    }\n    else {\n      this.rotateDrag();\n    }\n    const totalArcs = this._arcs.length;\n    if (this._arcOffset < totalArcs) {\n      this._lineWidth = Math.floor(this.relativeLineWidth * this.params.screenSize);\n      for (let i = 0; i < totalArcs; i++) {\n        const nonHighlightedIndex = (i + this._arcOffset) % totalArcs;\n        const arcIndex = (i === 0) ? this._arcOffset : nonHighlightedIndex;\n        const points = this.transpose(i);\n        const sizeScaler = (this._arcOffset === arcIndex) ? 1 - this.animPercent : this.animPercent;\n        this._arcs[arcIndex].onScreenUpdate(\n          this._radiusPercentage * this.params.screenSize,\n          this._lineWidth,\n          this.centerX,\n          this.centerY\n        )\n        this._arcs[arcIndex].update(\n          points[0] + circleDefaults.padding,\n          points[1] - circleDefaults.padding,\n          this._highlighted[i],\n          sizeScaler\n        );\n      }\n    }\n  }\n\n  drawArcs () {\n    if (this._arcs.length > 0) {\n      this.context.save();\n      this.context.translate(this._centerX, this._centerY);\n      this.context.textAlign = 'center';\n\n      // draw the TYPE text in the center of the Circle\n      const typeFontSize = Math.floor(\n        this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= (this._type === this.params.inType) ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.context.font = utils.font(typeFontSize);\n      this.context.fillStyle = utils.colors.black();\n      this.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler);\n\n      // then draw the currently displayed arc's name\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.animPercent;\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.context.font = utils.font(arc0FontSize);\n      this.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.context.fillText(arc0.name, xOffset0, 0);\n\n      // draw the next-in-line Arc's label (fading in/out)\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.animPercent);\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.context.font = utils.font(arc1FontSize);\n      this.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.context.fillText(arc1.name, xOffset1, 0);\n\n      // now draw the actual child Arcs\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.context.restore();\n    }\n  }\n\n  drawNames () {\n    this.context.save();\n    this.context.translate(this._centerX, this._centerY);\n    if (!this.holdsTouchedPort()) {\n      for (let arc of this._arcs) {\n        if (arc.isSelected) {\n          arc.drawAllPortNames();\n        }\n      }\n    }\n    else {\n      // the touched port is in this circle, so only draw it's name\n      const parentArc = this.params.touchedPort.parent;\n      parentArc.drawPortName(this.params.touchedPort);\n    }\n    this.context.restore();\n  }\n\n  drawPorts () {\n    this.context.save();\n    this.context.translate(this._centerX, this._centerY);\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n    this.context.restore();\n  }\n\n  startAutoMove (newOffset) {\n    this.targetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.animPercent;\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.animPercent;\n      }\n      else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.animPercent) % this._arcs.length;\n      }\n      else {\n        arcsToMove = (moveDown + this.animPercent) % this._arcs.length;\n      }\n    }\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n    this.autoStepCount = 0;\n  }\n\n  updateAutoMoving () {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.animPercent += this.autoStepSize;\n      this.autoStepCount++;\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset<0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 0;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = 0;\n        }\n        else if (this._arcOffset < 0) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.animPercent = 1 + this.animPercent;\n      }\n    }\n    else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.targetOffset;\n      this.animPercent = 0;\n    }\n  }\n\n  transpose (i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n    if (target < 0) {\n      target = this._arcs.length + target;\n    }\n    else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    }\n    // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n    const realStart = this.arcEndPoints[i].start;\n    let startDiff = this.arcEndPoints[target].start - realStart;\n    const realEnd = this.arcEndPoints[i].end;\n    let endDiff = this.arcEndPoints[target].end - realEnd;\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = (startDiff * this.animPercent) + realStart;\n    let currentEnd = (endDiff * this.animPercent) + realEnd;\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    }\n    else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    }\n    else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    const highlightCuttoff = circleDefaults.highlightCuttoff;\n    if (this.animPercent >= 0 && this.animPercent < highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= highlightCuttoff && this.animPercent < 0.5) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 0.5 && this.animPercent < 1 - highlightCuttoff) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    else if (this.animPercent >= 1 - highlightCuttoff && this.animPercent < 1) {\n      this._highlighted = {\n        0: true,\n        1: true\n      };\n    }\n    return [currentStart, currentEnd];\n  }\n\n  mouseEvent (fingerX, fingerY, compRadian) {\n    for (let i = 0; i < 2; i++) {\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n      const port = this._arcs[arcIndex].getTouchedPort(fingerX, fingerY);\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n    this._touched = true;\n    // see which arc was touched\n    for (let n = 0; n < this._arcs.length; n++) {\n      if (compRadian > this._arcs[n].start && compRadian < this._arcs[n].end) {\n        this._arcs[n].touched = true;\n        break;\n      }\n    }\n  }\n\n  rotateDrag () {\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - (this._radiansMoved % utils.PI);\n      this._radiansMoved *= -1;\n    }\n    if (!this.touched) {\n      this._radiansMoved *= this.rotateFeedback;\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - (relativeMovement % 1);\n    }\n    else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + (relativeMovement % 1);\n    }\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      }\n      else {\n        this.direction = 1;\n      }\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.animPercent -= animStep;\n\n      if (this.animPercent >= 1) {\n        this._arcOffset += 1;\n        if (this._arcOffset >= this._arcs.length) this._arcOffset -= this._arcs.length;\n        this.animPercent -= 1;\n      }\n      else if (this.animPercent < 0) {\n        this._arcOffset -= 1;\n        if (this._arcOffset < 0) this._arcOffset += this._arcs.length;\n        this.animPercent += 1;\n      }\n    }\n  }\n\n  addArc (name, color, id) {\n    const tempArc = new Arc(\n      this.params,\n      this,\n      this._type,\n      name,\n      id,\n      color\n    );\n    this._arcs.push(tempArc);\n    this.updateDimensionStuff();\n  }\n\n  getArcById (id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n    return undefined;\n  }\n\n  deleteArc (id) {\n    for (let i = 0; i < this._arcs.length; i++) {\n      if (this._arcs[i].id === id) {\n        this._arcs.splice(i, 1);\n        break;\n      }\n    }\n    if (this._arcOffset >= this._arcs.length && this._arcOffset > 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n    this.updateDimensionStuff();\n  }\n\n  updateDimensionStuff () {\n    this.arcEndPoints = [];\n    if (this._arcs.length === 1) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI / 2,\n          'end': utils.PI / 2\n        }\n      ];\n    }\n    else if (this._arcs.length === 2) {\n      this.arcEndPoints = [\n        {\n          'start': utils.PI,\n          'end': utils.PI2\n        },\n        {\n          'start': 0,\n          'end': utils.PI\n        },\n      ];\n    }\n    else{\n      this.arcEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  isCloseTo (x, y) {\n    const distFromCenter = utils.getDistance(this._centerX, this._centerY, x, y);\n    const w = this._lineWidth * circleDefaults.isCloseToScaler;\n    const outerRad = (this._radiusPercentage * this.params.screenSize) + w;\n    const innerRad = (this._radiusPercentage * this.params.screenSize) - w;\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n    return false;\n  }\n\n  tapEvent () {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered () {\n    this._touched = false;\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n}\n\nexport { Circle }\n"]},"metadata":{},"sourceType":"module"}