{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/patchbay-react/patchbay-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from './DrawUtils';\nimport { Arc } from './Arc';\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 200,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor(params, type, radiusPercentage, thicknessPercentage) {\n    this.params = params;\n    this.context = params.context;\n    this._type = type;\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thicknessPercentage;\n    this._lineWidth = undefined;\n    this._radius = undefined;\n    this._x = 0;\n    this._y = 0;\n    this._touched = false;\n    this._arcs = [];\n    this.arcStartEndPoints = [];\n    this._arcOffset = 0;\n    this.rotatePercent = 0;\n    this._radiansMoved = 0;\n    this.isAutoMoving = false;\n    this.autoTargetOffset = 0;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n  } // GETTERS\n\n\n  get type() {\n    return this._type;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get arcs() {\n    return this._arcs;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  } // SETTERS\n\n\n  set radiansMoved(newVal) {\n    this._radiansMoved = newVal;\n  }\n\n  set x(newVal) {\n    this._x = newVal;\n  }\n\n  set y(newVal) {\n    this._y = newVal;\n  }\n\n  createArc(name, color, id) {\n    return new Arc(this.params, this, this._type, name, id, color);\n  }\n\n  addArc(arc) {\n    this._arcs.push(arc);\n\n    this.updateDimensionStuff();\n  }\n\n  deleteArc(arc) {\n    for (let _ref of this._arcs.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let i = _ref2[0];\n      let a = _ref2[1];\n\n      if (arc === a) {\n        this._arcs.splice(i, 1);\n\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n\n        this.updateDimensionStuff();\n        return;\n      }\n    }\n  }\n\n  deleteArcFromId(id) {\n    const arc = this.getArcFromId(id);\n\n    if (arc) {\n      this.deleteArc(arc);\n    }\n  }\n\n  getArcFromId(id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n\n    return undefined;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  getExpandedArcs() {\n    const arcs = [this._arcs[this._arcOffset]];\n\n    if (this.rotatePercent > 0 && this.rotatePercent < 1) {\n      arcs.push(this._arcs[(this._arcOffset + 1) % this._arcs.length]);\n    }\n\n    return arcs;\n  }\n\n  incrementArcOffset() {\n    this._arcOffset = (this._arcOffset + 1) % this._arcs.length;\n  }\n\n  decrementArcOffset() {\n    this._arcOffset -= 1;\n\n    if (this._arcOffset < 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n  }\n\n  onScreenUpdate() {\n    this._lineWidth = this.relativeLineWidth * this.params.screenSize;\n    this._radius = this._radiusPercentage * this.params.screenSize;\n\n    for (let arc of this._arcs) {\n      arc.onScreenUpdate(this._radius, this._lineWidth, this.x, this.y);\n    }\n  }\n\n  update() {\n    this.onScreenUpdate();\n\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    } else {\n      this.updateRotateDrag();\n    }\n\n    for (let i = 0; i < this._arcs.length; i++) {\n      const points = this.transpose(i);\n      const isVisible = Boolean(i < 2);\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n      const sizeScaler = this._arcOffset === arcIndex ? 1 - this.rotatePercent : this.rotatePercent;\n\n      this._arcs[arcIndex].update(points[0], points[1], isVisible, sizeScaler);\n    }\n  }\n\n  updateRotateDrag() {\n    if (this._radiansMoved === 0) {\n      return;\n    }\n\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - this._radiansMoved % utils.PI;\n      this._radiansMoved *= -1;\n    }\n\n    if (!this.touched) {\n      this._radiansMoved *= circleDefaults.rotateFeedback;\n\n      if (this._radiansMoved < 0.0001) {\n        this._radiansMoved = 0;\n      }\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - relativeMovement % 1;\n    } else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + relativeMovement % 1;\n    }\n\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      } else {\n        this.direction = 1;\n      }\n\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.rotatePercent -= animStep;\n\n      if (this.rotatePercent >= 1) {\n        this.incrementArcOffset();\n        this.rotatePercent -= 1;\n      } else if (this.rotatePercent < 0) {\n        this.decrementArcOffset();\n        this.rotatePercent += 1;\n      }\n    }\n  }\n\n  updateDimensionStuff() {\n    this.arcStartEndPoints = [];\n\n    if (this._arcs.length === 1) {\n      this.arcStartEndPoints = [{\n        'start': utils.PI / 2,\n        'end': utils.PI / 2\n      }];\n    } else if (this._arcs.length === 2) {\n      this.arcStartEndPoints = [{\n        'start': utils.PI,\n        'end': utils.PI2\n      }, {\n        'start': 0,\n        'end': utils.PI\n      }];\n    } else {\n      this.arcStartEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcStartEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  transpose(i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n\n    if (target < 0) {\n      target = this._arcs.length + target;\n    } else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    } // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n\n\n    const realStart = this.arcStartEndPoints[i].start;\n    let startDiff = this.arcStartEndPoints[target].start - realStart;\n    const realEnd = this.arcStartEndPoints[i].end;\n    let endDiff = this.arcStartEndPoints[target].end - realEnd;\n\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = startDiff * this.rotatePercent + realStart;\n    let currentEnd = endDiff * this.rotatePercent + realEnd;\n\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    } else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    } else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n\n    return [currentStart + circleDefaults.padding, currentEnd - circleDefaults.padding];\n  }\n\n  updateAutoMoving() {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.rotatePercent += this.autoStepSize;\n      this.autoStepCount++;\n\n      if (this.rotatePercent >= 1) {\n        this.incrementArcOffset();\n        this.rotatePercent = 0;\n      } else if (this.rotatePercent < 0) {\n        this.decrementArcOffset();\n        this.rotatePercent = 1 + this.rotatePercent;\n      }\n    } else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.autoTargetOffset;\n      this.rotatePercent = 0;\n    }\n  }\n\n  drawArcs() {\n    if (this._arcs.length > 0) {\n      this.context.save();\n      this.context.translate(this._x, this._y);\n      this.context.textAlign = 'center'; // draw the TYPE text in the center of the Circle\n\n      const typeFontSize = Math.floor(this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= this._type === this.params.inType ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.context.font = utils.font(typeFontSize);\n      this.context.fillStyle = utils.colors.black();\n      this.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler); // then draw the currently displayed arc's name\n\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.rotatePercent;\n\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.context.font = utils.font(arc0FontSize);\n      this.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.context.fillText(arc0.name, xOffset0, 0); // draw the next-in-line Arc's label (fading in/out)\n\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.rotatePercent);\n\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.context.font = utils.font(arc1FontSize);\n      this.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.context.fillText(arc1.name, xOffset1, 0); // now draw the actual child Arcs\n\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.context.restore();\n    }\n  }\n\n  drawNames() {\n    this.context.save();\n    this.context.translate(this._x, this._y);\n\n    if (!this.holdsTouchedPort()) {\n      for (let arc of this._arcs) {\n        if (arc.isSelected) {\n          arc.drawAllPortNames();\n        }\n      }\n    } else {\n      // the touched port is in this circle, so only draw it's name\n      const parentArc = this.params.touchedPort.parent;\n      parentArc.drawPortName(this.params.touchedPort);\n    }\n\n    this.context.restore();\n  }\n\n  drawPorts() {\n    this.context.save();\n    this.context.translate(this._x, this._y);\n\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n\n    this.context.restore();\n  }\n\n  mouseEvent(fingerX, fingerY, compRadian) {\n    for (let arc of this.getExpandedArcs()) {\n      const port = arc.getTouchedPort(fingerX, fingerY);\n\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n\n    this._touched = true; // see which arc was touched\n\n    for (let arc of this._arcs) {\n      if (compRadian > arc.start && compRadian < arc.end) {\n        arc.touched = true;\n        break;\n      }\n    }\n  }\n\n  startAutoMove(newOffset) {\n    this.autoTargetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.rotatePercent;\n\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.rotatePercent;\n      } else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.rotatePercent) % this._arcs.length;\n      } else {\n        arcsToMove = (moveDown + this.rotatePercent) % this._arcs.length;\n      }\n    }\n\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n\n    this.autoStepCount = 0;\n  }\n\n  isCloseTo(x, y) {\n    const distFromCenter = utils.getDistance(this._x, this._y, x, y);\n    const w = this._lineWidth / 2;\n    const outerRad = this._radius + w;\n    const innerRad = this._radius - w;\n\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n\n    return false;\n  }\n\n  tapEvent() {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered() {\n    this._touched = false;\n\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n\n}\n\nexport { Circle };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Circle.js"],"names":["utils","Arc","circleDefaults","autoStepSize","rotateFeedback","padding","PI","textXOffsetScaler","arcTextScaler","typeFontSizeScaler","labelOffsetYScaler","Circle","constructor","params","type","radiusPercentage","thicknessPercentage","context","_type","_radiusPercentage","relativeLineWidth","_lineWidth","undefined","_radius","_x","_y","_touched","_arcs","arcStartEndPoints","_arcOffset","rotatePercent","_radiansMoved","isAutoMoving","autoTargetOffset","autoStepTotal","autoStepCount","touched","arcs","x","y","radiansMoved","newVal","createArc","name","color","id","addArc","arc","push","updateDimensionStuff","deleteArc","entries","i","a","splice","length","deleteArcFromId","getArcFromId","holdsTouchedPort","port","touchedPort","Boolean","getExpandedArcs","incrementArcOffset","decrementArcOffset","onScreenUpdate","screenSize","update","updateAutoMoving","updateRotateDrag","points","transpose","isVisible","arcIndex","sizeScaler","relativeMovement","PI2","Math","abs","direction","animStep","smallerWidth","target","realStart","start","startDiff","realEnd","end","endDiff","currentStart","currentEnd","drawArcs","save","translate","textAlign","typeFontSize","floor","inType","typeYOffset","font","fillStyle","colors","black","fillText","toUpperCase","arc0","arc0FontSize","xOffset0","outType","min","arc1","arc1FontSize","xOffset1","drawArc","restore","drawNames","isSelected","drawAllPortNames","parentArc","parent","drawPortName","drawPorts","mouseEvent","fingerX","fingerY","compRadian","getTouchedPort","startAutoMove","newOffset","moveUp","moveDown","arcsToMove","isCloseTo","distFromCenter","getDistance","w","outerRad","innerRad","tapEvent","clearTouchedHovered"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Arc } from './Arc'\n\nconst circleDefaults = {\n  autoStepSize: 0.1,\n  rotateFeedback: 0.85,\n  padding: utils.PI / 200,\n  textXOffsetScaler: 0.075,\n  arcTextScaler: 0.04,\n  typeFontSizeScaler: 0.025,\n  labelOffsetYScaler: 2\n};\n\nclass Circle {\n  constructor (params, type, radiusPercentage, thicknessPercentage) {\n    this.params = params;\n    this.context = params.context;\n\n    this._type = type;\n\n    this._radiusPercentage = radiusPercentage;\n    this.relativeLineWidth = thicknessPercentage;\n    this._lineWidth = undefined;\n    this._radius = undefined;\n\n    this._x = 0;\n    this._y = 0;\n\n    this._touched = false;\n\n    this._arcs = [];\n\n    this.arcStartEndPoints = [];\n    this._arcOffset = 0;\n    this.rotatePercent = 0;\n    this._radiansMoved = 0;\n\n    this.isAutoMoving = false;\n    this.autoTargetOffset = 0;\n    this.autoStepTotal = 0;\n    this.autoStepCount = 0;\n  }\n\n  // GETTERS\n\n  get type () { return this._type; }\n\n  get touched () { return this._touched; }\n\n  get arcs () { return this._arcs; }\n\n  get x () { return this._x; }\n\n  get y () { return this._y; }\n\n  // SETTERS\n\n  set radiansMoved (newVal) { this._radiansMoved = newVal; }\n\n  set x (newVal) { this._x = newVal; }\n\n  set y (newVal) { this._y = newVal; }\n\n  createArc (name, color, id) {\n    return new Arc(this.params, this, this._type, name, id, color);\n  }\n\n  addArc (arc) {\n    this._arcs.push(arc);\n    this.updateDimensionStuff();\n  }\n\n  deleteArc (arc) {\n    for (let [i, a] of this._arcs.entries()) {\n      if (arc === a) {\n        this._arcs.splice(i, 1);\n        if (this._arcOffset >= this._arcs.length) {\n          this._arcOffset = this._arcs.length - 1;\n        }\n        this.updateDimensionStuff();\n        return;\n      }\n    }\n  }\n\n  deleteArcFromId (id) {\n    const arc = this.getArcFromId(id);\n    if (arc) {\n      this.deleteArc(arc);\n    }\n  }\n\n  getArcFromId (id) {\n    for (let arc of this._arcs) {\n      if (arc.id === id) {\n        return arc;\n      }\n    }\n    return undefined;\n  }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.type === this.type);\n  }\n\n  getExpandedArcs () {\n    const arcs = [this._arcs[this._arcOffset]];\n    if (this.rotatePercent > 0 && this.rotatePercent < 1) {\n      arcs.push(this._arcs[(this._arcOffset + 1) % this._arcs.length]);\n    }\n    return arcs;\n  }\n\n  incrementArcOffset () {\n    this._arcOffset = (this._arcOffset + 1) % this._arcs.length;\n  }\n\n  decrementArcOffset () {\n    this._arcOffset -= 1;\n    if (this._arcOffset < 0) {\n      this._arcOffset = this._arcs.length - 1;\n    }\n  }\n\n  onScreenUpdate () {\n    this._lineWidth = this.relativeLineWidth * this.params.screenSize;\n    this._radius = this._radiusPercentage * this.params.screenSize;\n    for (let arc of this._arcs) {\n      arc.onScreenUpdate(this._radius, this._lineWidth, this.x, this.y)\n    }\n  }\n\n  update () {\n    this.onScreenUpdate();\n    if (this.isAutoMoving) {\n      this.updateAutoMoving();\n    }\n    else {\n      this.updateRotateDrag();\n    }\n    for (let i = 0; i < this._arcs.length; i++) {\n      const points = this.transpose(i);\n      const isVisible = Boolean(i < 2);\n      const arcIndex = (i + this._arcOffset) % this._arcs.length;\n      const sizeScaler = (this._arcOffset === arcIndex) ? 1 - this.rotatePercent : this.rotatePercent;\n      this._arcs[arcIndex].update(points[0], points[1], isVisible, sizeScaler);\n    }\n  }\n\n  updateRotateDrag () {\n    if (this._radiansMoved === 0) {\n      return\n    }\n    if (this._radiansMoved > utils.PI / 2) {\n      this._radiansMoved = utils.PI - (this._radiansMoved % utils.PI);\n      this._radiansMoved *= -1;\n    }\n    if (!this.touched) {\n      this._radiansMoved *= circleDefaults.rotateFeedback;\n      if (this._radiansMoved < 0.0001) {\n        this._radiansMoved = 0;\n      }\n    }\n\n    let relativeMovement = this._radiansMoved / utils.PI2;\n    if (relativeMovement > 0.5) {\n      relativeMovement = 1 - (relativeMovement % 1);\n    }\n    else if (relativeMovement < -0.5) {\n      relativeMovement = 1 + (relativeMovement % 1);\n    }\n    if (relativeMovement && relativeMovement < 1 && relativeMovement > -1) {\n      if (Math.abs(relativeMovement) < 0) {\n        this.direction = -1;\n      }\n      else {\n        this.direction = 1;\n      }\n      const animStep = relativeMovement / (1 / this._arcs.length);\n      this.rotatePercent -= animStep;\n\n      if (this.rotatePercent >= 1) {\n        this.incrementArcOffset()\n        this.rotatePercent -= 1;\n      }\n      else if (this.rotatePercent < 0) {\n        this.decrementArcOffset();\n        this.rotatePercent += 1;\n      }\n    }\n  }\n\n  updateDimensionStuff () {\n    this.arcStartEndPoints = [];\n    if (this._arcs.length === 1) {\n      this.arcStartEndPoints = [\n        {\n          'start': utils.PI / 2,\n          'end': utils.PI / 2\n        }\n      ];\n    }\n    else if (this._arcs.length === 2) {\n      this.arcStartEndPoints = [\n        {\n          'start': utils.PI,\n          'end': utils.PI2\n        },\n        {\n          'start': 0,\n          'end': utils.PI\n        },\n      ];\n    }\n    else{\n      this.arcStartEndPoints[0] = {\n        'start': utils.PI,\n        'end': utils.PI2\n      };\n      const smallerWidth = utils.PI / (this._arcs.length - 1);\n      for (let i = 1; i < this._arcs.length; i++) {\n        this.arcStartEndPoints[i] = {\n          'start': (i - 1) * smallerWidth,\n          'end': i * smallerWidth\n        };\n      }\n    }\n  }\n\n  transpose (i) {\n    // `target` is the index of the neighboring arc\n    // in the direction that we are rotating\n    let target = i - 1;\n    if (target < 0) {\n      target = this._arcs.length + target;\n    }\n    else if (target >= this._arcs.length) {\n      target = target % this._arcs.length;\n    }\n    // the start/end radians are pre-calculated when arcs are added/deleted\n    //\n    const realStart = this.arcStartEndPoints[i].start;\n    let startDiff = this.arcStartEndPoints[target].start - realStart;\n    const realEnd = this.arcStartEndPoints[i].end;\n    let endDiff = this.arcStartEndPoints[target].end - realEnd;\n    if (i === 1) {\n      startDiff = startDiff * -1;\n      endDiff = -utils.PI2 + endDiff;\n    }\n\n    let currentStart = (startDiff * this.rotatePercent) + realStart;\n    let currentEnd = (endDiff * this.rotatePercent) + realEnd;\n    if (currentStart > utils.PI2) {\n      currentStart = currentStart % utils.PI2;\n    }\n    else if (currentStart < 0) {\n      currentStart += utils.PI2;\n    }\n    if (currentEnd > utils.PI2) {\n      currentEnd = currentEnd % utils.PI2;\n    }\n    else if (currentEnd < 0) {\n      currentEnd += utils.PI2;\n    }\n    return [\n      currentStart + circleDefaults.padding,\n      currentEnd - circleDefaults.padding\n    ];\n  }\n\n  updateAutoMoving () {\n    if (this.autoStepCount < this.autoStepTotal) {\n      this.rotatePercent += this.autoStepSize;\n      this.autoStepCount++;\n      if (this.rotatePercent >= 1) {\n        this.incrementArcOffset();\n        this.rotatePercent = 0;\n      }\n      else if (this.rotatePercent < 0) {\n        this.decrementArcOffset();\n        this.rotatePercent = 1 + this.rotatePercent;\n      }\n    }\n    else {\n      this.isAutoMoving = false;\n      this._arcOffset = this.autoTargetOffset;\n      this.rotatePercent = 0;\n    }\n  }\n\n  drawArcs () {\n    if (this._arcs.length > 0) {\n      this.context.save();\n      this.context.translate(this._x, this._y);\n      this.context.textAlign = 'center';\n\n      // draw the TYPE text in the center of the Circle\n      const typeFontSize = Math.floor(\n        this.params.screenSize * circleDefaults.typeFontSizeScaler);\n      let labelOffsetYScaler = circleDefaults.labelOffsetYScaler;\n      labelOffsetYScaler *= (this._type === this.params.inType) ? -1 : 1;\n      const typeYOffset = typeFontSize * labelOffsetYScaler;\n      this.context.font = utils.font(typeFontSize);\n      this.context.fillStyle = utils.colors.black();\n      this.context.fillText(this._type.toUpperCase(), 0, typeYOffset);\n\n      const arcTextScaler = Math.floor(this.params.screenSize * circleDefaults.arcTextScaler);\n\n      // then draw the currently displayed arc's name\n      const arc0 = this._arcs[this._arcOffset];\n      const arc0FontSize = arcTextScaler * arc0.sizeScaler;\n      let xOffset0 = this._lineWidth * arcTextScaler * this.rotatePercent;\n      if (arc0.type === this.params.outType) {\n        xOffset0 *= -1;\n      }\n      xOffset0 *= circleDefaults.textXOffsetScaler;\n      this.context.font = utils.font(arc0FontSize);\n      this.context.fillStyle = arc0.color(Math.min(arc0.sizeScaler, 1));\n      this.context.fillText(arc0.name, xOffset0, 0);\n\n      // draw the next-in-line Arc's label (fading in/out)\n      const arc1 = this._arcs[(this._arcOffset + 1) % this._arcs.length];\n      const arc1FontSize = arcTextScaler * arc1.sizeScaler;\n      let xOffset1 = this._lineWidth * arcTextScaler * (1 - this.rotatePercent);\n      if (arc1.type === this.params.outType) {\n        xOffset1 *= -1;\n      }\n      xOffset1 *= circleDefaults.textXOffsetScaler;\n      xOffset1 *= -1;\n      this.context.font = utils.font(arc1FontSize);\n      this.context.fillStyle = arc1.color(Math.min(arc1.sizeScaler, 1));\n      this.context.fillText(arc1.name, xOffset1, 0);\n\n      // now draw the actual child Arcs\n      for (let i = 0; i < this._arcs.length; i++) {\n        this._arcs[i].drawArc();\n      }\n\n      this.context.restore();\n    }\n  }\n\n  drawNames () {\n    this.context.save();\n    this.context.translate(this._x, this._y);\n    if (!this.holdsTouchedPort()) {\n      for (let arc of this._arcs) {\n        if (arc.isSelected) {\n          arc.drawAllPortNames();\n        }\n      }\n    }\n    else {\n      // the touched port is in this circle, so only draw it's name\n      const parentArc = this.params.touchedPort.parent;\n      parentArc.drawPortName(this.params.touchedPort);\n    }\n    this.context.restore();\n  }\n\n  drawPorts () {\n    this.context.save();\n    this.context.translate(this._x, this._y);\n    for (let arc of this._arcs) {\n      if (arc.isSelected) {\n        arc.drawPorts();\n      }\n    }\n    this.context.restore();\n  }\n\n  mouseEvent (fingerX, fingerY, compRadian) {\n    for (let arc of this.getExpandedArcs()) {\n      const port = arc.getTouchedPort(fingerX, fingerY);\n      if (port) {\n        this.params.touchedPort = port;\n        this._touched = false;\n        return;\n      }\n    }\n    this._touched = true;\n    // see which arc was touched\n    for (let arc of this._arcs) {\n      if (compRadian > arc.start && compRadian < arc.end) {\n        arc.touched = true;\n        break;\n      }\n    }\n  }\n\n  startAutoMove (newOffset) {\n    this.autoTargetOffset = newOffset;\n    this.isAutoMoving = true;\n    const moveUp = newOffset - (this._arcOffset + this._arcs.length);\n    const moveDown = newOffset - this._arcOffset;\n    let arcsToMove = moveUp - this.rotatePercent;\n    if (Math.abs(moveUp) > Math.abs(moveDown)) {\n      if (Math.abs(moveDown) > this._arcs.length / 2) {\n        arcsToMove = moveDown + this._arcs.length + this.rotatePercent;\n      }\n      else if (moveDown === 0) {\n        arcsToMove = (moveDown - this.rotatePercent) % this._arcs.length;\n      }\n      else {\n        arcsToMove = (moveDown + this.rotatePercent) % this._arcs.length;\n      }\n    }\n    this.autoStepSize = circleDefaults.autoStepSize;\n    this.autoStepTotal = arcsToMove / this.autoStepSize;\n    if (this.autoStepTotal < 0) {\n      this.autoStepTotal *= -1;\n      this.autoStepSize *= -1;\n    }\n    this.autoStepCount = 0;\n  }\n\n  isCloseTo (x, y) {\n    const distFromCenter = utils.getDistance(this._x, this._y, x, y);\n    const w = this._lineWidth / 2;\n    const outerRad = this._radius + w;\n    const innerRad = this._radius - w;\n    if (distFromCenter <= outerRad && distFromCenter >= innerRad) {\n      return true;\n    }\n    return false;\n  }\n\n  tapEvent () {\n    if (this._touched) {\n      for (let i = 0; i < this._arcs.length; i++) {\n        if (this._arcs[i].touched) {\n          this.startAutoMove(i);\n        }\n      }\n    }\n    this.clearTouchedHovered();\n  }\n\n  clearTouchedHovered () {\n    this._touched = false;\n    for (let i = 0; i < this._arcs.length; i++) {\n      this._arcs[i].touched = false;\n    }\n  }\n}\n\nexport { Circle }\n"]},"metadata":{},"sourceType":"module"}