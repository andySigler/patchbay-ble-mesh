{"ast":null,"code":"import * as utils from './modules/PatchbayUtils';\nconst testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const inCircle = patchbay.inCircle;\n  const outCircle = patchbay.outCircle;\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const node = testingNodes[i];\n    const color = utils.colors.palette[i % utils.colors.palette.length];\n    const nodeID = \"testNode\".concat(i);\n    const inArc = inCircle.createArc(node.name, color, nodeID);\n    const outArc = outCircle.createArc(node.name, color, nodeID);\n    inCircle.addArc(inArc);\n    outCircle.addArc(outArc);\n\n    for (let o = 0; o < node.outputs.length; o++) {\n      outArc.addPort(outArc.createPort(o, node.outputs[o]));\n    }\n\n    for (let o = 0; o < node.inputs.length; o++) {\n      inArc.addPort(inArc.createPort(o, node.inputs[o]));\n    }\n  }\n\n  for (let inArc = 0; inArc < inCircle.arcs.length; inArc++) {\n    if (inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(Math.random() * outCircle.arcs.length);\n\n        if (outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(Math.random() * inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(Math.random() * outCircle.arcs[outArc].ports.length);\n          patchbay.createAndSaveConnection(inCircle.arcs[inArc].ports[inPortIndex], outCircle.arcs[outArc].ports[outPortIndex]);\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/PatchbaySimParams.js"],"names":["utils","testingNodes","makeTestingNodes","patchbay","inCircle","outCircle","startingIndex","Math","floor","random","length","index","i","node","color","colors","palette","nodeID","inArc","createArc","name","outArc","addArc","o","outputs","addPort","createPort","inputs","arcs","ports","d","inPortIndex","outPortIndex","createAndSaveConnection"],"mappings":"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","sourcesContent":["import * as utils from './modules/PatchbayUtils'\n\nconst testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const inCircle = patchbay.inCircle;\n  const outCircle = patchbay.outCircle;\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const node = testingNodes[i];\n    const color = utils.colors.palette[i % utils.colors.palette.length];\n    const nodeID = `testNode${i}`;\n    const inArc = inCircle.createArc(node.name, color, nodeID);\n    const outArc = outCircle.createArc(node.name, color, nodeID);\n    inCircle.addArc(inArc);\n    outCircle.addArc(outArc);\n    for (let o = 0; o < node.outputs.length; o++) {\n      outArc.addPort(outArc.createPort(o, node.outputs[o]));\n    }\n    for (let o = 0; o < node.inputs.length; o++) {\n      inArc.addPort(inArc.createPort(o, node.inputs[o]));\n    }\n  }\n  for (let inArc = 0; inArc < inCircle.arcs.length; inArc++) {\n    if(inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(\n          Math.random() * outCircle.arcs.length);\n        if(outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(\n            Math.random() * inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(\n            Math.random() * outCircle.arcs[outArc].ports.length);\n          patchbay.createAndSaveConnection(\n            inCircle.arcs[inArc].ports[inPortIndex],\n            outCircle.arcs[outArc].ports[outPortIndex]\n          );\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes }\n"]},"metadata":{},"sourceType":"module"}