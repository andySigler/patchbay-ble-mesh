{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/patchbay-react/patchbay-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from './PatchbayUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {\n    in: 0.375,\n    out: .875\n  }\n};\n\nclass Arc {\n  constructor(params, parent, type, name, id, color) {\n    this.params = params;\n    this.context = params.context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  } // GETTERS\n\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  createPort(id, name) {\n    const port = new Port(this.params, this, this._type, id, name, this._color);\n    port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    return port;\n  }\n\n  addPort(port) {\n    this._ports.push(port); // update some draw settings that change when ports.length > 0\n\n\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  getIndexOfPort(port) {\n    for (let _ref of this._ports.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let i = _ref2[0];\n      let p = _ref2[1];\n\n      if (p === port) {\n        return i;\n      }\n    }\n\n    return undefined;\n  }\n\n  adjustToScreenSize(radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this.x = x;\n    this.y = y;\n\n    for (let port of this._ports) {\n      port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    }\n  }\n\n  update(start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    this.drawnLineWidth = utils.clipValue(this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + utils.PI2 * arcDefaults.gutterStartEndScaler;\n    this.gutterEnd = this.end - utils.PI2 * arcDefaults.gutterStartEndScaler;\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let _ref3 of this._ports.entries()) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let i = _ref4[0];\n      let port = _ref4[1];\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort(x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.drawnLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.shouldDrawGutter) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterThickness, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawAllPortNames() {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName(port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + this.rotStep / 2 + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    sizeScaler = utils.clipValue(sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","emptyLineWidthScaler","gutterThicknessScaler","gutterStartEndScaler","sizeScalerPreMultiplier","angleOffset","in","out","Arc","constructor","params","parent","type","name","id","color","context","_parent","_type","_color","_name","_id","_sizeScaler","_ports","_touched","_isSelected","start","undefined","end","x","y","PI2","radius","lineWidth","drawnLineWidth","drawnLineWidthScaler","shouldDrawGutter","gutterStart","gutterEnd","gutterThickness","ports","isSelected","touched","sizeScaler","newVal","createPort","port","adjustToScreenSize","addPort","push","inType","getIndexOfPort","entries","i","p","update","modifySizeScaler","clipValue","updatePorts","updateGutter","Math","max","rotStep","length","radLocation","getTouchedPort","isUserTouching","drawArc","save","colors","background","restore","drawAllPortNames","drawPortName","indexOfPort","portRelRadsToPort","radiansToTouchedPort","rotate","drawName","drawPorts","PI","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { Port } from './Port'\n\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: {in: 0.375, out: .875}\n};\n\nclass Arc {\n  constructor (params, parent, type, name, id, color) {\n    this.params = params;\n    this.context = params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._touched = false;\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  }\n\n  // GETTERS\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get ports () { return this._ports; }\n\n  get isSelected () { return this._isSelected; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set touched (newVal) { this._touched = newVal; }\n\n  createPort (id, name) {\n    const port = new Port(this.params, this, this._type, id, name, this._color);\n    port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    return port;\n  }\n\n  addPort (port) {\n    this._ports.push(port);\n    // update some draw settings that change when ports.length > 0\n    this.shouldDrawGutter = this._type === this.params.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  getIndexOfPort (port) {\n    for (let [i, p] of this._ports.entries()) {\n      if (p === port) {\n        return i;\n      }\n    }\n    return undefined;\n  }\n\n  adjustToScreenSize (radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this.x = x;\n    this.y = y;\n    for (let port of this._ports) {\n      port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    }\n  }\n\n  update (start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    this.drawnLineWidth = utils.clipValue(\n      this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(\n      this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + (utils.PI2 * arcDefaults.gutterStartEndScaler);\n    this.gutterEnd = this.end - (utils.PI2 * arcDefaults.gutterStartEndScaler);\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let [i, port] of this._ports.entries()) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort (x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.drawnLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.shouldDrawGutter) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterThickness, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawAllPortNames () {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName (port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + (this.rotStep / 2) + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    sizeScaler = utils.clipValue(\n      sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}