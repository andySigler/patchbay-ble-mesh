{"ast":null,"code":"import * as utils from './PatchbayUtils';\nconst cordDefaults = {\n  lineWidthPixels: 3,\n  screenSizeScaler: 0.02,\n  wobbleStep: 0.05,\n  wobbleScaler: 0.2,\n  crossSignThicknessScaler: 0.75,\n  crossSignScaler: 0.6\n};\n\nclass Connection {\n  constructor(context, inPort, outPort) {\n    this.context = context;\n    this.name = this.constructor.generateName(inPort, outPort);\n    this.inPort = inPort;\n    this.outPort = outPort;\n    this._selected = false; // the location and size of the delete circle\n\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined;\n    this._lineWidth = undefined; // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbledRadius = undefined;\n    this.crossSignThickness = undefined;\n    this.crossSignRadius = undefined; // colors\n\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    const inArcID = inPort.parent.id;\n    const inPortID = inPort.id;\n    const outArcID = outPort.parent.id;\n    const outPortID = outPort.id;\n    return String(inArcID + '/' + inPortID + '->' + outArcID + '/' + outPortID);\n  } // GETTERS\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get visible() {\n    return Boolean(this.inPort.visible && this.outPort.visible);\n  }\n\n  get sizeScaler() {\n    return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler);\n  } // SETTERS\n\n\n  set selected(newVal) {\n    this._selected = newVal;\n  }\n\n  adjustToScreenSize(screenSize) {\n    this._radius = screenSize * cordDefaults.screenSizeScaler;\n  }\n\n  update() {\n    if (this.visible) {\n      this._lineWidth = cordDefaults.lineWidthPixels * this.sizeScaler; // colors\n\n      this.lineFill = utils.colors.white(this.sizeScaler);\n      this.lineStroke = utils.colors.white(this.sizeScaler);\n\n      if (this._selected) {\n        // the coordinate where a deletion circle would be\n        // will be halfway between the two ports\n        this._x = (this.outPort.x - this.inPort.x) / 2 + this.inPort.x;\n        this._y = (this.outPort.y - this.inPort.y) / 2 + this.inPort.y;\n        this.wobbleCounter = (this.wobbleCounter + cordDefaults.wobbleStep) % utils.PI2;\n\n        const wobbleRadiusAdder = Math.sin(this.wobbleCounter) * cordDefaults.wobbleScaler * this._radius;\n\n        const wobbledRadius = this._radius + wobbleRadiusAdder;\n        this.wobbledRadius = wobbledRadius * this.sizeScaler;\n        this.crossSignRadius = this.wobbledRadius * cordDefaults.crossSignScaler;\n        this.crossSignThickness = this._lineWidth * cordDefaults.crossSignThicknessScaler; // colors\n\n        this.lineStroke = utils.colors.delete(this.sizeScaler);\n        this.delCircleFill = utils.colors.white(this.sizeScaler);\n        this.delCircleStroke = utils.colors.delete(this.sizeScaler);\n      }\n    }\n  }\n\n  draw() {\n    if (this.visible) {\n      this.context.save();\n      utils.drawLine(this.context, this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y, this._lineWidth, this.lineStroke); // draw the two circles on top of that line, inside each port\n      // these make the edges of the line look a bit nicer\n\n      utils.drawCircle(this.context, this.outPort.x, this.outPort.y, this._lineWidth, 0, // use the line's width for a radius\n      undefined, this.lineFill);\n      utils.drawCircle(this.context, this.inPort.x, this.inPort.y, this._lineWidth, 0, // use the line's width for a radius\n      undefined, this.lineFill);\n      this.context.restore();\n\n      if (this._selected) {\n        this.drawDeleteCircle();\n      }\n    }\n  }\n\n  drawDeleteCircle() {\n    this.context.save();\n    this.context.translate(this._x, this._y); // the cross's bounding circle\n\n    utils.drawCircle(this.context, 0, 0, this.wobbledRadius, this._lineWidth, this.delCircleStroke, this.delCircleFill); // two lines, to create a cross \"X\"\n\n    this.context.rotate(utils.PI / 4);\n    utils.drawLine(this.context, 0, this.crossSignRadius, 0, -this.crossSignRadius, this.crossSignThickness, this.delCircleStroke);\n    this.context.rotate(-utils.PI / 2);\n    utils.drawLine(this.context, 0, this.crossSignRadius, 0, -this.crossSignRadius, this.crossSignThickness, this.delCircleStroke); // restore the context's state\n\n    this.context.restore();\n  }\n\n  isUserTouching(x, y) {\n    if (!this._selected) {\n      return false;\n    }\n\n    const dist = utils.getDistance(x, y, this._x, this._y);\n\n    if (dist < this._radius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Connection };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Connection.js"],"names":["utils","cordDefaults","lineWidthPixels","screenSizeScaler","wobbleStep","wobbleScaler","crossSignThicknessScaler","crossSignScaler","Connection","constructor","context","inPort","outPort","name","generateName","_selected","_x","undefined","_y","_radius","_lineWidth","wobbleCounter","Math","random","PI2","wobbledRadius","crossSignThickness","crossSignRadius","lineFill","lineStroke","delCircleFill","delCircleStroke","inArcID","parent","id","inPortID","outArcID","outPortID","String","selected","x","y","visible","Boolean","sizeScaler","min","newVal","adjustToScreenSize","screenSize","update","colors","white","wobbleRadiusAdder","sin","delete","draw","save","drawLine","drawCircle","restore","drawDeleteCircle","translate","rotate","PI","isUserTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\n\nconst cordDefaults = {\n  lineWidthPixels: 3,\n  screenSizeScaler: 0.02,\n  wobbleStep: 0.05,\n  wobbleScaler: 0.2,\n  crossSignThicknessScaler: 0.75,\n  crossSignScaler: 0.6\n};\n\nclass Connection {\n  constructor (context, inPort, outPort) {\n    this.context = context;\n    this.name = this.constructor.generateName(inPort, outPort);\n\n    this.inPort = inPort;\n    this.outPort = outPort;\n\n    this._selected = false;\n\n    // the location and size of the delete circle\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined;\n    this._lineWidth = undefined;\n\n    // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n    this.wobbleCounter = Math.random() * utils.PI2;\n    this.wobbledRadius = undefined;\n    this.crossSignThickness = undefined;\n    this.crossSignRadius = undefined;\n\n    // colors\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    const inArcID = inPort.parent.id;\n    const inPortID = inPort.id;\n    const outArcID = outPort.parent.id;\n    const outPortID = outPort.id;\n    return String(\n      inArcID + '/' + inPortID + '->' + outArcID + '/' + outPortID);\n  }\n\n  // GETTERS\n\n  get selected () { return this._selected }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get visible () { return Boolean(this.inPort.visible && this.outPort.visible); }\n\n  get sizeScaler () {\n    return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler);\n  }\n\n  // SETTERS\n\n  set selected (newVal) { this._selected = newVal; }\n\n  adjustToScreenSize (screenSize) {\n    this._radius = screenSize * cordDefaults.screenSizeScaler;\n  }\n\n  update () {\n    if (this.visible) {\n\n      this._lineWidth = cordDefaults.lineWidthPixels * this.sizeScaler;\n\n      // colors\n      this.lineFill = utils.colors.white(this.sizeScaler);\n      this.lineStroke = utils.colors.white(this.sizeScaler);\n\n      if (this._selected) {\n        // the coordinate where a deletion circle would be\n        // will be halfway between the two ports\n        this._x = ((this.outPort.x - this.inPort.x) / 2) + this.inPort.x;\n        this._y = ((this.outPort.y - this.inPort.y) / 2) + this.inPort.y;\n        this.wobbleCounter = (this.wobbleCounter + cordDefaults.wobbleStep) % utils.PI2;\n        const wobbleRadiusAdder = Math.sin(this.wobbleCounter) * cordDefaults.wobbleScaler * this._radius;\n        const wobbledRadius = this._radius + wobbleRadiusAdder;\n        this.wobbledRadius = wobbledRadius * this.sizeScaler;\n        this.crossSignRadius = this.wobbledRadius * cordDefaults.crossSignScaler;\n        this.crossSignThickness = this._lineWidth * cordDefaults.crossSignThicknessScaler;\n        // colors\n        this.lineStroke = utils.colors.delete(this.sizeScaler);\n        this.delCircleFill = utils.colors.white(this.sizeScaler);\n        this.delCircleStroke = utils.colors.delete(this.sizeScaler);\n      }\n    }\n  }\n\n  draw () {\n    if(this.visible){\n      this.context.save();\n      utils.drawLine(\n        this.context,\n        this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y,\n        this._lineWidth, this.lineStroke\n      );\n      // draw the two circles on top of that line, inside each port\n      // these make the edges of the line look a bit nicer\n      utils.drawCircle(\n        this.context,\n        this.outPort.x, this.outPort.y,\n        this._lineWidth, 0, // use the line's width for a radius\n        undefined, this.lineFill\n      )\n      utils.drawCircle(\n        this.context,\n        this.inPort.x, this.inPort.y,\n        this._lineWidth, 0, // use the line's width for a radius\n        undefined, this.lineFill\n      )\n      this.context.restore();\n      if(this._selected){\n        this.drawDeleteCircle();\n      }\n    }\n  }\n\n  drawDeleteCircle () {\n    this.context.save();\n    this.context.translate(this._x, this._y);\n    // the cross's bounding circle\n    utils.drawCircle(\n      this.context,\n      0, 0,\n      this.wobbledRadius, this._lineWidth,\n      this.delCircleStroke, this.delCircleFill\n    )\n    // two lines, to create a cross \"X\"\n    this.context.rotate(utils.PI / 4);\n    utils.drawLine(\n      this.context,\n      0, this.crossSignRadius, 0, -this.crossSignRadius,\n      this.crossSignThickness, this.delCircleStroke\n    );\n    this.context.rotate(-utils.PI / 2);\n    utils.drawLine(\n      this.context,\n      0, this.crossSignRadius, 0, -this.crossSignRadius,\n      this.crossSignThickness, this.delCircleStroke\n    );\n    // restore the context's state\n    this.context.restore();\n  }\n\n  isUserTouching (x, y) {\n    if (!this._selected) {\n      return false;\n    }\n    const dist = utils.getDistance(x, y, this._x, this._y);\n    if (dist < this._radius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Connection }\n"]},"metadata":{},"sourceType":"module"}