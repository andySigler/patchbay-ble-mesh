{"ast":null,"code":"import * as utils from './modules/DrawUtils';\nconst testingNodes = [{\n  'name': 'Phone',\n  'inputs': ['Dial', 'Mic'],\n  'outputs': ['Bell']\n}, {\n  'name': 'Biggie',\n  'inputs': [],\n  'outputs': ['Nod', 'Position']\n}, {\n  'name': 'Switch',\n  'inputs': ['State'],\n  'outputs': []\n}, {\n  'name': 'Toy-Pony',\n  'inputs': [],\n  'outputs': ['speed']\n}, {\n  'name': 'Maraca',\n  'inputs': ['Intensity', 'Beat'],\n  'outputs': []\n}, {\n  'name': 'Guitar',\n  'inputs': ['Volume', 'Speed', 'Pitch'],\n  'outputs': []\n}, {\n  'name': 'Lamp',\n  'inputs': [],\n  'outputs': ['Brightness', 'State']\n}, {\n  'name': 'Boombox',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume', 'Song']\n}, {\n  'name': 'Snare',\n  'inputs': ['Beat', 'Volume'],\n  'outputs': ['Volume']\n}, {\n  'name': 'Monome',\n  'inputs': ['Pitch', 'State'],\n  'outputs': []\n}, {\n  'name': 'Drawing-Bot',\n  'inputs': [],\n  'outputs': ['Speed', 'Direction', 'Pen-Height']\n}];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    patchbay.params.outCircle.addArc(testingNodes[i].name, color, i + 2); // ID ???\n\n    patchbay.params.inCircle.addArc(testingNodes[i].name, color, i + 2);\n    const rOutputs = testingNodes[i].outputs.length;\n    const totOutArcs = patchbay.params.outCircle.arcs.length;\n\n    for (let o = 0; o < rOutputs; o++) {\n      patchbay.params.outCircle.arcs[totOutArcs - 1].addPort(o);\n      patchbay.params.outCircle.arcs[totOutArcs - 1].ports[o].name = testingNodes[i].outputs[o];\n    }\n\n    const rInputs = testingNodes[i].inputs.length;\n    const totInArcs = patchbay.params.inCircle.arcs.length;\n\n    for (let o = 0; o < rInputs; o++) {\n      patchbay.params.inCircle.arcs[totInArcs - 1].addPort(o);\n      patchbay.params.inCircle.arcs[totInArcs - 1].ports[o].name = testingNodes[i].inputs[o];\n    }\n  }\n\n  for (let inArc = 0; inArc < patchbay.params.inCircle.arcs.length; inArc++) {\n    if (patchbay.params.inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(Math.random() * patchbay.params.outCircle.arcs.length);\n\n        if (patchbay.params.outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(Math.random() * patchbay.params.inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(Math.random() * patchbay.params.outCircle.arcs[outArc].ports.length);\n          patchbay.createConnection(patchbay.params.inCircle.arcs[inArc].ports[inPortIndex], patchbay.params.outCircle.arcs[outArc].ports[outPortIndex]);\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/PatchbaySimParams.js"],"names":["utils","testingNodes","makeTestingNodes","patchbay","startingIndex","Math","floor","random","length","index","i","rColorIndex","colors","palette","color","params","outCircle","addArc","name","inCircle","rOutputs","outputs","totOutArcs","arcs","o","addPort","ports","rInputs","inputs","totInArcs","inArc","d","outArc","inPortIndex","outPortIndex","createConnection"],"mappings":"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","sourcesContent":["import * as utils from './modules/DrawUtils'\n\nconst testingNodes = [\n  {\n    'name': 'Phone',\n    'inputs': ['Dial', 'Mic'],\n    'outputs': ['Bell']\n  },\n  {\n    'name': 'Biggie',\n    'inputs': [],\n    'outputs': ['Nod', 'Position']\n  },\n  {\n    'name': 'Switch',\n    'inputs': ['State'],\n    'outputs': []\n  },\n  {\n    'name': 'Toy-Pony',\n    'inputs': [],\n    'outputs': ['speed']\n  },\n  {\n    'name': 'Maraca',\n    'inputs': ['Intensity', 'Beat'],\n    'outputs': []\n  },\n  {\n    'name': 'Guitar',\n    'inputs': ['Volume', 'Speed', 'Pitch'],\n    'outputs': []\n  },\n  {\n    'name': 'Lamp',\n    'inputs': [],\n    'outputs': ['Brightness', 'State']\n  },\n  {\n    'name': 'Boombox',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume', 'Song']\n  },\n  {\n    'name': 'Snare',\n    'inputs': ['Beat', 'Volume'],\n    'outputs': ['Volume']\n  },\n  {\n    'name': 'Monome',\n    'inputs': ['Pitch', 'State'],\n    'outputs': []\n  },\n  {\n    'name': 'Drawing-Bot',\n    'inputs': [],\n    'outputs': ['Speed', 'Direction', 'Pen-Height']\n  }\n];\n\nfunction makeTestingNodes(patchbay) {\n  // test nodes for playing with patchbay\n  // create a new arc for the Tester\n  const startingIndex = Math.floor(Math.random() * testingNodes.length);\n  for (let index = 0; index < testingNodes.length; index++) {\n    const i = (index + startingIndex) % testingNodes.length;\n    const rColorIndex = i % utils.colors.palette.length;\n    const color = utils.colors.palette[rColorIndex];\n    patchbay.params.outCircle.addArc(testingNodes[i].name, color, i + 2); // ID ???\n    patchbay.params.inCircle.addArc(testingNodes[i].name, color, i + 2);\n    const rOutputs = testingNodes[i].outputs.length;\n    const totOutArcs = patchbay.params.outCircle.arcs.length;\n    for (let o = 0; o < rOutputs; o++) {\n      patchbay.params.outCircle.arcs[totOutArcs - 1].addPort(o);\n      patchbay.params.outCircle.arcs[totOutArcs - 1].ports[o].name = testingNodes[i].outputs[o];\n    }\n    const rInputs = testingNodes[i].inputs.length;\n    const totInArcs = patchbay.params.inCircle.arcs.length;\n    for (let o = 0; o < rInputs; o++) {\n        patchbay.params.inCircle.arcs[totInArcs - 1].addPort(o);\n        patchbay.params.inCircle.arcs[totInArcs - 1].ports[o].name = testingNodes[i].inputs[o];\n    }\n  }\n  for (let inArc = 0; inArc < patchbay.params.inCircle.arcs.length; inArc++) {\n    if(patchbay.params.inCircle.arcs[inArc].ports.length > 0) {\n      for (let d = 0; d < 20; d++) {\n        const outArc = Math.floor(\n          Math.random() * patchbay.params.outCircle.arcs.length);\n        if(patchbay.params.outCircle.arcs[outArc].ports.length > 0) {\n          const inPortIndex = Math.floor(\n            Math.random() * patchbay.params.inCircle.arcs[inArc].ports.length);\n          const outPortIndex = Math.floor(\n            Math.random() * patchbay.params.outCircle.arcs[outArc].ports.length);\n          patchbay.createConnection(\n            patchbay.params.inCircle.arcs[inArc].ports[inPortIndex],\n            patchbay.params.outCircle.arcs[outArc].ports[outPortIndex]\n          );\n        }\n      }\n    }\n  }\n}\n\nexport { makeTestingNodes }\n"]},"metadata":{},"sourceType":"module"}