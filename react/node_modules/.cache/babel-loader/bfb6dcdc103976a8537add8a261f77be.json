{"ast":null,"code":"import * as utils from './PatchbayUtils';\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3\n};\n\nclass Finger {\n  constructor(inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n    this.justErased = false;\n  }\n\n  update() {\n    if (this.down) {\n      this.findHover();\n    }\n\n    if (this.down && this.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n\n      if (this.outCircle.touched) {\n        this.outCircle.radiansMoved = out_radianDiff;\n      } else if (this.inCircle.touched) {\n        this.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover() {\n    if (!this.touchedPort) {\n      return;\n    }\n\n    if (this.hoveredPort) {\n      this.hoveredPort = undefined;\n    }\n\n    this.findHoveredPort(this.outCircle);\n\n    if (this.hoveredPort) {\n      return;\n    }\n\n    this.findHoveredPort(this.inCircle);\n\n    if (this.hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort(circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n\n    if (this.touchedPort.type === circle.type) {\n      return;\n    }\n\n    for (let arc of circle.getExpandedArcs()) {\n      const totalPorts = arc.ports.length;\n\n      for (let n = 0; n < totalPorts; n++) {\n        const port = arc.ports[n];\n\n        if (port.isUserTouching(this.x, this.y)) {\n          this.hoveredPort = port;\n          break;\n        }\n      }\n    }\n  }\n\n  touchEvent() {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n\n    if (this.handleDeleteConnection()) {\n      return;\n    } // set all connections.hovered to false\n\n\n    this.unselectAllConnections();\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n\n    if (this.inCircle.isCloseTo(this.x, this.y)) {\n      port = this.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    } else if (this.outCircle.isCloseTo(this.x, this.y)) {\n      port = this.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n\n    if (port) {\n      this.touchedPort = port;\n    }\n  }\n\n  handleDeleteConnection() {\n    for (let i in this.connections) {\n      const conn = this.connections[i];\n\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  resetFromNewCoords(x, y) {\n    if (this.x && this.y) {\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease() {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections() {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving(x, y) {\n    this.inCircle.tapEvent();\n    this.outCircle.tapEvent(); // reset some Finger variables\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease(); // set all connections.hovered to false\n\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    } else {\n      this.justErased = false;\n    } // find which Connection is being interacted with\n\n\n    if (this.touchedPort) {\n      // then, find the interactive connection\n      this.unselectAllConnections();\n\n      for (let name in this.connections) {\n        const conn = this.connections[name];\n\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()) {\n          conn.selected = true;\n        }\n      }\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent(x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.touchedPort;\n    const hoveredPort = this.hoveredPort;\n\n    if (touchedPort && hoveredPort) {\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    this.unselectAllConnections();\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered() {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n  }\n\n  makeConnection(port1, port2) {\n    let inPort;\n    let outPort;\n\n    if (port1.type === utils.inType) {\n      inPort = port1;\n      outPort = port2;\n    } else {\n      inPort = port2;\n      outPort = port1;\n    }\n\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent(x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched;\n\n    if (!justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, utils.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, utils.outType);\n\n    if (justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian(type) {\n    return type === utils.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter(x, y, type) {\n    let middleX = this.outCircle.x;\n    let middleY = this.outCircle.y;\n\n    if (type === utils.inType) {\n      middleX = this.inCircle.x;\n      middleY = this.inCircle.y;\n    }\n\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n\n    if (x > middleX) {\n      if (y > middleY) {\n        // bottom right\n        return Math.atan(yDist / xDist);\n      } else if (y < middleY) {\n        // top right\n        return Math.atan(xDist / yDist) + Math.PI * 1.5;\n      } else {\n        // we're touching the y line\n        return 0;\n      }\n    } else if (x < middleX) {\n      if (y > middleY) {\n        // bottom left\n        return Math.atan(xDist / yDist) + Math.PI * 0.5;\n      } else if (y < middleY) {\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      } else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    } else {\n      //we're touching the x line\n      if (y > middleY) {\n        return Math.PI * 0.5;\n      } else if (y < middleY) {\n        return Math.PI * 1.5;\n      } else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n\n}\n\nexport { Finger };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Finger.js"],"names":["utils","fingerDefaults","tapPixelsMovedThresh","Finger","constructor","inCircle","outCircle","connections","onMakeConnection","onDeleteConnection","touchedPort","undefined","hoveredPort","x","y","xStart","yStart","xDiff","yDiff","down","didMove","inRadianDiff","inRadianPrev","inRadianNew","outRadianDiff","outRadianPrev","outRadianNew","justErased","update","findHover","arcs","length","in_radianDiff","out_radianDiff","touched","radiansMoved","findHoveredPort","circle","type","arc","getExpandedArcs","totalPorts","ports","n","port","isUserTouching","touchEvent","handleDeleteConnection","unselectAllConnections","clearTouchedHovered","isCloseTo","mouseEvent","i","conn","resetFromNewCoords","resetOnRelease","radianDown","radianDiff","name","selected","releaseWithoutMoving","tapEvent","inPort","isTouched","outPort","clearCirclesTouchedHovered","releaseEvent","getDistance","makeConnection","port1","port2","inType","moveEvent","justTouched","radiansFromCenter","outType","getRadian","middleX","middleY","yDist","Math","abs","xDist","atan","PI"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\n\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3\n};\n\n\nclass Finger {\n  constructor (inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n\n    this.justErased = false;\n  }\n\n  update () {\n    if (this.down) {\n      this.findHover();\n    }\n    if (this.down && this.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n      if(this.outCircle.touched){\n        this.outCircle.radiansMoved = out_radianDiff;\n      }\n      else if(this.inCircle.touched){\n        this.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  findHover () {\n    if (!this.touchedPort) {\n      return;\n    }\n    if (this.hoveredPort) {\n      this.hoveredPort = undefined;\n    }\n    this.findHoveredPort(this.outCircle);\n    if (this.hoveredPort) {\n      return;\n    }\n    this.findHoveredPort(this.inCircle);\n    if (this.hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort (circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n    if (this.touchedPort.type === circle.type) {\n      return;\n    }\n    for (let arc of circle.getExpandedArcs()) {\n      const totalPorts = arc.ports.length;\n      for (let n = 0; n < totalPorts; n++) {\n        const port = arc.ports[n];\n        if (port.isUserTouching(this.x, this.y)) {\n          this.hoveredPort = port;\n          break;\n        }\n      }\n    }\n  }\n\n  touchEvent () {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n    if (this.handleDeleteConnection()) {\n      return;\n    }\n    // set all connections.hovered to false\n    this.unselectAllConnections();\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n    if(this.inCircle.isCloseTo(this.x, this.y)){\n      port = this.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    }\n    else if(this.outCircle.isCloseTo(this.x, this.y)){\n      port = this.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n    if (port) {\n      this.touchedPort = port;\n    }\n  }\n\n  handleDeleteConnection () {\n    for(let i in this.connections){\n      const conn = this.connections[i];\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  resetFromNewCoords (x, y) {\n    if(this.x && this.y){\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease () {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections () {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving (x, y) {\n    this.inCircle.tapEvent();\n    this.outCircle.tapEvent();\n    // reset some Finger variables\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    // set all connections.hovered to false\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    }\n    else {\n      this.justErased = false;\n    }\n    // find which Connection is being interacted with\n    if(this.touchedPort){\n      // then, find the interactive connection\n      this.unselectAllConnections();\n      for (let name in this.connections){\n        const conn = this.connections[name];\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()){\n          conn.selected = true;\n        }\n      }\n    }\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent (x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this.touchedPort;\n    const hoveredPort = this.hoveredPort;\n    if (touchedPort && hoveredPort){\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    this.unselectAllConnections();\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered () {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this.touchedPort = undefined;\n    this.hoveredPort = undefined;\n  }\n\n  makeConnection (port1, port2) {\n    let inPort;\n    let outPort;\n    if (port1.type === utils.inType){\n      inPort = port1;\n      outPort = port2;\n    }\n    else{\n      inPort = port2;\n      outPort = port1;\n    }\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent (x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched;\n    if (!justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, utils.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, utils.outType);\n    if (justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian (type) {\n    return type === utils.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter (x, y, type) {\n    let middleX = this.outCircle.x;\n    let middleY = this.outCircle.y;\n    if (type === utils.inType){\n      middleX = this.inCircle.x;\n      middleY = this.inCircle.y;\n    }\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n    if (x > middleX){\n      if (y > middleY){\n        // bottom right\n        return Math.atan(yDist / xDist);\n      }\n      else if (y < middleY){\n        // top right\n        return Math.atan(xDist / yDist) + (Math.PI * 1.5);\n      }\n      else {\n        // we're touching the y line\n        return 0;\n      }\n    }\n    else if (x < middleX){\n      if (y > middleY){\n        // bottom left\n        return Math.atan(xDist / yDist) + (Math.PI * 0.5);\n      }\n      else if (y < middleY){\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      }\n      else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    }\n    else {\n      //we're touching the x line\n      if (y > middleY){\n        return Math.PI * 0.5;\n      }\n      else if (y < middleY){\n        return Math.PI * 1.5;\n      }\n      else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n}\n\nexport { Finger }\n"]},"metadata":{},"sourceType":"module"}