{"ast":null,"code":"import _slicedToArray from \"/Users/andy/Documents/github/patchbay-ble-mesh/react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from './PatchbayUtils';\nimport { Port } from './Port';\nconst inOutAngleOffsets = {};\ninOutAngleOffsets[utils.inType] = 0.375;\ninOutAngleOffsets[utils.outType] = 0.875;\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: inOutAngleOffsets\n};\n\nclass Arc {\n  constructor(context, parent, type, name, id, color, getGlobalTouchedPort, getGlobalHoveredPort) {\n    this.context = context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this.getGlobalTouchedPort = getGlobalTouchedPort;\n    this.getGlobalHoveredPort = getGlobalHoveredPort;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  } // GETTERS\n\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  createPort(id, name) {\n    const port = new Port(this.context, this, this._type, id, name, this._color, this.getGlobalTouchedPort, this.getGlobalHoveredPort);\n    port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    return port;\n  }\n\n  addPort(port) {\n    this._ports.push(port); // update some draw settings that change when ports.length > 0\n\n\n    this.shouldDrawGutter = this._type === utils.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  getIndexOfPort(port) {\n    for (let _ref of this._ports.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      let i = _ref2[0];\n      let p = _ref2[1];\n\n      if (p === port) {\n        return i;\n      }\n    }\n\n    return undefined;\n  }\n\n  adjustToScreenSize(radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this.x = x;\n    this.y = y;\n\n    for (let port of this._ports) {\n      port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    }\n  }\n\n  update(start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    this.drawnLineWidth = utils.clipValue(this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + utils.PI2 * arcDefaults.gutterStartEndScaler;\n    this.gutterEnd = this.end - utils.PI2 * arcDefaults.gutterStartEndScaler;\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let _ref3 of this._ports.entries()) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      let i = _ref4[0];\n      let port = _ref4[1];\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getPortNear(x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.drawnLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.shouldDrawGutter) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterThickness, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawAllPortNames() {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName(port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + this.rotStep / 2 + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    sizeScaler = utils.clipValue(sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/github/patchbay-ble-mesh/react/src/modules/Arc.js"],"names":["utils","Port","inOutAngleOffsets","inType","outType","arcDefaults","emptyLineWidthScaler","gutterThicknessScaler","gutterStartEndScaler","sizeScalerPreMultiplier","angleOffset","Arc","constructor","context","parent","type","name","id","color","getGlobalTouchedPort","getGlobalHoveredPort","_parent","_type","_color","_name","_id","_sizeScaler","_ports","_touched","_isSelected","start","undefined","end","x","y","PI2","radius","lineWidth","drawnLineWidth","drawnLineWidthScaler","shouldDrawGutter","gutterStart","gutterEnd","gutterThickness","ports","isSelected","touched","sizeScaler","newVal","createPort","port","adjustToScreenSize","addPort","push","getIndexOfPort","entries","i","p","update","modifySizeScaler","clipValue","updatePorts","updateGutter","Math","max","rotStep","length","radLocation","getPortNear","isUserTouching","drawArc","save","colors","background","restore","drawAllPortNames","drawPortName","indexOfPort","portRelRadsToPort","radiansToTouchedPort","rotate","drawName","drawPorts","PI","visible","draw","pow"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { Port } from './Port'\n\nconst inOutAngleOffsets = {};\ninOutAngleOffsets[utils.inType] = 0.375;\ninOutAngleOffsets[utils.outType] = 0.875;\n\nconst arcDefaults = {\n  emptyLineWidthScaler: 0.1,\n  gutterThicknessScaler: 0.77,\n  gutterStartEndScaler: 0.006,\n  sizeScalerPreMultiplier: 1.9,\n  angleOffset: inOutAngleOffsets\n};\n\nclass Arc {\n  constructor (context, parent, type, name, id, color, getGlobalTouchedPort, getGlobalHoveredPort) {\n    this.context = context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n\n    this.getGlobalTouchedPort = getGlobalTouchedPort;\n    this.getGlobalHoveredPort = getGlobalHoveredPort;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._touched = false;\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.drawnLineWidth = undefined;\n    this.drawnLineWidthScaler = arcDefaults.emptyLineWidthScaler;\n\n    this.shouldDrawGutter = false;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterThickness = undefined;\n  }\n\n  // GETTERS\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get ports () { return this._ports; }\n\n  get isSelected () { return this._isSelected; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set touched (newVal) { this._touched = newVal; }\n\n  createPort (id, name) {\n    const port = new Port(\n      this.context,\n      this,\n      this._type,\n      id,\n      name,\n      this._color,\n      this.getGlobalTouchedPort,\n      this.getGlobalHoveredPort\n    );\n    port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    return port;\n  }\n\n  addPort (port) {\n    this._ports.push(port);\n    // update some draw settings that change when ports.length > 0\n    this.shouldDrawGutter = this._type === utils.inType;\n    this.drawnLineWidthScaler = 1;\n  }\n\n  getIndexOfPort (port) {\n    for (let [i, p] of this._ports.entries()) {\n      if (p === port) {\n        return i;\n      }\n    }\n    return undefined;\n  }\n\n  adjustToScreenSize (radius, lineWidth, x, y) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    this.x = x;\n    this.y = y;\n    for (let port of this._ports) {\n      port.adjustToScreenSize(this.radius, this.lineWidth, this.x, this.y);\n    }\n  }\n\n  update (start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    this.drawnLineWidth = utils.clipValue(\n      this.lineWidth * this.drawnLineWidthScaler, 1);\n    this.updatePorts();\n    if (this.shouldDrawGutter) {\n      this.updateGutter();\n    }\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterThickness = Math.max(\n      this.lineWidth * arcDefaults.gutterThicknessScaler, 1);\n    this.gutterStart = this.start + (utils.PI2 * arcDefaults.gutterStartEndScaler);\n    this.gutterEnd = this.end - (utils.PI2 * arcDefaults.gutterStartEndScaler);\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let [i, port] of this._ports.entries()) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      port.update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getPortNear (x, y) {\n    for (let port of this._ports) {\n      if (port.isUserTouching(x, y)) {\n        return port;\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.drawnLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.shouldDrawGutter) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterThickness, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawAllPortNames () {\n    for (let port of this._ports) {\n      this.drawPortName(port);\n    }\n  }\n\n  drawPortName (port) {\n    const indexOfPort = this.getIndexOfPort(port);\n    const portRelRadsToPort = this.rotStep * indexOfPort;\n    const radiansToTouchedPort = this.start + (this.rotStep / 2) + portRelRadsToPort;\n    this.context.save();\n    this.context.rotate(radiansToTouchedPort);\n    port.drawName();\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let port of this._ports) {\n      if (port.visible) {\n        port.draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    sizeScaler = utils.clipValue(\n      sizeScaler * arcDefaults.sizeScalerPreMultiplier, 0, 1);\n    return Math.pow(sizeScaler, 2);\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}