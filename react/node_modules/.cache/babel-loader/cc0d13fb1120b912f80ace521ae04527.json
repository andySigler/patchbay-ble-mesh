{"ast":null,"code":"import { Connection } from './Connection';\nconst appParamsDefaults = {\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor(context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._screenSize = 1; // previously known as `usedSize`\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  createConnection(inPort, outPort) {\n    const name = Connection.generateName(inPort, outPort);\n    this.deleteConnection(name);\n    const newConnection = new Connection(this, inPort, outPort, name);\n    this._connections[name] = newConnection;\n  }\n\n  deleteConnection(conn) {\n    if (this._connections[name]) {\n      delete this._connections[name];\n    }\n  }\n\n  getPort(parentID, portID, type) {\n    const circle = type === this.inType ? this.inCircle : this.outCircle;\n\n    for (let i = 0; i < circle.arcs.length; i++) {\n      if (circle.arcs[i].id === parentID) {\n        return circle.arcs[i].ports[portID];\n      }\n    }\n\n    return undefined;\n  } // GETTERS\n\n\n  get testingGUI() {\n    return this._testingGUI;\n  }\n\n  get inCircle() {\n    return this._inCircle;\n  }\n\n  get outCircle() {\n    return this._outCircle;\n  }\n\n  get connections() {\n    return this._connections;\n  }\n\n  get inType() {\n    return this._inType;\n  }\n\n  get outType() {\n    return this._outType;\n  }\n\n  get deleteType() {\n    return this._deleteType;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get middleX() {\n    return this._middleX;\n  }\n\n  get middleY() {\n    return this._middleY;\n  }\n\n  get screenSize() {\n    return this._screenSize;\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  } // SETTERS\n\n\n  set touchedPort(newPort) {\n    this._touchedPort = newPort;\n  }\n\n  set hoveredPort(newPort) {\n    this._hoveredPort = newPort;\n  }\n\n  set inCircle(circle) {\n    this._inCircle = circle;\n  }\n\n  set outCircle(circle) {\n    this._outCircle = circle;\n  }\n\n  set width(newVal) {\n    this._width = newVal;\n    this.updateScreenPositions();\n  }\n\n  set height(newVal) {\n    this._height = newVal;\n    this.updateScreenPositions();\n  }\n\n  updateScreenPositions() {\n    this._middleX = this._width / 2;\n    this._middleY = this._height / 2;\n    this._screenSize = Math.min(this._width, this._height * appParamsDefaults.globalScalerHeightMultiplier);\n    this._screenSize *= appParamsDefaults.globalScalerMultiplier;\n    const xOffset = this._width * appParamsDefaults.circleCenterXOffsetScaler;\n    const yOffset = this._height * appParamsDefaults.circleCenterYOffsetScaler;\n    this.inCircle.centerX = this._middleX - xOffset;\n    this.outCircle.centerX = this._middleX + xOffset;\n    this.inCircle.centerY = this._middleY - yOffset;\n    this.outCircle.centerY = this._middleY + yOffset;\n  }\n\n}\n\nexport { AppParams };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/AppParams.js"],"names":["Connection","appParamsDefaults","globalScalerHeightMultiplier","globalScalerMultiplier","circleCenterXOffsetScaler","circleCenterYOffsetScaler","AppParams","constructor","context","_context","_width","_height","_middleX","_middleY","_screenSize","_touchedPort","undefined","_hoveredPort","_inType","_outType","_deleteType","_connections","_inCircle","_outCircle","_testingGUI","createConnection","inPort","outPort","name","generateName","deleteConnection","newConnection","conn","getPort","parentID","portID","type","circle","inType","inCircle","outCircle","i","arcs","length","id","ports","testingGUI","connections","outType","deleteType","width","height","middleX","middleY","screenSize","touchedPort","hoveredPort","newPort","newVal","updateScreenPositions","Math","min","xOffset","yOffset","centerX","centerY"],"mappings":"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","sourcesContent":["import { Connection } from './Connection'\n\nconst appParamsDefaults = {\n  globalScalerHeightMultiplier: 1.2,\n  globalScalerMultiplier: 0.9,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1\n};\n\nclass AppParams {\n  /*\n  Class for storing globally-used drawing params.\n  There should be only one (1) instance of this object in the application\n    and many instances can store a reference back to this single instance.\n  Then, when the screen dimensions are changed on the device, this instance\n    can update, and all objects holding a reference to is can use it's values\n  */\n  constructor (context) {\n    this._context = context;\n    this._width = 1;\n    this._height = 1;\n    this._middleX = 1;\n    this._middleY = 1;\n    this._screenSize = 1; // previously known as `usedSize`\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this._inType = 'in';\n    this._outType = 'out';\n    this._deleteType = 'delete';\n    this._connections = {};\n    this._inCircle = undefined;\n    this._outCircle = undefined;\n    this._testingGUI = false;\n  }\n\n  createConnection (inPort, outPort) {\n    const name = Connection.generateName(inPort, outPort);\n    this.deleteConnection(name);\n    const newConnection = new Connection(this, inPort, outPort, name);\n    this._connections[name] = newConnection;\n  }\n\n  deleteConnection (conn) {\n    if (this._connections[name]) {\n      delete this._connections[name];\n    }\n  }\n\n  getPort (parentID, portID, type) {\n    const circle = type === this.inType ? this.inCircle : this.outCircle;\n    for (let i = 0; i < circle.arcs.length; i++) {\n      if (circle.arcs[i].id === parentID) {\n        return circle.arcs[i].ports[portID];\n      }\n    }\n    return undefined;\n  }\n\n  // GETTERS\n\n  get testingGUI () { return this._testingGUI; }\n\n  get inCircle () { return this._inCircle; }\n\n  get outCircle () { return this._outCircle; }\n\n  get connections () { return this._connections; }\n\n  get inType () { return this._inType; }\n\n  get outType () { return this._outType; }\n\n  get deleteType () { return this._deleteType; }\n\n  get context () { return this._context; }\n\n  get width () { return this._width; }\n\n  get height () { return this._height; }\n\n  get middleX () { return this._middleX; }\n\n  get middleY () { return this._middleY; }\n\n  get screenSize () { return this._screenSize; }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  // SETTERS\n\n  set touchedPort (newPort) { this._touchedPort = newPort; }\n\n  set hoveredPort (newPort) { this._hoveredPort = newPort; }\n\n  set inCircle (circle) { this._inCircle = circle; }\n\n  set outCircle (circle) { this._outCircle = circle; }\n\n  set width (newVal) {\n    this._width = newVal;\n    this.updateScreenPositions();\n  }\n\n  set height (newVal) {\n    this._height = newVal;\n    this.updateScreenPositions();\n  }\n\n  updateScreenPositions () {\n    this._middleX = this._width / 2;\n    this._middleY = this._height / 2;\n    this._screenSize = Math.min(\n      this._width,\n      this._height * appParamsDefaults.globalScalerHeightMultiplier\n    );\n    this._screenSize *= appParamsDefaults.globalScalerMultiplier;\n    const xOffset = this._width * appParamsDefaults.circleCenterXOffsetScaler;\n    const yOffset = this._height * appParamsDefaults.circleCenterYOffsetScaler;\n    this.inCircle.centerX = this._middleX - xOffset;\n    this.outCircle.centerX = this._middleX + xOffset;\n    this.inCircle.centerY = this._middleY - yOffset;\n    this.outCircle.centerY = this._middleY + yOffset;\n  }\n}\n\nexport { AppParams }\n"]},"metadata":{},"sourceType":"module"}