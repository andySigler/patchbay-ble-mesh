{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params, this.createConnection, this.deleteConnection);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.params.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.finger.x, this.finger.y, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, this.finger.x, this.finger.y, touchedLineWidth * 2, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(inPort, outPort) {\n    const tempName = Connection.generateName(inPort, outPorn);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  deleteConnection(inPort, outPort) {\n    const name = Connection.generateName(inPort, outPort);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedLineMaxWidth","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","touchCircleRadiusScaler","Patchbay","constructor","context","params","inCircle","inType","outCircle","outType","finger","createConnection","deleteConnection","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","update","i","connections","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","screenSize","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","touchedPort","drawArc","x","y","PI2","colors","white","touchedLineWidth","Math","sin","wobbleCounter","drawLine","green","hoveredPort","setSize","width","height","fillStyle","background","fillRect","inPort","outPort","tempName","generateName","outPorn","getPort","outputID","outputIndex","inputID","inputIndex","newConnection","addConnection","exists","name","eraseNodeFromConnections","id","n","conn","parent","handleUserEvent","type","justTouched","moveEvent","touchEvent","releaseEvent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,IAAI,EAAE,MAFe;AAGrBC,EAAAA,OAAO,EAAE;AAHY,CAAvB;AAOA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EAAE,GADQ;AAEvBC,EAAAA,gBAAgB,EAAE,IAFK;AAGvBC,EAAAA,0BAA0B,EAAE,IAHL;AAIvBC,EAAAA,mBAAmB,EAAE,CAJE;AAKvBC,EAAAA,mBAAmB,EAAE,CALE;AAMvBC,EAAAA,mBAAmB,EAAE,IANE;AAOvBC,EAAAA,oBAAoB,EAAE,GAPC;AAQvBC,EAAAA,wBAAwB,EAAE,GARH;AASvBC,EAAAA,uBAAuB,EAAE;AATF,CAAzB;;AAYA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,SAAKC,MAAL,GAAc,IAAIrB,SAAJ,CAAcoB,OAAd,CAAd;AACA,SAAKC,MAAL,CAAYC,QAAZ,GAAuB,IAAInB,MAAJ,CACrB,KAAKkB,MADgB,EAErB,KAAKA,MAAL,CAAYE,MAFS,EAGrBf,gBAAgB,CAACE,gBAHI,EAIrBF,gBAAgB,CAACC,aAJI,CAAvB;AAMA,SAAKY,MAAL,CAAYG,SAAZ,GAAwB,IAAIrB,MAAJ,CACtB,KAAKkB,MADiB,EAEtB,KAAKA,MAAL,CAAYI,OAFU,EAGtBjB,gBAAgB,CAACE,gBAHK,EAItBF,gBAAgB,CAACC,aAJK,CAAxB;AAMA,SAAKiB,MAAL,GAAc,IAAIxB,MAAJ,CACZ,KAAKmB,MADO,EACC,KAAKM,gBADN,EACwB,KAAKC,gBAD7B,CAAd;AAGA,SAAKC,YAAL,GAAoBC,SAApB;AACD;;AAEDC,EAAAA,QAAQ,GAAI;AACV,QAAI,KAAKF,YAAT,EAAuB;AACrBG,MAAAA,oBAAoB,CAAC,KAAKH,YAAN,CAApB;AACA,WAAKA,YAAL,GAAoBC,SAApB;AACD;;AACD,SAAKJ,MAAL,CAAYO,MAAZ;AACA,SAAKZ,MAAL,CAAYG,SAAZ,CAAsBS,MAAtB;AACA,SAAKZ,MAAL,CAAYC,QAAZ,CAAqBW,MAArB;;AACA,SAAI,IAAIC,CAAR,IAAa,KAAKb,MAAL,CAAYc,WAAzB,EAAqC;AACnC,WAAKd,MAAL,CAAYc,WAAZ,CAAwBD,CAAxB,EAA2BD,MAA3B;AACD;;AAED,SAAKZ,MAAL,CAAYD,OAAZ,CAAoBgB,IAApB;AACA,SAAKC,WAAL;AAEA,SAAKhB,MAAL,CAAYG,SAAZ,CAAsBc,QAAtB;AACA,SAAKjB,MAAL,CAAYC,QAAZ,CAAqBgB,QAArB;AAEA,SAAKjB,MAAL,CAAYG,SAAZ,CAAsBe,SAAtB;AACA,SAAKlB,MAAL,CAAYC,QAAZ,CAAqBiB,SAArB;AAEA,SAAKlB,MAAL,CAAYG,SAAZ,CAAsBgB,SAAtB;AACA,SAAKnB,MAAL,CAAYC,QAAZ,CAAqBkB,SAArB;;AAEA,SAAI,IAAIN,CAAR,IAAa,KAAKb,MAAL,CAAYc,WAAzB,EAAqC;AACnC,WAAKd,MAAL,CAAYc,WAAZ,CAAwBD,CAAxB,EAA2BO,IAA3B;AACD;;AAED,UAAMC,YAAY,GAAG,KAAKrB,MAAL,CAAYsB,UAAZ,GAAyBnC,gBAAgB,CAACS,uBAA/D;AACA,UAAM2B,eAAe,GAAG,KAAKvB,MAAL,CAAYsB,UAAZ,GAAyBnC,gBAAgB,CAACG,0BAAlE;AACA,SAAKkC,aAAL;AACA,SAAKC,eAAL,CAAqBJ,YAArB,EAAmCE,eAAnC;AACA,SAAKG,eAAL,CAAqBL,YAArB,EAAmCE,eAAnC;AAEA,SAAKvB,MAAL,CAAYD,OAAZ,CAAoB4B,OAApB;AACA,SAAKnB,YAAL,GAAoBoB,qBAAqB,CAAC,MAAM,KAAKlB,QAAL,EAAP,CAAzC;AACD;;AAEDe,EAAAA,eAAe,CAAEJ,YAAF,EAAgBE,eAAhB,EAAiC;AAC9C,QAAI,CAAC,KAAKvB,MAAL,CAAY6B,WAAjB,EAA8B;AAC5B;AACD;;AACD,SAAK7B,MAAL,CAAYD,OAAZ,CAAoBgB,IAApB;AACArC,IAAAA,KAAK,CAACoD,OAAN,CACE,KAAK9B,MAAL,CAAYD,OADd,EAEE,KAAKC,MAAL,CAAY6B,WAAZ,CAAwBE,CAF1B,EAE6B,KAAK/B,MAAL,CAAY6B,WAAZ,CAAwBG,CAFrD,EAGEX,YAHF,EAGgB,CAHhB,EAGmB3C,KAAK,CAACuD,GAHzB,EAG8BV,eAH9B,EAIE7C,KAAK,CAACwD,MAAN,CAAaC,KAAb,EAJF,EAIwB1B,SAJxB;AAMA,SAAKT,MAAL,CAAYD,OAAZ,CAAoB4B,OAApB;AACD;;AAEDH,EAAAA,aAAa,GAAI;AACf,QAAI,CAAC,KAAKxB,MAAL,CAAY6B,WAAjB,EAA8B;AAC5B;AACD;;AACD,QAAIO,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKtC,MAAL,CAAY6B,WAAZ,CAAwBU,aAAjC,CAAvB;AACAH,IAAAA,gBAAgB,GAAG,CAACA,gBAAgB,GAAG,CAApB,IAAyB,CAA5C,CALe,CAKgC;;AAC/CA,IAAAA,gBAAgB,IAAIjD,gBAAgB,CAACI,mBAAjB,GAAuCJ,gBAAgB,CAACK,mBAA5E;AACA4C,IAAAA,gBAAgB,IAAIjD,gBAAgB,CAACK,mBAArC;AACA,SAAKQ,MAAL,CAAYD,OAAZ,CAAoBgB,IAApB;AACArC,IAAAA,KAAK,CAAC8D,QAAN,CACE,KAAKxC,MAAL,CAAYD,OADd,EAEE,KAAKC,MAAL,CAAY6B,WAAZ,CAAwBE,CAF1B,EAE6B,KAAK/B,MAAL,CAAY6B,WAAZ,CAAwBG,CAFrD,EAGE,KAAK3B,MAAL,CAAY0B,CAHd,EAGiB,KAAK1B,MAAL,CAAY2B,CAH7B,EAIEI,gBAJF,EAIoB1D,KAAK,CAACwD,MAAN,CAAaO,KAAb,EAJpB;AAMA,SAAKzC,MAAL,CAAYD,OAAZ,CAAoB4B,OAApB,GAfe,CAgBf;;AACA,SAAK3B,MAAL,CAAYD,OAAZ,CAAoBgB,IAApB;AACArC,IAAAA,KAAK,CAACoD,OAAN,CACE,KAAK9B,MAAL,CAAYD,OADd,EAEE,KAAKC,MAAL,CAAY6B,WAAZ,CAAwBE,CAF1B,EAE6B,KAAK/B,MAAL,CAAY6B,WAAZ,CAAwBG,CAFrD,EAGEI,gBAAgB,GAAG,CAHrB,EAGwB,CAHxB,EAG2B1D,KAAK,CAACuD,GAHjC,EAGsC,CAHtC,EAIExB,SAJF,EAIa/B,KAAK,CAACwD,MAAN,CAAaC,KAAb,EAJb;AAMAzD,IAAAA,KAAK,CAACoD,OAAN,CACE,KAAK9B,MAAL,CAAYD,OADd,EAEE,KAAKM,MAAL,CAAY0B,CAFd,EAEiB,KAAK1B,MAAL,CAAY2B,CAF7B,EAGEI,gBAAgB,GAAG,CAHrB,EAGwB,CAHxB,EAG2B1D,KAAK,CAACuD,GAHjC,EAGsC,CAHtC,EAIExB,SAJF,EAIa/B,KAAK,CAACwD,MAAN,CAAaC,KAAb,EAJb;AAMA,SAAKnC,MAAL,CAAYD,OAAZ,CAAoB4B,OAApB;AACD;;AAEDD,EAAAA,eAAe,CAAEL,YAAF,EAAgBE,eAAhB,EAAiC;AAC9C,QAAI,CAAC,KAAKvB,MAAL,CAAY0C,WAAjB,EAA8B;AAC5B;AACD;;AACD,SAAK1C,MAAL,CAAYD,OAAZ,CAAoBgB,IAApB;AACArC,IAAAA,KAAK,CAACoD,OAAN,CACE,KAAK9B,MAAL,CAAYD,OADd,EAEE,KAAKC,MAAL,CAAY0C,WAAZ,CAAwBX,CAF1B,EAE6B,KAAK/B,MAAL,CAAY0C,WAAZ,CAAwBV,CAFrD,EAGEX,YAHF,EAGgB,CAHhB,EAGmB3C,KAAK,CAACuD,GAHzB,EAG8BV,eAH9B,EAIE7C,KAAK,CAACwD,MAAN,CAAaO,KAAb,EAJF,EAIwBhC,SAJxB;AAMA,SAAKT,MAAL,CAAYD,OAAZ,CAAoB4B,OAApB;AACD;;AAEDgB,EAAAA,OAAO,CAAEC,KAAF,EAASC,MAAT,EAAiB;AACtB,SAAK7C,MAAL,CAAY4C,KAAZ,GAAoBA,KAApB;AACA,SAAK5C,MAAL,CAAY6C,MAAZ,GAAqBA,MAArB;AACD;;AAED7B,EAAAA,WAAW,GAAG;AACZ,SAAKhB,MAAL,CAAYD,OAAZ,CAAoB+C,SAApB,GAAgCpE,KAAK,CAACwD,MAAN,CAAaa,UAAb,EAAhC;AACA,SAAK/C,MAAL,CAAYD,OAAZ,CAAoBiD,QAApB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAKhD,MAAL,CAAY4C,KAA/C,EAAsD,KAAK5C,MAAL,CAAY6C,MAAlE;AACD;;AAEDvC,EAAAA,gBAAgB,CAAE2C,MAAF,EAAUC,OAAV,EAAmB;AACjC,UAAMC,QAAQ,GAAGvE,UAAU,CAACwE,YAAX,CAAwBH,MAAxB,EAAgCI,OAAhC,CAAjB;;AACA,QAAI,CAAC,KAAKrD,MAAL,CAAYc,WAAZ,CAAwBqC,QAAxB,CAAL,EAAwC;AACtC,UAAID,OAAO,GAAG,KAAKlD,MAAL,CAAYsD,OAAZ,CAAoBC,QAApB,EAA8BC,WAA9B,EAA2C,KAAKxD,MAAL,CAAYI,OAAvD,CAAd;AACA,UAAI6C,MAAM,GAAG,KAAKjD,MAAL,CAAYsD,OAAZ,CAAoBG,OAApB,EAA6BC,UAA7B,EAAyC,KAAK1D,MAAL,CAAYE,MAArD,CAAb;;AACA,UAAIgD,OAAO,IAAID,MAAf,EAAuB;AACrB,cAAMU,aAAa,GAAG,IAAI/E,UAAJ,CAAe,KAAKoB,MAApB,EAA4BkD,OAA5B,EAAqCD,MAArC,EAA6CE,QAA7C,CAAtB;AACA,aAAKnD,MAAL,CAAY4D,aAAZ,CAA0BT,QAA1B,EAAoCQ,aAApC;AACD;AACF,KAPD,MAQK;AACH;AACA,WAAK3D,MAAL,CAAYc,WAAZ,CAAwBqC,QAAxB,EAAkCU,MAAlC,GAA2C,IAA3C;AACD;;AACD,WAAOV,QAAP;AACD;;AAED5C,EAAAA,gBAAgB,CAAE0C,MAAF,EAAUC,OAAV,EAAmB;AACjC,UAAMY,IAAI,GAAGlF,UAAU,CAACwE,YAAX,CAAwBH,MAAxB,EAAgCC,OAAhC,CAAb;AACA,SAAKlD,MAAL,CAAYO,gBAAZ,CAA6BuD,IAA7B;AACD;;AAEDC,EAAAA,wBAAwB,CAAEC,EAAF,EAAM;AAC5B,SAAK,IAAIC,CAAT,IAAc,KAAKjE,MAAL,CAAYc,WAA1B,EAAuC;AACrC,YAAMoD,IAAI,GAAG,KAAKlE,MAAL,CAAYc,WAAZ,CAAwBmD,CAAxB,CAAb;;AACA,UAAIC,IAAI,CAAChB,OAAL,CAAaiB,MAAb,CAAoBH,EAApB,KAA2BA,EAA3B,IAAiCE,IAAI,CAACjB,MAAL,CAAYkB,MAAZ,CAAmBH,EAAnB,KAA0BA,EAA/D,EAAmE;AACjE,aAAKhE,MAAL,CAAYO,gBAAZ,CAA6B0D,CAA7B;AACD;AACF;AACF;;AAEDG,EAAAA,eAAe,CAAEC,IAAF,EAAQtC,CAAR,EAAWC,CAAX,EAAc;AAC3B,QAAIqC,IAAI,KAAKtF,cAAc,CAACC,KAA5B,EAAmC;AACjC,YAAMsF,WAAW,GAAG,IAApB;AACA,WAAKjE,MAAL,CAAYkE,SAAZ,CAAsBxC,CAAtB,EAAyBC,CAAzB,EAA4BsC,WAA5B;AACA,WAAKjE,MAAL,CAAYmE,UAAZ;AACD,KAJD,MAKK,IAAIH,IAAI,KAAKtF,cAAc,CAACE,IAA5B,EAAkC;AACrC,YAAMqF,WAAW,GAAG,KAApB;AACA,WAAKjE,MAAL,CAAYkE,SAAZ,CAAsBxC,CAAtB,EAAyBC,CAAzB,EAA4BsC,WAA5B;AACD,KAHI,MAIA,IAAID,IAAI,KAAKtF,cAAc,CAACG,OAA5B,EAAqC;AACxC,WAAKmB,MAAL,CAAYoE,YAAZ,CAAyB1C,CAAzB,EAA4BC,CAA5B;AACD;AACF;;AA9KY;;AAiLf,SAASnC,QAAT,EAAmBd,cAAnB","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineMaxWidth: 4,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1,\n  touchCircleRadiusScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.params = new AppParams(context);\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(\n      this.params, this.createConnection, this.deleteConnection\n    );\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    const circleRadius = this.params.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.params.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.params.touchedPort) {\n      return;\n    }\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth = (touchedLineWidth + 1) / 2; // map to 0-1\n    touchedLineWidth *= patchbayDefaults.touchedLineMaxWidth - patchbayDefaults.touchedLineMinWidth;\n    touchedLineWidth += patchbayDefaults.touchedLineMinWidth;\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.finger.x, this.finger.y,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      this.finger.x, this.finger.y,\n      touchedLineWidth * 2, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (inPort, outPort) {\n    const tempName = Connection.generateName(inPort, outPorn);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  deleteConnection (inPort, outPort) {\n    const name = Connection.generateName(inPort, outPort);\n    this.params.deleteConnection(name);\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}