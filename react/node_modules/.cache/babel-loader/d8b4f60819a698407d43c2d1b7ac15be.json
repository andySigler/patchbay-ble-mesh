{"ast":null,"code":"import * as utils from './PatchbayUtils';\nimport { Circle } from './Circle';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nconst patchbayDefaults = {\n  screenPercentage: 0.25,\n  arcThicknessPercentage: 0.08,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\nclass Patchbay {\n  constructor(context) {\n    this.context = context;\n    this.connections = {};\n    this.inCircle = this.createCircle(utils.inType);\n    this.outCircle = this.createCircle(utils.outType);\n    this.finger = this.createFinger();\n    this.width = undefined;\n    this.height = undefined;\n    this.middleX = undefined;\n    this.middleY = undefined;\n    this.screenSize = undefined;\n    this.reqAnimFrame = undefined;\n  }\n\n  createFinger() {\n    return new Finger(this.inCircle, this.outCircle, this.connections, (inPort, outPort) => this.createAndSaveConnection(inPort, outPort), conn => this.deleteConnection(conn));\n  }\n\n  createCircle(type) {\n    return new Circle(this.context, type, patchbayDefaults.screenPercentage, patchbayDefaults.arcThicknessPercentage, () => this.finger.touchedPort, () => this.finger.hoveredPort);\n  }\n\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize() {\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n\n    for (let i in this.connections) {\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables() {\n    this.middleX = this.width / 2;\n    this.middleY = this.height / 2;\n    this.screenSize = Math.min(this.width, this.height);\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = this.middleX - xOffset;\n    this.outCircle.x = this.middleX + xOffset;\n    this.inCircle.y = this.middleY - yOffset;\n    this.outCircle.y = this.middleY + yOffset;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n\n    for (let i in this.connections) {\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n\n    for (let i in this.connections) {\n      this.connections[i].draw();\n    }\n\n    const circleRadius = this.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n    this.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(circleRadius, circleThickness) {\n    if (!this.finger.touchedPort) {\n      return;\n    }\n\n    this.context.save();\n    utils.drawArc(this.context, this.finger.touchedPort.x, this.finger.touchedPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.white(), undefined);\n    this.context.restore();\n  }\n\n  drawTouchLine() {\n    if (!this.finger.touchedPort) {\n      return;\n    }\n\n    this.context.save();\n    utils.drawLine(this.context, this.finger.touchedPort.x, this.finger.touchedPort.y, this.finger.x, this.finger.y, patchbayDefaults.touchedLineWidth, utils.colors.highlight());\n    this.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.context.save();\n    utils.drawCircle(this.context, this.finger.touchedPort.x, this.finger.touchedPort.y, patchbayDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    utils.drawCircle(this.context, this.finger.x, this.finger.y, patchbayDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    this.context.restore();\n  }\n\n  drawHoveredPort(circleRadius, circleThickness) {\n    if (!this.finger.hoveredPort) {\n      return;\n    }\n\n    this.context.save();\n    utils.drawArc(this.context, this.finger.hoveredPort.x, this.finger.hoveredPort.y, circleRadius, 0, utils.PI2, circleThickness, utils.colors.highlight(), undefined);\n    this.context.restore();\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection(inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection(inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection(connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection(conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName(name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === utils.userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    } else if (type === utils.userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    } else if (type === utils.userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","Circle","Connection","Finger","patchbayDefaults","screenPercentage","arcThicknessPercentage","circleCenterXOffsetScaler","circleCenterYOffsetScaler","touchCircleRadiusScaler","touchCircleThicknessScaler","touchedLineWidth","Patchbay","constructor","context","connections","inCircle","createCircle","inType","outCircle","outType","finger","createFinger","width","undefined","height","middleX","middleY","screenSize","reqAnimFrame","inPort","outPort","createAndSaveConnection","conn","deleteConnection","type","touchedPort","hoveredPort","setSize","updateScreenVariables","adjustChildrenToScreenSize","adjustToScreenSize","i","Math","min","xOffset","yOffset","x","y","drawLoop","cancelAnimationFrame","update","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","circleRadius","circleThickness","drawTouchLine","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","drawArc","PI2","colors","white","drawLine","highlight","drawCircle","fillStyle","background","fillRect","saveConnection","createConnection","connection","name","deleteConnectionByName","handleUserEvent","userEventTypes","touch","justTouched","moveEvent","touchEvent","move","release","releaseEvent"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\nimport { Circle } from './Circle'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\n\nconst patchbayDefaults = {\n  screenPercentage: 0.25,\n  arcThicknessPercentage: 0.08,\n  circleCenterXOffsetScaler: 0.3,\n  circleCenterYOffsetScaler: 0.1,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\nclass Patchbay {\n  constructor (context) {\n    this.context = context;\n\n    this.connections = {};\n\n    this.inCircle = this.createCircle(utils.inType);\n    this.outCircle = this.createCircle(utils.outType);\n    this.finger = this.createFinger();\n\n    this.width = undefined;\n    this.height = undefined;\n    this.middleX = undefined;\n    this.middleY = undefined;\n    this.screenSize = undefined;\n\n    this.reqAnimFrame = undefined;\n  }\n\n  createFinger () {\n    return new Finger(\n      this.inCircle,\n      this.outCircle,\n      this.connections,\n      (inPort, outPort) => this.createAndSaveConnection(inPort, outPort),\n      (conn) => this.deleteConnection(conn)\n    );\n  }\n\n  createCircle (type) {\n    return new Circle(\n      this.context,\n      type,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.arcThicknessPercentage,\n      () => this.finger.touchedPort,\n      () => this.finger.hoveredPort\n    );\n  }\n\n  setSize (width, height) {\n    this.width = width;\n    this.height = height;\n    this.updateScreenVariables();\n    this.adjustChildrenToScreenSize();\n  }\n\n  adjustChildrenToScreenSize () {\n    this.inCircle.adjustToScreenSize(this.screenSize);\n    this.outCircle.adjustToScreenSize(this.screenSize);\n    for(let i in this.connections){\n      this.connections[i].adjustToScreenSize(this.screenSize);\n    }\n  }\n\n  updateScreenVariables () {\n    this.middleX = this.width / 2;\n    this.middleY = this.height / 2;\n    this.screenSize = Math.min(this.width, this.height);\n    const xOffset = this.width * patchbayDefaults.circleCenterXOffsetScaler;\n    const yOffset = this.height * patchbayDefaults.circleCenterYOffsetScaler;\n    this.inCircle.x = this.middleX - xOffset;\n    this.outCircle.x = this.middleX + xOffset;\n    this.inCircle.y = this.middleY - yOffset;\n    this.outCircle.y = this.middleY + yOffset;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.inCircle.update();\n    this.outCircle.update();\n    for(let i in this.connections){\n      this.connections[i].update();\n    }\n\n    this.context.save();\n    this.clearCanvas();\n\n    this.inCircle.drawArcs();\n    this.outCircle.drawArcs();\n\n    this.inCircle.drawNames();\n    this.outCircle.drawNames();\n\n    this.inCircle.drawPorts();\n    this.outCircle.drawPorts();\n\n    for(let i in this.connections){\n      this.connections[i].draw();\n    }\n\n    const circleRadius = this.screenSize * patchbayDefaults.touchCircleRadiusScaler;\n    const circleThickness = this.screenSize * patchbayDefaults.touchCircleThicknessScaler;\n    this.drawTouchLine();\n    this.drawTouchedPort(circleRadius, circleThickness);\n    this.drawHoveredPort(circleRadius, circleThickness);\n\n    this.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (circleRadius, circleThickness) {\n    if (!this.finger.touchedPort) {\n      return;\n    }\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.finger.touchedPort.x, this.finger.touchedPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.white(), undefined\n    );\n    this.context.restore();\n  }\n\n  drawTouchLine () {\n    if (!this.finger.touchedPort) {\n      return;\n    }\n    this.context.save();\n    utils.drawLine(\n      this.context,\n      this.finger.touchedPort.x, this.finger.touchedPort.y,\n      this.finger.x, this.finger.y,\n      patchbayDefaults.touchedLineWidth, utils.colors.highlight()\n    );\n    this.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.finger.touchedPort.x, this.finger.touchedPort.y,\n      patchbayDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    utils.drawCircle(\n      this.context,\n      this.finger.x, this.finger.y,\n      patchbayDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    this.context.restore();\n  }\n\n  drawHoveredPort (circleRadius, circleThickness) {\n    if (!this.finger.hoveredPort) {\n      return;\n    }\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.finger.hoveredPort.x, this.finger.hoveredPort.y,\n      circleRadius, 0, utils.PI2, circleThickness,\n      utils.colors.highlight(), undefined\n    );\n    this.context.restore();\n  }\n\n  clearCanvas() {\n    this.context.fillStyle = utils.colors.background();\n    this.context.fillRect(0, 0, this.width, this.height);\n  }\n\n  createAndSaveConnection (inPort, outPort) {\n    this.saveConnection(this.createConnection(inPort, outPort));\n  }\n\n  createConnection (inPort, outPort) {\n    const connection = new Connection(this.context, inPort, outPort);\n    connection.adjustToScreenSize(this.screenSize);\n    return connection;\n  }\n\n  saveConnection (connection) {\n    this.deleteConnection(connection);\n    this.connections[connection.name] = connection;\n  }\n\n  deleteConnection (conn) {\n    this.deleteConnectionByName(conn.name);\n  }\n\n  deleteConnectionByName (name) {\n    if (this.connections[name]) {\n      delete this.connections[name];\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === utils.userEventTypes.touch) {\n      const justTouched = true;\n      this.finger.moveEvent(x, y, justTouched);\n      this.finger.touchEvent();\n    }\n    else if (type === utils.userEventTypes.move) {\n      const justTouched = false;\n      this.finger.moveEvent(x, y, justTouched);\n    }\n    else if (type === utils.userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay }\n"]},"metadata":{},"sourceType":"module"}