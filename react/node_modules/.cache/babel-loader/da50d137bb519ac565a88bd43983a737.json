{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { Port } from './Port';\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85,\n  angleOffset: {\n    in: 0.375,\n    out: .875\n  }\n};\n\nclass Arc {\n  constructor(params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n    this._sizeScaler = 0;\n    this._ports = [];\n    this._focused = false;\n    this._touched = false;\n    this._isSelected = false;\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n    this.test = true;\n  } // GETTERS\n\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get ports() {\n    return this._ports;\n  }\n\n  get focused() {\n    return this._focused;\n  }\n\n  get touched() {\n    return this._touched;\n  }\n\n  get sizeScaler() {\n    return this._sizeScaler;\n  } // SETTERS\n\n\n  set focused(newVal) {\n    this._focused = newVal;\n  }\n\n  set touched(newVal) {\n    this._touched = newVal;\n  }\n\n  holdsTouchedPort() {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort() {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort(index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort;\n  }\n\n  onScreenUpdate(radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update(start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + utils.PI * arcDefaults.gutterScaler;\n    this.gutterEnd = this.end - utils.PI * arcDefaults.gutterScaler;\n    this.gutterLineWidth = undefined;\n\n    if (this._type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts() {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n\n    for (let i = 0; i < this._ports.length; i++) {\n      const radLocation = this.start + this.rotStep * i + this.rotStep / 2;\n\n      this._ports[i].update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort(x, y) {\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].isUserTouching(x, y)) {\n        return this._ports[i];\n      }\n    }\n\n    return undefined;\n  }\n\n  drawArc() {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(this.context, 0, 0, this.radius, this.start, this.end, this.arcLineWidth, this._color(), undefined); // draw a grey arc in the middle of the main arc\n\n    if (this.gutterLineWidth) {\n      utils.drawArc(this.context, 0, 0, this.radius, this.gutterStart, this.gutterEnd, this.gutterLineWidth, utils.colors.background(), undefined);\n    }\n\n    this.context.restore();\n  }\n\n  drawName() {\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n\n        this.context.rotate(this.rotStep);\n      }\n    }\n\n    this.context.restore();\n  }\n\n  drawPorts() {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate(this.start + this.rotStep / 2 - utils.PI * 0.5);\n\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n\n      this.context.rotate(this.rotStep);\n    }\n\n    this.context.restore();\n  }\n\n  modifySizeScaler(sizeScaler) {\n    sizeScaler = utils.clipValue(sizeScaler * arcDefaults.sizeScalerMultiplier, 0, arcDefaults.sizeScalerThresh);\n    return Math.pow(sizeScaler / arcDefaults.sizeScalerThresh, 2);\n  }\n\n}\n\nexport { Arc };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Arc.js"],"names":["utils","Port","arcDefaults","touchingScaler","arcWidthScaler","gutterLineWidthScaler","gutterScaler","emptyArcScaler","sizeScalerMultiplier","sizeScalerThresh","angleOffset","in","out","Arc","constructor","params","parent","type","color","name","id","index","context","_parent","_type","_color","_name","_id","_index","_sizeScaler","_ports","_focused","_touched","_isSelected","start","undefined","end","PI2","radius","lineWidth","arcLineWidth","gutterStart","gutterEnd","gutterLineWidth","test","isSelected","ports","focused","touched","sizeScaler","newVal","holdsTouchedPort","port","touchedPort","Boolean","holdsHoveredPort","hoveredPort","addPort","tempPort","onScreenUpdate","circleX","circleY","update","modifySizeScaler","widthScaler","length","Math","max","updateGutter","updatePorts","PI","inType","rotStep","i","radLocation","getTouchedPort","x","y","isUserTouching","drawArc","save","colors","background","restore","drawName","rotate","drawPorts","visible","draw","clipValue","pow"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\nimport { Port } from './Port'\n\n\nconst arcDefaults = {\n  touchingScaler: 1.0,\n  arcWidthScaler: 0.65,\n  gutterLineWidthScaler: 0.45,\n  gutterScaler: 0.012,\n  emptyArcScaler: 0.1,\n  sizeScalerMultiplier: 1.7,\n  sizeScalerThresh: 0.85,\n  angleOffset: {in: 0.375, out: .875}\n};\n\nclass Arc {\n  constructor (params, parent, type, color, name, id, index) {\n    this.params = params;\n    this.context = params.context;\n\n    this._parent = parent;\n    this._type = type;\n    this._color = color;\n    this._name = name;\n    this._id = id;\n    this._index = index;\n\n    this._sizeScaler = 0;\n\n    this._ports = [];\n\n    this._focused = false;\n    this._touched = false;\n\n    this._isSelected = false;\n\n    this.start = undefined;\n    this.end = undefined;\n    this.angleOffset = arcDefaults.angleOffset[this._type] * utils.PI2;\n    this.radius = undefined;\n    this.lineWidth = undefined;\n    this.arcLineWidth = undefined;\n\n    this.gutterStart = undefined;\n    this.gutterEnd = undefined;\n    this.gutterLineWidth = undefined;\n\n    this.test = true;\n  }\n\n  // GETTERS\n\n  get isSelected () { return this._isSelected; }\n\n  get parent () { return this._parent; }\n\n  get type () { return this._type; }\n\n  get color () { return this._color; }\n\n  get name () { return this._name; }\n\n  get id () { return this._id; }\n\n  get index () { return this._index; }\n\n  get ports () { return this._ports; }\n\n  get focused () { return this._focused; }\n\n  get touched () { return this._touched; }\n\n  get sizeScaler () { return this._sizeScaler; }\n\n  // SETTERS\n\n  set focused (newVal) { this._focused = newVal; }\n\n  set touched (newVal) { this._touched = newVal; }\n\n  holdsTouchedPort () {\n    const port = this.params.touchedPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  holdsHoveredPort () {\n    const port = this.params.hoveredPort;\n    return Boolean(port && port.parent === this);\n  }\n\n  addPort (index) {\n    // a port is simply labelled by it's index\n    const tempPort = new Port(this.params, this, this._type, index, this._color());\n    this._ports[index] = tempPort;\n  }\n\n  onScreenUpdate (radius, lineWidth, circleX, circleY) {\n    this.radius = radius;\n    this.lineWidth = lineWidth;\n    for (let port of this._ports) {\n      port.onScreenUpdate(radius, lineWidth, circleX, circleY);\n    }\n  }\n\n  update (start, end, isSelected, sizeScaler) {\n    // update this Arc's visual draw settings\n    this._sizeScaler = this.modifySizeScaler(sizeScaler);\n    this._isSelected = isSelected;\n    this.start = (start + this.angleOffset) % utils.PI2;\n    this.end = (end + this.angleOffset) % utils.PI2;\n    if (this.end < this.start) {\n      this.end += utils.PI2;\n    }\n    const widthScaler = this._ports.length > 0 ? arcDefaults.arcWidthScaler : arcDefaults.emptyArcScaler;\n    this.arcLineWidth = Math.max(this.lineWidth * widthScaler, 1);\n    this.updateGutter();\n    this.updatePorts();\n  }\n\n  updateGutter() {\n    // if it's an Input Arc and is selected, give it an inner grey \"gutter\"\n    this.gutterStart = this.start + (utils.PI * arcDefaults.gutterScaler);\n    this.gutterEnd = this.end - (utils.PI * arcDefaults.gutterScaler);\n    this.gutterLineWidth = undefined;\n    if (this._type === this.params.inType && this._ports.length > 0) {\n      this.gutterLineWidth = Math.max(\n        this.lineWidth * arcDefaults.gutterLineWidthScaler, 1);\n    }\n  }\n\n  updatePorts () {\n    // update each Port's visual draw settings\n    this.rotStep = (this.end - this.start) / this._ports.length;\n    for (let i = 0; i < this._ports.length; i++) {\n      const radLocation = this.start + (this.rotStep * i) + (this.rotStep / 2);\n      this._ports[i].update(this._sizeScaler, radLocation, this._isSelected);\n    }\n  }\n\n  getTouchedPort (x, y) {\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].isUserTouching(x, y)) {\n        return this._ports[i];\n      }\n    }\n    return undefined;\n  }\n\n  drawArc () {\n    // save the context's state\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      0, 0, this.radius, this.start, this.end,\n      this.arcLineWidth, this._color(), undefined\n    )\n    // draw a grey arc in the middle of the main arc\n    if (this.gutterLineWidth) {\n      utils.drawArc(\n        this.context,\n        0, 0, this.radius, this.gutterStart, this.gutterEnd,\n        this.gutterLineWidth, utils.colors.background(), undefined\n      )\n    }\n    this.context.restore();\n  }\n\n  drawName () {\n    this.context.save();\n    this.context.rotate(this.start + (this.rotStep / 2));\n    for (let i = 0;i < this._ports.length; i++) {\n      if (this._ports[i]) {\n        this._ports[i].drawName();\n        this.context.rotate(this.rotStep);\n      }\n    }\n    this.context.restore();\n  }\n\n  drawPorts () {\n    // draw the child Ports\n    this.context.save();\n    this.context.rotate((this.start + (this.rotStep / 2)) - (utils.PI * 0.5));\n    for (let i = 0; i < this._ports.length; i++) {\n      if (this._ports[i].visible) {\n        this._ports[i].draw(this._sizeScaler);\n      }\n      this.context.rotate(this.rotStep);\n    }\n    this.context.restore();\n  }\n\n  modifySizeScaler (sizeScaler) {\n    sizeScaler = utils.clipValue(\n      sizeScaler * arcDefaults.sizeScalerMultiplier,\n      0,\n      arcDefaults.sizeScalerThresh\n    );\n    return Math.pow(sizeScaler / arcDefaults.sizeScalerThresh, 2);\n  }\n}\n\nexport { Arc }\n"]},"metadata":{},"sourceType":"module"}