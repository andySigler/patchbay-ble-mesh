{"ast":null,"code":"import * as utils from './PatchbayUtils';\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\nclass Finger {\n  constructor(context, inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n    this.context = context;\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n    this.circleRadius = undefined;\n    this.circleThickness = undefined;\n    this.justErased = false;\n  }\n\n  get touchedPort() {\n    return this._touchedPort;\n  }\n\n  get hoveredPort() {\n    return this._hoveredPort;\n  }\n\n  adjustToScreenSize(screenSize) {\n    this.circleRadius = this.screenSize * fingerDefaults.touchCircleRadiusScaler;\n    this.circleThickness = this.screenSize * fingerDefaults.touchCircleThicknessScaler;\n  }\n\n  update() {\n    if (this.down) {\n      this.findHover();\n    }\n\n    if (this.down && this.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n\n      if (this.outCircle.touched) {\n        this.outCircle.radiansMoved = out_radianDiff;\n      } else if (this.inCircle.touched) {\n        this.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  draw() {\n    if (this.touchedPort) {\n      this.drawTouchLine();\n      this.drawTouchedPort();\n\n      if (this.hoveredPort) {\n        this.drawHoveredPort();\n      }\n    }\n  }\n\n  drawTouchedPort() {\n    this.context.save();\n    utils.drawCircle(this.context, this.touchedPort.x, this.touchedPort.y, this.circleRadius, this.circleThickness, utils.colors.highlight(), undefined);\n    this.context.restore();\n  }\n\n  drawTouchLine() {\n    this.context.save();\n    utils.drawLine(this.context, this.touchedPort.x, this.touchedPort.y, this.x, this.y, fingerDefaults.touchedLineWidth, utils.colors.highlight());\n    this.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.context.save();\n    utils.drawCircle(this.context, this.touchedPort.x, this.touchedPort.y, fingerDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    utils.drawCircle(this.context, this.x, this.y, fingerDefaults.touchedLineWidth, 0, undefined, utils.colors.highlight());\n    this.context.restore();\n  }\n\n  drawHoveredPort() {\n    this.context.save();\n    utils.drawArc(this.context, this.hoveredPort.x, this.hoveredPort.y, this.circleRadius, 0, utils.PI2, this.circleThickness, utils.colors.highlight(), undefined);\n    this.context.restore();\n  }\n\n  findHover() {\n    if (!this._touchedPort) {\n      return;\n    }\n\n    if (this._hoveredPort) {\n      this._hoveredPort = undefined;\n    }\n\n    this._hoveredPort = this.findHoveredPort(this.outCircle);\n\n    if (this._hoveredPort) {\n      return;\n    }\n\n    this._hoveredPort = this.findHoveredPort(this.inCircle);\n\n    if (this._hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort(circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n\n    if (this._touchedPort.type === circle.type) {\n      return;\n    }\n\n    for (let arc of circle.getExpandedArcs()) {\n      for (let port of arc.ports) {\n        if (port.isUserTouching(this.x, this.y)) {\n          return port;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  touchEvent() {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n\n    if (this.handleDeleteConnection()) {\n      return;\n    } // set all connections.hovered to false\n\n\n    this.unselectAllConnections();\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n\n    if (this.inCircle.isCloseTo(this.x, this.y)) {\n      port = this.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    } else if (this.outCircle.isCloseTo(this.x, this.y)) {\n      port = this.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n\n    if (port) {\n      this._touchedPort = port;\n    }\n  }\n\n  handleDeleteConnection() {\n    for (let i in this.connections) {\n      const conn = this.connections[i];\n\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  resetFromNewCoords(x, y) {\n    if (this.x && this.y) {\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease() {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections() {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving(x, y) {\n    this.inCircle.tapEvent();\n    this.outCircle.tapEvent(); // reset some Finger variables\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease(); // set all connections.hovered to false\n\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    } else {\n      this.justErased = false;\n    } // find which Connection is being interacted with\n\n\n    if (this._touchedPort) {\n      // then, find the interactive connection\n      this.unselectAllConnections();\n\n      for (let name in this.connections) {\n        const conn = this.connections[name];\n\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()) {\n          conn.selected = true;\n        }\n      }\n    }\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent(x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this._touchedPort;\n    const hoveredPort = this._hoveredPort;\n\n    if (touchedPort && hoveredPort) {\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    this.unselectAllConnections();\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered() {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n  }\n\n  makeConnection(port1, port2) {\n    let inPort;\n    let outPort;\n\n    if (port1.type === utils.inType) {\n      inPort = port1;\n      outPort = port2;\n    } else {\n      inPort = port2;\n      outPort = port1;\n    }\n\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent(x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched;\n\n    if (!justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, utils.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, utils.outType);\n\n    if (justTouched) {\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian(type) {\n    return type === utils.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter(x, y, type) {\n    let middleX = this.outCircle.x;\n    let middleY = this.outCircle.y;\n\n    if (type === utils.inType) {\n      middleX = this.inCircle.x;\n      middleY = this.inCircle.y;\n    }\n\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n\n    if (x > middleX) {\n      if (y > middleY) {\n        // bottom right\n        return Math.atan(yDist / xDist);\n      } else if (y < middleY) {\n        // top right\n        return Math.atan(xDist / yDist) + Math.PI * 1.5;\n      } else {\n        // we're touching the y line\n        return 0;\n      }\n    } else if (x < middleX) {\n      if (y > middleY) {\n        // bottom left\n        return Math.atan(xDist / yDist) + Math.PI * 0.5;\n      } else if (y < middleY) {\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      } else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    } else {\n      //we're touching the x line\n      if (y > middleY) {\n        return Math.PI * 0.5;\n      } else if (y < middleY) {\n        return Math.PI * 1.5;\n      } else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n\n}\n\nexport { Finger };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Finger.js"],"names":["utils","fingerDefaults","tapPixelsMovedThresh","touchCircleRadiusScaler","touchCircleThicknessScaler","touchedLineWidth","Finger","constructor","context","inCircle","outCircle","connections","onMakeConnection","onDeleteConnection","_touchedPort","undefined","_hoveredPort","x","y","xStart","yStart","xDiff","yDiff","down","didMove","inRadianDiff","inRadianPrev","inRadianNew","outRadianDiff","outRadianPrev","outRadianNew","circleRadius","circleThickness","justErased","touchedPort","hoveredPort","adjustToScreenSize","screenSize","update","findHover","arcs","length","in_radianDiff","out_radianDiff","touched","radiansMoved","draw","drawTouchLine","drawTouchedPort","drawHoveredPort","save","drawCircle","colors","highlight","restore","drawLine","drawArc","PI2","findHoveredPort","circle","type","arc","getExpandedArcs","port","ports","isUserTouching","touchEvent","handleDeleteConnection","unselectAllConnections","clearTouchedHovered","isCloseTo","mouseEvent","i","conn","resetFromNewCoords","resetOnRelease","radianDown","radianDiff","name","selected","releaseWithoutMoving","tapEvent","inPort","isTouched","outPort","clearCirclesTouchedHovered","releaseEvent","getDistance","makeConnection","port1","port2","inType","moveEvent","justTouched","radiansFromCenter","outType","getRadian","middleX","middleY","yDist","Math","abs","xDist","atan","PI"],"mappings":"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","sourcesContent":["import * as utils from './PatchbayUtils'\n\nconst fingerDefaults = {\n  tapPixelsMovedThresh: 3,\n  touchCircleRadiusScaler: 0.1,\n  touchCircleThicknessScaler: 0.01,\n  touchedLineWidth: 3\n};\n\n\nclass Finger {\n  constructor (context, inCircle, outCircle, connections, onMakeConnection, onDeleteConnection) {\n    this.context = context;\n    this.inCircle = inCircle;\n    this.outCircle = outCircle;\n    this.connections = connections;\n\n    this.onMakeConnection = onMakeConnection;\n    this.onDeleteConnection = onDeleteConnection;\n\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n\n    this.x = undefined;\n    this.y = undefined;\n    this.xStart = undefined;\n    this.yStart = undefined;\n    this.xDiff = undefined;\n    this.yDiff = undefined;\n    this.down = false;\n    this.didMove = false;\n\n    this.inRadianDiff = undefined;\n    this.inRadianPrev = undefined;\n    this.inRadianNew = undefined;\n    this.outRadianDiff = undefined;\n    this.outRadianPrev = undefined;\n    this.outRadianNew = undefined;\n\n    this.circleRadius = undefined;\n    this.circleThickness = undefined;\n\n    this.justErased = false;\n  }\n\n  get touchedPort () { return this._touchedPort; }\n\n  get hoveredPort () { return this._hoveredPort; }\n\n  adjustToScreenSize (screenSize) {\n    this.circleRadius = this.screenSize * fingerDefaults.touchCircleRadiusScaler;\n    this.circleThickness = this.screenSize * fingerDefaults.touchCircleThicknessScaler;\n  }\n\n  update () {\n    if (this.down) {\n      this.findHover();\n    }\n    if (this.down && this.outCircle.arcs.length > 1) {\n      const in_radianDiff = this.inRadianNew - this.inRadianPrev;\n      const out_radianDiff = this.outRadianNew - this.outRadianPrev;\n      if(this.outCircle.touched){\n        this.outCircle.radiansMoved = out_radianDiff;\n      }\n      else if(this.inCircle.touched){\n        this.inCircle.radiansMoved = in_radianDiff;\n      }\n    }\n    this.xDiff = 0;\n    this.yDiff = 0;\n    this.inRadianPrev = this.inRadianNew;\n    this.outRadianPrev = this.outRadianNew;\n  }\n\n  draw () {\n    if (this.touchedPort) {\n      this.drawTouchLine();\n      this.drawTouchedPort();\n      if (this.hoveredPort) {\n        this.drawHoveredPort();\n      }\n    }\n  }\n\n  drawTouchedPort () {\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      this.circleRadius, this.circleThickness,\n      utils.colors.highlight(), undefined\n    );\n    this.context.restore();\n  }\n\n  drawTouchLine () {\n    this.context.save();\n    utils.drawLine(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      this.x, this.y,\n      fingerDefaults.touchedLineWidth, utils.colors.highlight()\n    );\n    this.context.restore();\n    // then two smaller filled in circles to cover the tips of the line\n    this.context.save();\n    utils.drawCircle(\n      this.context,\n      this.touchedPort.x, this.touchedPort.y,\n      fingerDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    utils.drawCircle(\n      this.context,\n      this.x, this.y,\n      fingerDefaults.touchedLineWidth, 0,\n      undefined, utils.colors.highlight()\n    );\n    this.context.restore();\n  }\n\n  drawHoveredPort () {\n    this.context.save();\n    utils.drawArc(\n      this.context,\n      this.hoveredPort.x, this.hoveredPort.y,\n      this.circleRadius, 0, utils.PI2, this.circleThickness,\n      utils.colors.highlight(), undefined\n    );\n    this.context.restore();\n  }\n\n  findHover () {\n    if (!this._touchedPort) {\n      return;\n    }\n    if (this._hoveredPort) {\n      this._hoveredPort = undefined;\n    }\n    this._hoveredPort = this.findHoveredPort(this.outCircle);\n    if (this._hoveredPort) {\n      return;\n    }\n    this._hoveredPort = this.findHoveredPort(this.inCircle);\n    if (this._hoveredPort) {\n      return;\n    }\n  }\n\n  findHoveredPort (circle) {\n    if (circle.arcs.length === 0) {\n      return;\n    }\n    if (this._touchedPort.type === circle.type) {\n      return;\n    }\n    for (let arc of circle.getExpandedArcs()) {\n      for (let port of arc.ports) {\n        if (port.isUserTouching(this.x, this.y)) {\n          return port;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  touchEvent () {\n    this.down = true;\n    this.xDiff = 0;\n    this.yDiff = 0;\n    if (this.handleDeleteConnection()) {\n      return;\n    }\n    // set all connections.hovered to false\n    this.unselectAllConnections();\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    let port = undefined;\n    if(this.inCircle.isCloseTo(this.x, this.y)){\n      port = this.inCircle.mouseEvent(this.x, this.y, this.inRadianNew);\n    }\n    else if(this.outCircle.isCloseTo(this.x, this.y)){\n      port = this.outCircle.mouseEvent(this.x, this.y, this.outRadianNew);\n    }\n    if (port) {\n      this._touchedPort = port;\n    }\n  }\n\n  handleDeleteConnection () {\n    for(let i in this.connections){\n      const conn = this.connections[i];\n      if (conn.isUserTouching(this.x, this.y)) {\n        this.onDeleteConnection(conn);\n        this.justErased = true;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  resetFromNewCoords (x, y) {\n    if(this.x && this.y){\n      this.xDiff = x - this.x;\n      this.yDiff = y - this.y;\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  resetOnRelease () {\n    this.down = false;\n    this.didMove = false;\n    this.radianDown = undefined;\n    this.radianDiff = undefined;\n  }\n\n  unselectAllConnections () {\n    for (let name in this.connections) {\n      this.connections[name].selected = false;\n    }\n  }\n\n  releaseWithoutMoving (x, y) {\n    this.inCircle.tapEvent();\n    this.outCircle.tapEvent();\n    // reset some Finger variables\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    // set all connections.hovered to false\n    if (!this.justErased) {\n      this.unselectAllConnections();\n    }\n    else {\n      this.justErased = false;\n    }\n    // find which Connection is being interacted with\n    if(this._touchedPort){\n      // then, find the interactive connection\n      this.unselectAllConnections();\n      for (let name in this.connections){\n        const conn = this.connections[name];\n        if (conn.inPort.isTouched() || conn.outPort.isTouched()){\n          conn.selected = true;\n        }\n      }\n    }\n    this.clearCirclesTouchedHovered();\n  }\n\n  releaseEvent (x, y) {\n    if (!this.didMove || utils.getDistance(this.xStart, this.yStart, x, y) < fingerDefaults.tapPixelsMovedThresh) {\n      this.releaseWithoutMoving(x, y);\n      return;\n    }\n    this.resetFromNewCoords(x, y);\n    this.resetOnRelease();\n    const touchedPort = this._touchedPort;\n    const hoveredPort = this._hoveredPort;\n    if (touchedPort && hoveredPort){\n      this.makeConnection(hoveredPort, touchedPort);\n    }\n\n    this.unselectAllConnections();\n\n    this.clearCirclesTouchedHovered();\n  }\n\n  clearCirclesTouchedHovered () {\n    this.inCircle.clearTouchedHovered();\n    this.outCircle.clearTouchedHovered();\n    this._touchedPort = undefined;\n    this._hoveredPort = undefined;\n  }\n\n  makeConnection (port1, port2) {\n    let inPort;\n    let outPort;\n    if (port1.type === utils.inType){\n      inPort = port1;\n      outPort = port2;\n    }\n    else{\n      inPort = port2;\n      outPort = port1;\n    }\n    this.onMakeConnection(inPort, outPort);\n  }\n\n  moveEvent (x, y, justTouched) {\n    if (justTouched) {\n      this.xStart = x;\n      this.yStart = y;\n    }\n    this.resetFromNewCoords(x, y);\n    this.didMove = !justTouched;\n    if (!justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n    this.inRadianNew = this.radiansFromCenter(this.x, this.y, utils.inType);\n    this.outRadianNew = this.radiansFromCenter(this.x, this.y, utils.outType);\n    if (justTouched){\n      this.inRadianPrev = this.inRadianNew;\n      this.outRadianPrev = this.outRadianNew;\n    }\n  }\n\n  getRadian (type) {\n    return type === utils.inType ? this.inRadianNew : this.outRadianNew;\n  }\n\n  radiansFromCenter (x, y, type) {\n    let middleX = this.outCircle.x;\n    let middleY = this.outCircle.y;\n    if (type === utils.inType){\n      middleX = this.inCircle.x;\n      middleY = this.inCircle.y;\n    }\n    const yDist = Math.abs(middleY - y);\n    const xDist = Math.abs(middleX - x);\n    if (x > middleX){\n      if (y > middleY){\n        // bottom right\n        return Math.atan(yDist / xDist);\n      }\n      else if (y < middleY){\n        // top right\n        return Math.atan(xDist / yDist) + (Math.PI * 1.5);\n      }\n      else {\n        // we're touching the y line\n        return 0;\n      }\n    }\n    else if (x < middleX){\n      if (y > middleY){\n        // bottom left\n        return Math.atan(xDist / yDist) + (Math.PI * 0.5);\n      }\n      else if (y < middleY){\n        // top left\n        return Math.atan(yDist / xDist) + Math.PI;\n      }\n      else {\n        // we're touching the y line\n        return Math.PI;\n      }\n    }\n    else {\n      //we're touching the x line\n      if (y > middleY){\n        return Math.PI * 0.5;\n      }\n      else if (y < middleY){\n        return Math.PI * 1.5;\n      }\n      else {\n        // we're touching the middle\n        return 0;\n      }\n    }\n  }\n}\n\nexport { Finger }\n"]},"metadata":{},"sourceType":"module"}