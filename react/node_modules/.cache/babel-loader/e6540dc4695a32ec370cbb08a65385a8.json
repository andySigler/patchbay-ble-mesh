{"ast":null,"code":"import * as utils from './DrawUtils';\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  drawSizeScaler: 0.04,\n  lineWidthScaler: 0.003,\n  lineWidthOpacityScaler: 2,\n  circleSizeOpacityScaler: 2,\n  opacityScaler: 1.5,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor(params, inPort, outPort) {\n    this.params = params;\n    this.name = this.constructor.generateName(inPort, outPort);\n    this.inPort = inPort;\n    this.outPort = outPort;\n    this._selected = false;\n    this.lineWidth = cordDefaults.width; // the location and size of the delete circle\n\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined; // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n\n    this.wobbleCounter = Math.random() * Math.PI * 2;\n    this.wobbleStep = cordDefaults.wobbleStep;\n    this.wobbleAmount = cordDefaults.wobbleAmount;\n    this.circleSize = undefined;\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    const inID = inPort.nodeID;\n    const inIndex = inPort.index;\n    const outID = outPort.nodeID;\n    const outIndex = outPort.index;\n    return String(inID + '/' + inIndex + '_' + outID + '/' + outIndex);\n  } // GETTERS\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get visible() {\n    return this.inPort.visible && this.outPort.visible;\n  }\n\n  get sizeScaler() {\n    return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler);\n  } // SETTERS\n\n\n  set selected(newVal) {\n    this._selected = newVal;\n  }\n\n  update() {\n    // the coordinate where a deletion circle would be\n    // will be halfway between the two ports\n    this._x = (this.outPort.x - this.inPort.x) / 2 + this.inPort.x;\n    this._y = (this.outPort.y - this.inPort.y) / 2 + this.inPort.y; // incase the overall size has changed, update the size variables\n\n    this._radius = this.params.screenSize * cordDefaults.drawSizeScaler;\n    this.lineWidth = Math.max(this.params.screenSize * cordDefaults.lineWidthScaler, 2); // increment the sinusoidal wobbling variable\n\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % (Math.PI * 2);\n    this.updateDrawSettings();\n  }\n\n  updateDrawSettings() {\n    // the visible flag is set by the Arc\n    if (this.outPort.visible && this.inPort.visible) {\n      // the opacity depends on the size of the parent ports' circles\n      let opacity = Math.min(this.outPort.sizeScaler, this.inPort.sizeScaler);\n      opacity = Math.min(opacity * cordDefaults.opacityScaler, 1); // that scaled opacity then controls all other variables for the line\n\n      this.lineWidth = Math.floor(this.lineWidth * opacity * cordDefaults.lineWidthOpacityScaler);\n      this.circleSize = Math.floor(this.lineWidth * opacity * cordDefaults.circleSizeOpacityScaler);\n      this.lineFill = utils.colors.white(opacity);\n      this.lineStroke = utils.colors.white(opacity);\n\n      if (this._selected) {\n        this.lineStroke = utils.colors.red(opacity);\n        this.delCircleFill = utils.colors.white(opacity);\n        this.delCircleStroke = utils.colors.red(opacity);\n        const sineVal = this._radius + Math.sin(this.wobbleCounter) * this.wobbleAmount;\n        this.delLineWidth = sineVal * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = sineVal * opacity * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler;\n      }\n    }\n  }\n\n  draw() {\n    if (this.outPort.visible && this.inPort.visible) {\n      // save the context state\n      this.params.context.save(); // draw the line, from the input port to the output port\n\n      utils.drawLine(this.params.context, this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y, this.lineWidth, this.lineStroke); // draw the two circles on top of that line, inside each port\n\n      utils.drawArc(this.params.context, this.outPort.x, this.outPort.y, this.circleSize, 0, utils.PI2, this.lineWidth, undefined, this.lineFill);\n      utils.drawArc(this.params.context, this.inPort.x, this.inPort.y, this.circleSize, 0, utils.PI2, this.lineWidth, undefined, this.lineFill); // restore the context state\n\n      this.params.context.restore();\n\n      if (this._selected) {\n        // save the context's state\n        this.params.context.save(); // translate to where the delete circle is\n\n        this.params.context.translate(this._x, this._y); // draw the circle, with a fill and a stroke\n\n        utils.drawArc(this.params.context, 0, 0, this.wobbleSize, 0, utils.PI2, this.lineWidth, this.delCircleStroke, this.delCircleFill); // draw the two lines that make the X\n\n        this.params.context.rotate(utils.PI / 4);\n        utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke);\n        this.params.context.rotate(-utils.PI / 2);\n        utils.drawLine(this.params.context, 0, this.wobbleLineLength, 0, -this.wobbleLineLength, this.delLineWidth, this.delCircleStroke); // restore the context's state\n\n        this.params.context.restore();\n      }\n    }\n  }\n\n  isUserTouching(x, y) {\n    if (!this._selected) {\n      return false;\n    }\n\n    const dist = utils.getDistance(x, y, this._x, this._y);\n\n    if (dist < this._radius) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport { Connection };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Connection.js"],"names":["utils","cordDefaults","width","wobbleStep","wobbleAmount","drawSizeScaler","lineWidthScaler","lineWidthOpacityScaler","circleSizeOpacityScaler","opacityScaler","deleteLineWidthScaler","wobbleSizeScaler","wobbleLineLengthScaler","Connection","constructor","params","inPort","outPort","name","generateName","_selected","lineWidth","_x","undefined","_y","_radius","wobbleCounter","Math","random","PI","circleSize","lineFill","lineStroke","delCircleFill","delCircleStroke","delLineWidth","wobbleSize","wobbleLineLength","inID","nodeID","inIndex","index","outID","outIndex","String","selected","x","y","visible","sizeScaler","min","newVal","update","screenSize","max","updateDrawSettings","opacity","floor","colors","white","red","sineVal","sin","draw","context","save","drawLine","drawArc","PI2","restore","translate","rotate","isUserTouching","dist","getDistance"],"mappings":"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","sourcesContent":["import * as utils from './DrawUtils'\n\nconst cordDefaults = {\n  width: 2,\n  wobbleStep: 0.05,\n  wobbleAmount: 2,\n  drawSizeScaler: 0.04,\n  lineWidthScaler: 0.003,\n  lineWidthOpacityScaler: 2,\n  circleSizeOpacityScaler: 2,\n  opacityScaler: 1.5,\n  deleteLineWidthScaler: 0.15,\n  wobbleSizeScaler: 0.5,\n  wobbleLineLengthScaler: 0.6\n};\n\nclass Connection {\n  constructor (params, inPort, outPort) {\n    this.params = params;\n    this.name = this.constructor.generateName(inPort, outPort);\n\n    this.inPort = inPort;\n    this.outPort = outPort;\n\n    this._selected = false;\n\n    this.lineWidth = cordDefaults.width;\n\n    // the location and size of the delete circle\n    this._x = undefined;\n    this._y = undefined;\n    this._radius = undefined;\n\n    // some variables to keep track of the sinusoidal pulsing\n    // when hovered for deletion\n    this.wobbleCounter = Math.random() * Math.PI * 2;\n    this.wobbleStep = cordDefaults.wobbleStep;\n    this.wobbleAmount = cordDefaults.wobbleAmount;\n\n    this.circleSize = undefined;\n    this.lineFill = undefined;\n    this.lineStroke = undefined;\n    this.delCircleFill = undefined;\n    this.delCircleStroke = undefined;\n    this.delLineWidth = undefined;\n    this.wobbleSize = undefined;\n    this.wobbleLineLength = undefined;\n  }\n\n  static generateName(inPort, outPort) {\n    // \"outArcID/inArcID_inPortID/outPortID\"\n    const inID = inPort.nodeID;\n    const inIndex = inPort.index;\n    const outID = outPort.nodeID;\n    const outIndex = outPort.index;\n    return String(\n      inID + '/' + inIndex + '_' + outID + '/' + outIndex);\n  }\n\n  // GETTERS\n\n  get selected () { return this._selected }\n\n  get x () { return this._x }\n\n  get y () { return this._y }\n\n  get visible () { return this.inPort.visible && this.outPort.visible; }\n\n  get sizeScaler () { return Math.min(this.inPort.sizeScaler, this.outPort.sizeScaler); }\n\n  // SETTERS\n\n  set selected (newVal) { this._selected = newVal; }\n\n  update () {\n    // the coordinate where a deletion circle would be\n    // will be halfway between the two ports\n    this._x = ((this.outPort.x - this.inPort.x) / 2) + this.inPort.x;\n    this._y = ((this.outPort.y - this.inPort.y) / 2) + this.inPort.y;\n\n    // incase the overall size has changed, update the size variables\n    this._radius = this.params.screenSize * cordDefaults.drawSizeScaler;\n    this.lineWidth = Math.max(this.params.screenSize * cordDefaults.lineWidthScaler, 2);\n\n    // increment the sinusoidal wobbling variable\n    this.wobbleCounter = (this.wobbleCounter + this.wobbleStep) % (Math.PI * 2);\n\n    this.updateDrawSettings();\n  }\n\n  updateDrawSettings () {\n    // the visible flag is set by the Arc\n    if(this.outPort.visible && this.inPort.visible){\n      // the opacity depends on the size of the parent ports' circles\n      let opacity = Math.min(this.outPort.sizeScaler, this.inPort.sizeScaler);\n      opacity = Math.min(opacity * cordDefaults.opacityScaler, 1);\n      // that scaled opacity then controls all other variables for the line\n      this.lineWidth = Math.floor(this.lineWidth * opacity * cordDefaults.lineWidthOpacityScaler);\n      this.circleSize =  Math.floor(this.lineWidth * opacity * cordDefaults.circleSizeOpacityScaler);\n      this.lineFill = utils.colors.white(opacity);\n      this.lineStroke = utils.colors.white(opacity);\n      if(this._selected) {\n        this.lineStroke = utils.colors.red(opacity);\n        this.delCircleFill = utils.colors.white(opacity);\n        this.delCircleStroke = utils.colors.red(opacity);\n        const sineVal = this._radius + (Math.sin(this.wobbleCounter) * this.wobbleAmount);\n        this.delLineWidth = sineVal * cordDefaults.deleteLineWidthScaler;\n        this.wobbleSize = sineVal * opacity * cordDefaults.wobbleSizeScaler;\n        this.wobbleLineLength = this.wobbleSize * cordDefaults.wobbleLineLengthScaler;\n      }\n    }\n  }\n\n  draw () {\n    if(this.outPort.visible && this.inPort.visible){\n      // save the context state\n      this.params.context.save();\n      // draw the line, from the input port to the output port\n      utils.drawLine(\n        this.params.context,\n        this.outPort.x, this.outPort.y, this.inPort.x, this.inPort.y,\n        this.lineWidth, this.lineStroke\n      );\n      // draw the two circles on top of that line, inside each port\n      utils.drawArc(\n        this.params.context,\n        this.outPort.x, this.outPort.y,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, undefined, this.lineFill\n      )\n      utils.drawArc(\n        this.params.context,\n        this.inPort.x, this.inPort.y,\n        this.circleSize, 0, utils.PI2,\n        this.lineWidth, undefined, this.lineFill\n      )\n      // restore the context state\n      this.params.context.restore();\n      if(this._selected){\n        // save the context's state\n        this.params.context.save();\n\n        // translate to where the delete circle is\n        this.params.context.translate(this._x, this._y);\n        // draw the circle, with a fill and a stroke\n        utils.drawArc(\n          this.params.context,\n          0, 0,\n          this.wobbleSize, 0, utils.PI2,\n          this.lineWidth, this.delCircleStroke, this.delCircleFill\n        )\n        // draw the two lines that make the X\n        this.params.context.rotate(utils.PI / 4);\n        utils.drawLine(\n          this.params.context,\n          0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n          this.delLineWidth, this.delCircleStroke\n        );\n        this.params.context.rotate(-utils.PI / 2);\n        utils.drawLine(\n          this.params.context,\n          0, this.wobbleLineLength, 0, -this.wobbleLineLength,\n          this.delLineWidth, this.delCircleStroke\n        );\n        // restore the context's state\n        this.params.context.restore();\n      }\n    }\n  }\n\n  isUserTouching (x, y) {\n    if (!this._selected) {\n      return false;\n    }\n    const dist = utils.getDistance(x, y, this._x, this._y);\n    if (dist < this._radius) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { Connection }\n"]},"metadata":{},"sourceType":"module"}