{"ast":null,"code":"import * as utils from './DrawUtils';\nimport { AppParams } from './AppParams';\nimport { Connection } from './Connection';\nimport { Finger } from './Finger';\nimport { Circle } from './Circle';\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor(canvas) {\n    this.params = new AppParams(canvas.getContext('2d'));\n    this.params.inCircle = new Circle(this.params, this.params.inType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.params.outCircle = new Circle(this.params, this.params.outType, patchbayDefaults.screenPercentage, patchbayDefaults.tempThickness);\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop() {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for (let i in this.params.connections) {\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort(fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    console.log('HERE');\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(this.params.touchedPort.size * patchbayDefaults.touchedLineScaler, patchbayDefaults.touchedLineMinWidth);\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler; // draw the outlining circle\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness, utils.colors.white(), undefined);\n    this.params.context.restore(); // then draw the line, that wobbles its thickness\n\n    this.params.context.save();\n    utils.drawLine(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY, touchedLineWidth, utils.colors.green());\n    this.params.context.restore(); // then two smaller filled in circles to cover the tips of the line\n\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.touchedPort.x, this.params.touchedPort.y, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    utils.drawArc(this.params.context, fingerX, fingerY, circleRadius, 0, utils.PI2, 0, undefined, utils.colors.white());\n    this.params.context.restore();\n  }\n\n  drawHoveredPort() {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(this.params.context, this.params.hoveredPort.x, this.params.hoveredPort.y, this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth, utils.colors.green(), undefined);\n    this.params.context.restore();\n  }\n\n  setSize(width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection(outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(outputID, outputIndex, inputID, inputIndex);\n\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    } else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n\n    return tempName;\n  }\n\n  eraseNodeFromConnections(id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent(type, x, y) {\n    if (type === userEventTypes.touch) {\n      this.finger.dragEvent(x, y, true);\n      this.finger.touchEvent();\n    } else if (type === userEventTypes.move) {\n      this.finger.dragEvent(x, y, false);\n    } else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n\n}\n\nexport { Patchbay, userEventTypes };","map":{"version":3,"sources":["/Users/andy/Documents/patchbay-react/patchbay-react/src/modules/Patchbay.js"],"names":["utils","AppParams","Connection","Finger","Circle","userEventTypes","touch","move","release","patchbayDefaults","tempThickness","screenPercentage","touchCircleThicknessScaler","touchedWobbleScaler","touchedLineScaler","touchedLineMinWidth","touchedTipPreScaler","touchedTipPostScaler","hoveredCircleWidthScaler","Patchbay","constructor","canvas","params","getContext","inCircle","inType","outCircle","outType","finger","reqAnimFrame","undefined","drawLoop","cancelAnimationFrame","update","i","connections","context","save","clearCanvas","drawArcs","drawNames","drawPorts","draw","drawTouchedPort","drawHoveredPort","restore","requestAnimationFrame","fingerX","fingerY","touchedPort","console","log","touchCircleThickness","size","touchedLineWidth","Math","sin","wobbleCounter","max","touchedLineTipCircleScaler","scaler","min","circleRadius","drawArc","x","y","PI2","colors","white","drawLine","green","hoveredPort","hoveredCircleWidth","setSize","width","height","fillStyle","background","fillRect","createConnection","outputID","inputID","inputIndex","outputIndex","tempName","generateName","outPort","getPort","inPort","newConnection","addConnection","exists","eraseNodeFromConnections","id","n","conn","parent","deleteConnection","handleUserEvent","type","dragEvent","touchEvent","releaseEvent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,IAAI,EAAE,MAFe;AAGrBC,EAAAA,OAAO,EAAE;AAHY,CAAvB;AAOA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EAAE,GADQ;AAEvBC,EAAAA,gBAAgB,EAAE,IAFK;AAGvBC,EAAAA,0BAA0B,EAAE,GAHL;AAIvBC,EAAAA,mBAAmB,EAAE,CAJE;AAKvBC,EAAAA,iBAAiB,EAAE,IALI;AAMvBC,EAAAA,mBAAmB,EAAE,CANE;AAOvBC,EAAAA,mBAAmB,EAAE,IAPE;AAQvBC,EAAAA,oBAAoB,EAAE,GARC;AASvBC,EAAAA,wBAAwB,EAAE;AATH,CAAzB;;AAYA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,SAAKC,MAAL,GAAc,IAAIrB,SAAJ,CAAcoB,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAd,CAAd;AACA,SAAKD,MAAL,CAAYE,QAAZ,GAAuB,IAAIpB,MAAJ,CACrB,KAAKkB,MADgB,EAErB,KAAKA,MAAL,CAAYG,MAFS,EAGrBhB,gBAAgB,CAACE,gBAHI,EAIrBF,gBAAgB,CAACC,aAJI,CAAvB;AAMA,SAAKY,MAAL,CAAYI,SAAZ,GAAwB,IAAItB,MAAJ,CACtB,KAAKkB,MADiB,EAEtB,KAAKA,MAAL,CAAYK,OAFU,EAGtBlB,gBAAgB,CAACE,gBAHK,EAItBF,gBAAgB,CAACC,aAJK,CAAxB;AAMA,SAAKkB,MAAL,GAAc,IAAIzB,MAAJ,CAAW,KAAKmB,MAAhB,CAAd;AACA,SAAKO,YAAL,GAAoBC,SAApB;AACD;;AAEDC,EAAAA,QAAQ,GAAI;AACV,QAAI,KAAKF,YAAT,EAAuB;AACrBG,MAAAA,oBAAoB,CAAC,KAAKH,YAAN,CAApB;AACA,WAAKA,YAAL,GAAoBC,SAApB;AACD;;AACD,SAAKF,MAAL,CAAYK,MAAZ;AACA,SAAKX,MAAL,CAAYI,SAAZ,CAAsBO,MAAtB;AACA,SAAKX,MAAL,CAAYE,QAAZ,CAAqBS,MAArB;;AACA,SAAI,IAAIC,CAAR,IAAa,KAAKZ,MAAL,CAAYa,WAAzB,EAAqC;AACnC,WAAKb,MAAL,CAAYa,WAAZ,CAAwBD,CAAxB,EAA2BD,MAA3B;AACD;;AAED,SAAKX,MAAL,CAAYc,OAAZ,CAAoBC,IAApB;AACA,SAAKC,WAAL;AAEA,SAAKhB,MAAL,CAAYI,SAAZ,CAAsBa,QAAtB;AACA,SAAKjB,MAAL,CAAYE,QAAZ,CAAqBe,QAArB;AAEA,SAAKjB,MAAL,CAAYI,SAAZ,CAAsBc,SAAtB;AACA,SAAKlB,MAAL,CAAYE,QAAZ,CAAqBgB,SAArB;AAEA,SAAKlB,MAAL,CAAYI,SAAZ,CAAsBe,SAAtB;AACA,SAAKnB,MAAL,CAAYE,QAAZ,CAAqBiB,SAArB;;AAEA,SAAI,IAAIP,CAAR,IAAa,KAAKZ,MAAL,CAAYa,WAAzB,EAAqC;AACnC,WAAKb,MAAL,CAAYa,WAAZ,CAAwBD,CAAxB,EAA2BQ,IAA3B;AACD;;AAED,SAAKC,eAAL;AACA,SAAKC,eAAL;AAEA,SAAKtB,MAAL,CAAYc,OAAZ,CAAoBS,OAApB;AACA,SAAKhB,YAAL,GAAoBiB,qBAAqB,CAAC,MAAM,KAAKf,QAAL,EAAP,CAAzC;AACD;;AAEDY,EAAAA,eAAe,CAAEI,OAAF,EAAWC,OAAX,EAAoB;AACjC,QAAI,CAAC,KAAK1B,MAAL,CAAY2B,WAAjB,EAA8B;AAC5B;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEA,UAAMC,oBAAoB,GAAG,KAAK9B,MAAL,CAAY2B,WAAZ,CAAwBI,IAAxB,GAA+B5C,gBAAgB,CAACG,0BAA7E;AACA,QAAI0C,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAKlC,MAAL,CAAY2B,WAAZ,CAAwBQ,aAAjC,CAAvB;AACAH,IAAAA,gBAAgB,IAAI7C,gBAAgB,CAACI,mBAArC;AACAyC,IAAAA,gBAAgB,IAAIC,IAAI,CAACG,GAAL,CAClB,KAAKpC,MAAL,CAAY2B,WAAZ,CAAwBI,IAAxB,GAA+B5C,gBAAgB,CAACK,iBAD9B,EAElBL,gBAAgB,CAACM,mBAFC,CAApB;AAIA,QAAI4C,0BAA0B,GAAG,KAAKrC,MAAL,CAAY2B,WAAZ,CAAwBW,MAAzD;AACAD,IAAAA,0BAA0B,IAAIlD,gBAAgB,CAACO,mBAA/C;AACA2C,IAAAA,0BAA0B,GAAGJ,IAAI,CAACM,GAAL,CAASF,0BAAT,EAAqC,CAArC,CAA7B;AACAA,IAAAA,0BAA0B,GAAGJ,IAAI,CAACG,GAAL,CAASC,0BAAT,EAAqC,CAArC,CAA7B;AACAA,IAAAA,0BAA0B,IAAIlD,gBAAgB,CAACQ,oBAA/C;AACA,UAAM6C,YAAY,GAAG,KAAKxC,MAAL,CAAY2B,WAAZ,CAAwBI,IAAxB,GAA+BM,0BAApD,CAnBiC,CAqBjC;;AACA,SAAKrC,MAAL,CAAYc,OAAZ,CAAoBC,IAApB;AACArC,IAAAA,KAAK,CAAC+D,OAAN,CACE,KAAKzC,MAAL,CAAYc,OADd,EAEE,KAAKd,MAAL,CAAY2B,WAAZ,CAAwBe,CAF1B,EAE6B,KAAK1C,MAAL,CAAY2B,WAAZ,CAAwBgB,CAFrD,EAGE,KAAK3C,MAAL,CAAY2B,WAAZ,CAAwBI,IAH1B,EAGgC,CAHhC,EAGmCrD,KAAK,CAACkE,GAHzC,EAG8Cd,oBAH9C,EAIEpD,KAAK,CAACmE,MAAN,CAAaC,KAAb,EAJF,EAIwBtC,SAJxB;AAMA,SAAKR,MAAL,CAAYc,OAAZ,CAAoBS,OAApB,GA7BiC,CA+BjC;;AACA,SAAKvB,MAAL,CAAYc,OAAZ,CAAoBC,IAApB;AACArC,IAAAA,KAAK,CAACqE,QAAN,CACE,KAAK/C,MAAL,CAAYc,OADd,EAEE,KAAKd,MAAL,CAAY2B,WAAZ,CAAwBe,CAF1B,EAE6B,KAAK1C,MAAL,CAAY2B,WAAZ,CAAwBgB,CAFrD,EAEwDlB,OAFxD,EAEiEC,OAFjE,EAGEM,gBAHF,EAGoBtD,KAAK,CAACmE,MAAN,CAAaG,KAAb,EAHpB;AAKA,SAAKhD,MAAL,CAAYc,OAAZ,CAAoBS,OAApB,GAtCiC,CAwCjC;;AACA,SAAKvB,MAAL,CAAYc,OAAZ,CAAoBC,IAApB;AACArC,IAAAA,KAAK,CAAC+D,OAAN,CACE,KAAKzC,MAAL,CAAYc,OADd,EAEE,KAAKd,MAAL,CAAY2B,WAAZ,CAAwBe,CAF1B,EAE6B,KAAK1C,MAAL,CAAY2B,WAAZ,CAAwBgB,CAFrD,EAGEH,YAHF,EAGgB,CAHhB,EAGmB9D,KAAK,CAACkE,GAHzB,EAG8B,CAH9B,EAIEpC,SAJF,EAIa9B,KAAK,CAACmE,MAAN,CAAaC,KAAb,EAJb;AAMApE,IAAAA,KAAK,CAAC+D,OAAN,CACE,KAAKzC,MAAL,CAAYc,OADd,EAEEW,OAFF,EAEWC,OAFX,EAGEc,YAHF,EAGgB,CAHhB,EAGmB9D,KAAK,CAACkE,GAHzB,EAG8B,CAH9B,EAIEpC,SAJF,EAIa9B,KAAK,CAACmE,MAAN,CAAaC,KAAb,EAJb;AAMA,SAAK9C,MAAL,CAAYc,OAAZ,CAAoBS,OAApB;AACD;;AAEDD,EAAAA,eAAe,GAAI;AACjB,QAAI,CAAC,KAAKtB,MAAL,CAAYiD,WAAjB,EAA8B;AAC5B;AACD;;AACD,UAAMC,kBAAkB,GAAG,KAAKlD,MAAL,CAAYiD,WAAZ,CAAwBlB,IAAxB,GAA+B5C,gBAAgB,CAACS,wBAA3E;AACA,SAAKI,MAAL,CAAYc,OAAZ,CAAoBC,IAApB;AACArC,IAAAA,KAAK,CAAC+D,OAAN,CACE,KAAKzC,MAAL,CAAYc,OADd,EAEE,KAAKd,MAAL,CAAYiD,WAAZ,CAAwBP,CAF1B,EAE6B,KAAK1C,MAAL,CAAYiD,WAAZ,CAAwBN,CAFrD,EAGE,KAAK3C,MAAL,CAAYiD,WAAZ,CAAwBlB,IAH1B,EAGgC,CAHhC,EAGmCrD,KAAK,CAACkE,GAHzC,EAG8CM,kBAH9C,EAIExE,KAAK,CAACmE,MAAN,CAAaG,KAAb,EAJF,EAIwBxC,SAJxB;AAMA,SAAKR,MAAL,CAAYc,OAAZ,CAAoBS,OAApB;AACD;;AAED4B,EAAAA,OAAO,CAAEC,KAAF,EAASC,MAAT,EAAiB;AACtB,SAAKrD,MAAL,CAAYoD,KAAZ,GAAoBA,KAApB;AACA,SAAKpD,MAAL,CAAYqD,MAAZ,GAAqBA,MAArB;AACD;;AAEDrC,EAAAA,WAAW,GAAG;AACZ,SAAKhB,MAAL,CAAYc,OAAZ,CAAoBwC,SAApB,GAAgC5E,KAAK,CAACmE,MAAN,CAAaU,UAAb,EAAhC;AACA,SAAKvD,MAAL,CAAYc,OAAZ,CAAoB0C,QAApB,CAA6B,CAA7B,EAAgC,CAAhC,EAAmC,KAAKxD,MAAL,CAAYoD,KAA/C,EAAsD,KAAKpD,MAAL,CAAYqD,MAAlE;AACD;;AAEDI,EAAAA,gBAAgB,CAAEC,QAAF,EAAYC,OAAZ,EAAqBC,UAArB,EAAiCC,WAAjC,EAA8C;AAC5D,UAAMC,QAAQ,GAAGlF,UAAU,CAACmF,YAAX,CACfL,QADe,EACLG,WADK,EACQF,OADR,EACiBC,UADjB,CAAjB;;AAEA,QAAI,CAAC,KAAK5D,MAAL,CAAYa,WAAZ,CAAwBiD,QAAxB,CAAL,EAAwC;AACtC,UAAIE,OAAO,GAAG,KAAKhE,MAAL,CAAYiE,OAAZ,CAAoBP,QAApB,EAA8BG,WAA9B,EAA2C,KAAK7D,MAAL,CAAYK,OAAvD,CAAd;AACA,UAAI6D,MAAM,GAAG,KAAKlE,MAAL,CAAYiE,OAAZ,CAAoBN,OAApB,EAA6BC,UAA7B,EAAyC,KAAK5D,MAAL,CAAYG,MAArD,CAAb;;AACA,UAAI6D,OAAO,IAAIE,MAAf,EAAuB;AACrB,cAAMC,aAAa,GAAG,IAAIvF,UAAJ,CAAe,KAAKoB,MAApB,EAA4BgE,OAA5B,EAAqCE,MAArC,EAA6CJ,QAA7C,CAAtB;AACA,aAAK9D,MAAL,CAAYoE,aAAZ,CAA0BN,QAA1B,EAAoCK,aAApC;AACD;AACF,KAPD,MAQK;AACH;AACA,WAAKnE,MAAL,CAAYa,WAAZ,CAAwBiD,QAAxB,EAAkCO,MAAlC,GAA2C,IAA3C;AACD;;AACD,WAAOP,QAAP;AACD;;AAEDQ,EAAAA,wBAAwB,CAAEC,EAAF,EAAM;AAC5B,SAAK,IAAIC,CAAT,IAAc,KAAKxE,MAAL,CAAYa,WAA1B,EAAuC;AACrC,YAAM4D,IAAI,GAAG,KAAKzE,MAAL,CAAYa,WAAZ,CAAwB2D,CAAxB,CAAb;;AACA,UAAIC,IAAI,CAACT,OAAL,CAAaU,MAAb,CAAoBH,EAApB,KAA2BA,EAA3B,IAAiCE,IAAI,CAACP,MAAL,CAAYQ,MAAZ,CAAmBH,EAAnB,KAA0BA,EAA/D,EAAmE;AACjE,aAAKvE,MAAL,CAAY2E,gBAAZ,CAA6BH,CAA7B;AACD;AACF;AACF;;AAEDI,EAAAA,eAAe,CAAEC,IAAF,EAAQnC,CAAR,EAAWC,CAAX,EAAc;AAC3B,QAAIkC,IAAI,KAAK9F,cAAc,CAACC,KAA5B,EAAmC;AACjC,WAAKsB,MAAL,CAAYwE,SAAZ,CAAsBpC,CAAtB,EAAyBC,CAAzB,EAA4B,IAA5B;AACA,WAAKrC,MAAL,CAAYyE,UAAZ;AACD,KAHD,MAIK,IAAIF,IAAI,KAAK9F,cAAc,CAACE,IAA5B,EAAkC;AACrC,WAAKqB,MAAL,CAAYwE,SAAZ,CAAsBpC,CAAtB,EAAyBC,CAAzB,EAA4B,KAA5B;AACD,KAFI,MAGA,IAAIkC,IAAI,KAAK9F,cAAc,CAACG,OAA5B,EAAqC;AACxC,WAAKoB,MAAL,CAAY0E,YAAZ,CAAyBtC,CAAzB,EAA4BC,CAA5B;AACD;AACF;;AA9KY;;AAiLf,SAAS9C,QAAT,EAAmBd,cAAnB","sourcesContent":["import * as utils from './DrawUtils'\nimport { AppParams } from './AppParams'\nimport { Connection } from './Connection'\nimport { Finger } from './Finger'\nimport { Circle } from './Circle'\n\n\nconst userEventTypes = {\n  touch: 'touch',\n  move: 'move',\n  release: 'release'\n};\n\n\nconst patchbayDefaults = {\n  tempThickness: 0.1,\n  screenPercentage: 0.25,\n  touchCircleThicknessScaler: 0.1,\n  touchedWobbleScaler: 2,\n  touchedLineScaler: 0.05,\n  touchedLineMinWidth: 2,\n  touchedTipPreScaler: 1.25,\n  touchedTipPostScaler: 0.1,\n  hoveredCircleWidthScaler: 0.1\n};\n\nclass Patchbay {\n  constructor (canvas) {\n    this.params = new AppParams(canvas.getContext('2d'));\n    this.params.inCircle = new Circle(\n      this.params,\n      this.params.inType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.params.outCircle = new Circle(\n      this.params,\n      this.params.outType,\n      patchbayDefaults.screenPercentage,\n      patchbayDefaults.tempThickness\n    );\n    this.finger = new Finger(this.params);\n    this.reqAnimFrame = undefined;\n  }\n\n  drawLoop () {\n    if (this.reqAnimFrame) {\n      cancelAnimationFrame(this.reqAnimFrame);\n      this.reqAnimFrame = undefined;\n    }\n    this.finger.update();\n    this.params.outCircle.update();\n    this.params.inCircle.update();\n    for(let i in this.params.connections){\n      this.params.connections[i].update();\n    }\n\n    this.params.context.save();\n    this.clearCanvas();\n\n    this.params.outCircle.drawArcs();\n    this.params.inCircle.drawArcs();\n\n    this.params.outCircle.drawNames();\n    this.params.inCircle.drawNames();\n\n    this.params.outCircle.drawPorts();\n    this.params.inCircle.drawPorts();\n\n    for(let i in this.params.connections){\n      this.params.connections[i].draw();\n    }\n\n    this.drawTouchedPort();\n    this.drawHoveredPort();\n\n    this.params.context.restore();\n    this.reqAnimFrame = requestAnimationFrame(() => this.drawLoop());\n  }\n\n  drawTouchedPort (fingerX, fingerY) {\n    if (!this.params.touchedPort) {\n      return;\n    }\n\n    console.log('HERE')\n\n    const touchCircleThickness = this.params.touchedPort.size * patchbayDefaults.touchCircleThicknessScaler;\n    let touchedLineWidth = Math.sin(this.params.touchedPort.wobbleCounter);\n    touchedLineWidth *= patchbayDefaults.touchedWobbleScaler;\n    touchedLineWidth += Math.max(\n      this.params.touchedPort.size * patchbayDefaults.touchedLineScaler,\n      patchbayDefaults.touchedLineMinWidth\n    );\n    let touchedLineTipCircleScaler = this.params.touchedPort.scaler;\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPreScaler;\n    touchedLineTipCircleScaler = Math.min(touchedLineTipCircleScaler, 1);\n    touchedLineTipCircleScaler = Math.max(touchedLineTipCircleScaler, 0);\n    touchedLineTipCircleScaler *= patchbayDefaults.touchedTipPostScaler;\n    const circleRadius = this.params.touchedPort.size * touchedLineTipCircleScaler;\n\n    // draw the outlining circle\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      this.params.touchedPort.size, 0, utils.PI2, touchCircleThickness,\n      utils.colors.white(), undefined\n    );\n    this.params.context.restore();\n\n    // then draw the line, that wobbles its thickness\n    this.params.context.save();\n    utils.drawLine(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y, fingerX, fingerY,\n      touchedLineWidth, utils.colors.green()\n    );\n    this.params.context.restore();\n\n    // then two smaller filled in circles to cover the tips of the line\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.touchedPort.x, this.params.touchedPort.y,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    utils.drawArc(\n      this.params.context,\n      fingerX, fingerY,\n      circleRadius, 0, utils.PI2, 0,\n      undefined, utils.colors.white()\n    );\n    this.params.context.restore();\n  }\n\n  drawHoveredPort () {\n    if (!this.params.hoveredPort) {\n      return;\n    }\n    const hoveredCircleWidth = this.params.hoveredPort.size * patchbayDefaults.hoveredCircleWidthScaler;\n    this.params.context.save();\n    utils.drawArc(\n      this.params.context,\n      this.params.hoveredPort.x, this.params.hoveredPort.y,\n      this.params.hoveredPort.size, 0, utils.PI2, hoveredCircleWidth,\n      utils.colors.green(), undefined\n    );\n    this.params.context.restore();\n  }\n\n  setSize (width, height) {\n    this.params.width = width;\n    this.params.height = height;\n  }\n\n  clearCanvas() {\n    this.params.context.fillStyle = utils.colors.background();\n    this.params.context.fillRect(0, 0, this.params.width, this.params.height);\n  }\n\n  createConnection (outputID, inputID, inputIndex, outputIndex) {\n    const tempName = Connection.generateName(\n      outputID, outputIndex, inputID, inputIndex);\n    if (!this.params.connections[tempName]) {\n      let outPort = this.params.getPort(outputID, outputIndex, this.params.outType);\n      let inPort = this.params.getPort(inputID, inputIndex, this.params.inType);\n      if (outPort && inPort) {\n        const newConnection = new Connection(this.params, outPort, inPort, tempName);\n        this.params.addConnection(tempName, newConnection);\n      }\n    }\n    else {\n      // TODO: not sure what this does, seems to be left over from thesis\n      this.params.connections[tempName].exists = true;\n    }\n    return tempName;\n  }\n\n  eraseNodeFromConnections (id) {\n    for (let n in this.params.connections) {\n      const conn = this.params.connections[n];\n      if (conn.outPort.parent.id === id || conn.inPort.parent.id === id) {\n        this.params.deleteConnection(n);\n      }\n    }\n  }\n\n  handleUserEvent (type, x, y) {\n    if (type === userEventTypes.touch) {\n      this.finger.dragEvent(x, y, true);\n      this.finger.touchEvent();\n    }\n    else if (type === userEventTypes.move) {\n      this.finger.dragEvent(x, y, false);\n    }\n    else if (type === userEventTypes.release) {\n      this.finger.releaseEvent(x, y);\n    }\n  }\n}\n\nexport { Patchbay, userEventTypes }\n"]},"metadata":{},"sourceType":"module"}